<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-05-13T08:08:17.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Intellij Live Templates ]]></title>
    <link href="http://shane.hsi.rocks/2016/05/13/Intellij-Live-Templates/"/>
    <id>http://shane.hsi.rocks/2016/05/13/Intellij-Live-Templates/</id>
    <published>2016-05-13T08:07:18.000Z</published>
    <updated>2016-05-13T08:08:17.000Z</updated>
    <content type="html"><![CDATA[<p>改变变量的光标书序:</p>
<p><a href="http://stackoverflow.com/questions/17216536/putting-the-cursor-in-a-specific-place-in-a-live-template" target="_blank" rel="external">http://stackoverflow.com/questions/17216536/putting-the-cursor-in-a-specific-place-in-a-live-template</a></p>
<p>官方文档:</p>
<p><a href="https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-template-variables.html?origin=old_help" target="_blank" rel="external">https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-template-variables.html?origin=old_help</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-live-templates.html?origin=old_help" target="_blank" rel="external">https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-live-templates.html?origin=old_help</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.1/simple-parameterized-and-surround-live-templates.html?origin=old_help" target="_blank" rel="external">https://www.jetbrains.com/help/idea/2016.1/simple-parameterized-and-surround-live-templates.html?origin=old_help</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>改变变量的光标书序:</p>
<p><a href="http://stackoverflow.com/questions/17216536/putting-the-cursor-in-a-specific-place-in-a-live-template" target=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Learn API of react redux form]]></title>
    <link href="http://shane.hsi.rocks/2016/05/13/Learn-API-of-react-redux-form/"/>
    <id>http://shane.hsi.rocks/2016/05/13/Learn-API-of-react-redux-form/</id>
    <published>2016-05-13T07:33:28.000Z</published>
    <updated>2016-05-13T07:49:34.000Z</updated>
    <content type="html"><![CDATA[<p>Filed 组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Field &#125; <span class="keyword">from</span> <span class="string">'react-redux-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in your component's render() method</span></span><br><span class="line">&lt;Field model=<span class="string">"user.name"</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="title">Field</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><code>Field</code> 其实是一个 connect.</p>
<p>提供的功能:</p>
<ul>
<li><p>handles control updates, such as focus, blur, pristine, etc. 可以控制 focus blur 这些</p>
</li>
<li><p>keeps track of validity on any part of your model</p>
</li>
</ul>
<p>看下 example, 我着重想知道的, 是如何将值从 model -&gt; form 的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; modelReducer, formReducer &#125; <span class="keyword">from</span> <span class="string">'react-redux-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LoginForm <span class="keyword">from</span> <span class="string">'./forms/login-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(combineReducers(&#123;</span><br><span class="line">  user: modelReducer(<span class="string">'user'</span>),</span><br><span class="line">  userForm: formReducer(<span class="string">'user'</span>)</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">Provider</span> <span class="attribute">store</span>=<span class="value">&#123;</span> <span class="attribute">store</span> &#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">LoginForm</span> /&gt;</span> /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forms/login-form.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Field &#125; <span class="keyword">from</span> <span class="string">'react-redux-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; user &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Field</span> <span class="attribute">model</span>=<span class="value">"user.username"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Field</span> <span class="attribute">model</span>=<span class="value">"user.password"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> /&gt;</span> /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">          Log in as &#123; user.username &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selector = (state) =&gt; (&#123; user: state.user &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(selector)(LoginForm);</span><br></pre></td></tr></table></figure>
<h2 id="u5982_u4F55_u8BBE_u7F6E"><a href="#u5982_u4F55_u8BBE_u7F6E" class="headerlink" title="如何设置"></a>如何设置</h2><ol>
<li>Setup your store.</li>
</ol>
<ul>
<li>modelReducer(model, initialState) will create a model reducer, and</li>
<li>formReducer(model, initialState) will create a form reducer.</li>
</ul>
<p>他这里的 form reducer 是可选的, 主要功能是:</p>
<p>Form reducers are always optional. If you are not concerned with field states such as focus, blur, pristine, valid, etc., you can omit it (especially for performance purposes).</p>
<h1 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h1><p>Model reducer 是响应 <code>change()</code> action 的</p>
<p>Form reducer 是响应 filed actions 的.</p>
<h1 id="u6821_u9A8C"><a href="#u6821_u9A8C" class="headerlink" title="校验"></a>校验</h1><p>这个待会再看</p>
<h1 id="u8DDF_u8E2A_collections"><a href="#u8DDF_u8E2A_collections" class="headerlink" title="跟踪 collections"></a>跟踪 collections</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>Filed 组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redux Helper Design]]></title>
    <link href="http://shane.hsi.rocks/2016/05/13/Redux-Helper-Design/"/>
    <id>http://shane.hsi.rocks/2016/05/13/Redux-Helper-Design/</id>
    <published>2016-05-13T06:03:57.000Z</published>
    <updated>2016-05-13T08:29:04.000Z</updated>
    <content type="html"><![CDATA[<p>目前的设计, actions: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionFactory</span> </span>&#123;</span><br><span class="line">  protected namespace: any</span><br><span class="line">  protected defaultActions: any</span><br><span class="line"></span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    <span class="keyword">this</span>.namespace = ns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createAction(type, payload?) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      type: <span class="string">`<span class="subst">$&#123;this.namespace&#125;</span>/<span class="subst">$&#123;type&#125;</span>`</span>,</span><br><span class="line">      payload,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  actions() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.defaultActions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是调用了 createAction 这个方法. </p>
<p>现在有一个问题是, OO 的设计模式如何体现.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> ActionFactory <span class="keyword">from</span> <span class="string">'./ActionFactory'</span></span><br><span class="line"></span><br><span class="line">export default class CommonActionFactory extends ActionFactory &#123;</span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    super(ns)</span><br><span class="line">    this.defaultActions = &#123;</span><br><span class="line">      set: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'set'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      openModal: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'openModal'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      closeModal: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'closeModal'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      start: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'start'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      end: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'end'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static isShow = function (state, key) &#123;</span><br><span class="line">    return _.get(state, [<span class="string">'view'</span>, <span class="string">'showModal'</span>, key])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static isPending = function (state, key) &#123;</span><br><span class="line">    return _.get(state, [<span class="string">'view'</span>, <span class="string">'pending'</span>, key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 Form</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ActionFactory <span class="keyword">from</span> <span class="string">'./ActionFactory'</span></span><br><span class="line"></span><br><span class="line">export default class FormActionFactory extends ActionFactory &#123;</span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    super(ns)</span><br><span class="line">    this.defaultActions = &#123;</span><br><span class="line">      setField: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'setField'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      reset: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'reset'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      resetError: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'resetError'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      setError: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'setError'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      setPending: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'setPending'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 ReducerFactory:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line">export default class ReducerFactory &#123;</span><br><span class="line">  protected namespace: any</span><br><span class="line">  protected defaultHandlers: any = &#123;&#125;</span><br><span class="line">  protected handlers: any = &#123;&#125;</span><br><span class="line">  protected initialState: any = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    this.namespace = ns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setInitialState(initialState) &#123;</span><br><span class="line">    this.initialState = _.merge(&#123;&#125;, this.initialState, initialState)</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHandlers(handlers) &#123;</span><br><span class="line">    this.handlers = handlers</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getReducer() &#123;</span><br><span class="line">    const finalHandlers = _.merge(&#123;&#125;, this.defaultHandlers, this.handlers)</span><br><span class="line"></span><br><span class="line">    return (state, action) =&gt; &#123;</span><br><span class="line">      if (!Boolean(state)) &#123;</span><br><span class="line">        state = this.initialState</span><br><span class="line">      &#125;</span><br><span class="line">      if (finalHandlers.hasOwnProperty(action.type)) &#123;</span><br><span class="line">        return finalHandlers[action.type](state, action)</span><br><span class="line">      &#125;</span><br><span class="line">      return state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后子类:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> ReducerFactory <span class="keyword">from</span> <span class="string">'./ReducerFactory'</span></span><br><span class="line">const update = require(<span class="string">'./update'</span>)</span><br><span class="line"></span><br><span class="line">export default class FormReducerFactory extends ReducerFactory &#123;</span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    super(ns)</span><br><span class="line"></span><br><span class="line">    this.setInitialState(&#123;</span><br><span class="line">      view: &#123;&#125;,</span><br><span class="line">      form: &#123;&#125;,</span><br><span class="line">      model: &#123;&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    this.defaultHandlers = &#123;</span><br><span class="line">      [`$&#123;<span class="keyword">this</span>.namespace&#125;/setField<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return _.set(_.merge(&#123;&#125;, state), ['form'].concat(action.payload.path), action.payload.value)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/reset<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return update(state, &#123;</span><br><span class="line">          form: &#123;$set: state.model&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/resetError<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return update(state, &#123;</span><br><span class="line">          validate: &#123;$set: &#123;&#125;&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/setError<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return _.set(_.merge(&#123;&#125;, state), `</span>validate.$&#123;action.payload.path&#125;<span class="string">`, action.payload.value)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/setPending<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return _.set(_.merge(&#123;&#125;, state), `</span>field.$&#123;action.payload.path&#125;.pending<span class="string">`, action.payload.value)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>先来看下 Alt 的设计, 来获取下如何设计 API 的想法.</p>
<h2 id="u4E00_u4E9B_u57FA_u672C_u7684_u60F3_u6CD5"><a href="#u4E00_u4E9B_u57FA_u672C_u7684_u60F3_u6CD5" class="headerlink" title="一些基本的想法"></a>一些基本的想法</h2><p>Redux 的 atom store, Redux 的生态( HMR, 一些 dev tools)是必须利用的.</p>
<p>Redux 的本质也很简单, 一个回调函数的注册. </p>
<p>我想要做的, 只是让写法能更模块化.<br>这个底层暂时也不要改. 改了也不影响上层. </p>
<h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><p>Actions 暂时还是做吧. 但是 Actions 可以封装起来. 如何传给 Component 还是问题. 用 HOC ?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.actions.doSomething</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generateActions() <span class="comment">// 快速生成 actions</span></span><br></pre></td></tr></table></figure>
<p>还有一点, Actions 要能够对异步请求做一层封装, 不要每次都这么多代码.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions.async</span><br><span class="line">.setPendingKey(<span class="string">'loadBasicInfo'</span>)</span><br><span class="line">(<span class="keyword">async</span>.loadBasicInfo))</span><br><span class="line">.end()</span><br><span class="line">.fail()</span><br><span class="line"></span><br><span class="line">actins.isPending(<span class="string">'loadBasicInfo'</span>)</span><br></pre></td></tr></table></figure>
<p>而且要思考下, 什么情况下会 cancel 一个请求.</p>
<p>action 有一个 id.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action.id</span><br></pre></td></tr></table></figure>
<h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>也就是我想给 Reducer 加的</p>
<p>这里面就有一个神奇的(pull way)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bindAction(MyActions.FOO, <span class="keyword">this</span>.handleFoo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleFoo(data) &#123;</span><br><span class="line">    <span class="comment">// do something with data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bindActions(MyActions);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onFoo(data) &#123;</span><br><span class="line">    <span class="comment">// do something with data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它还能反过来(push way):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bindListeners(&#123;</span><br><span class="line">      handleFoo: MyActions.FOO,</span><br><span class="line">      handleBar: [MyActions.BAR, OtherActions.BAR]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleFoo(data) &#123;</span><br><span class="line">    <span class="comment">// will only be called by MyActions.foo()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleBar(data) &#123;</span><br><span class="line">    <span class="comment">// will be called by MyActions.bar() and OtherActions.bar()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且它也封装了 <code>update</code>, 当然它在 alt 中, 主要作用是 emit change</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  handleFoo() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; foo: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      <span class="comment">// set foo to 1 and emit a change.</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        foo: <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// supress emitting a change.</span></span><br><span class="line">    <span class="keyword">this</span>.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看下 Alt 对 Data Sources 的处理:</p>
<p>它的 API 设计:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我觉得要给值做一个 box:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.xxx.isLoading</span><br><span class="line"></span><br><span class="line">value([xx,xx,xx])</span><br><span class="line">get([<span class="string">'xx'</span>,xx,xx]).value</span><br><span class="line">get([<span class="string">'xx'</span>,xx,xx]).loading</span><br><span class="line"></span><br><span class="line">&#123;$loading, $error, $expire, value: xx&#125;</span><br></pre></td></tr></table></figure>
<p>这个我们可以设置几个 box, 只有 box 才有 meta data. 比如缓存, 只有在这个级别可以做 $expire.</p>
<p>首次加载, 首次加载的时机, 可以在 route 时候做. 或者监听 quick click 事件 之类的. 这个时候感觉必须用 observable 做, 或者 event emitter.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.model.firstLoad()</span><br></pre></td></tr></table></figure>
<p> 其他的异步:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> actions.async</span><br><span class="line">.setPendingKey(<span class="string">'loadBasicInfo'</span>)</span><br><span class="line">.setAction(<span class="keyword">async</span>.loadBasicInfo))</span><br><span class="line">.end()</span><br><span class="line">.fail()</span><br></pre></td></tr></table></figure>
<p> 大概打开了一些思路, 准备看看 react-redux-form</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 其中 alt 自动绑定了 store</span></span><br><span class="line"></span><br><span class="line">@alt.createActions()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormActions</span> <span class="keyword">extends</span> <span class="title">Actions</span> </span>&#123;</span><br><span class="line">    constuctor() &#123;</span><br><span class="line">        <span class="keyword">this</span>.generateActions([<span class="string">'xx'</span>, <span class="string">'xx'</span>, <span class="string">'xx'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateTodo(id, text) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, text &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FormActions.get(<span class="string">'xx'</span>) <span class="comment">// 不依赖动态特性</span></span><br><span class="line">FormActions.updateTodo()</span><br></pre></td></tr></table></figure>
<p>需要研究下 RelayContainer 是如何处理异步的.</p>
<p>可能一个思路:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@alt.createActions()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormActions</span> <span class="keyword">extends</span> <span class="title">Actions</span> </span>&#123;</span><br><span class="line">    constuctor() &#123;</span><br><span class="line">        <span class="keyword">this</span>.generateActions([<span class="string">'xx'</span>, <span class="string">'xx'</span>, <span class="string">'xx'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateTodo(id, text) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, text &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@formActions(<span class="string">'xx'</span>)</span><br><span class="line"></span><br><span class="line">@compose(connect(state =&gt; state.xx), [commonActions, formActions])</span><br></pre></td></tr></table></figure>
<h2 id="u9996_u6B21_u52A0_u8F7D_u6570_u636E_u7684_u65B9_u5F0F"><a href="#u9996_u6B21_u52A0_u8F7D_u6570_u636E_u7684_u65B9_u5F0F" class="headerlink" title="首次加载数据的方式"></a>首次加载数据的方式</h2><p>暂时适用 componetDidMount 无所谓</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// box data</span></span><br><span class="line">basicInfo: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    $expire: <span class="literal">true</span>, <span class="comment">// -1 代表还没有初始化</span></span><br><span class="line">    $pending: <span class="literal">false</span>,</span><br><span class="line">    $showPending: 计算属性: 不需要 expire 就不显示, 否则就再判断下 $pending</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很想改写下 <code>get</code>, <code>set</code> 这些 property descriptor.</p>
<h2 id="u770B_u4E0B"><a href="#u770B_u4E0B" class="headerlink" title="看下"></a>看下</h2><h2 id="u7B80_u5355_u770B_u4E0B_OO_Design_Pattern"><a href="#u7B80_u5355_u770B_u4E0B_OO_Design_Pattern" class="headerlink" title="简单看下 OO Design Pattern"></a>简单看下 OO Design Pattern</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>目前的设计, actions: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Umbrella: Externalize the State Tree (or alternatives) ]]></title>
    <link href="http://shane.hsi.rocks/2016/05/06/Umbrella-Externalize-the-State-Tree-or-alternatives/"/>
    <id>http://shane.hsi.rocks/2016/05/06/Umbrella-Externalize-the-State-Tree-or-alternatives/</id>
    <published>2016-05-06T15:37:40.000Z</published>
    <updated>2016-05-07T00:59:56.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>React provides the notion of implicitly allowing a child component to store state (using the setState functionality). However, it is not just used for business logic state. It is also used to remember DOM state, or tiny ephemeral state such as scroll position, text selection etc. It is also used for temporary state such as memoization.</p>
</blockquote>
<p>子组件可以 store 状态</p>
<p>作用：</p>
<ul>
<li>业务逻辑状态</li>
<li>DOM 状态</li>
<li>小的瞬间状态（比如滚动位置，文字选择）</li>
<li>临时存储，比如记忆</li>
</ul>
<blockquote>
<p>This is kind of a magic black box in React and the implementation details are largely hidden. People tend to reinvent the wheel because of it, and invent their own state management systems. E.g. using Flux.</p>
</blockquote>
<p>黑盒子，细节被隐藏，人们倾向于重新造轮子（Flux）</p>
<blockquote>
<p>There is still plenty of use cases for Flux, but not all state belongs in Flux stores.</p>
</blockquote>
<p>当然不应该所有 state 交给 flux</p>
<blockquote>
<p>Manually managing the adding/removing of state nodes for all of this becomes a huge burden. So, regardless you’re not going to keep doing this manually, you’ll end up with your own system that does something similar. We need a convenient and standard way to handle this across components. This is not something that should be 100% in user space because then components won’t be able to integrate well with each other. Even if you think you’re not using it, because you’re not calling setState, you still are relying on the capability being there.</p>
<p>It undermines the ecosystem and eventually everyone will reconverge on a single external state library anyway. We should just make sure that gets baked into React.</p>
<p>We designed the state tree so that the state tree data structure would be opaque so that we can optimize the internals in clever ways. It blocks many anti-patterns where external users breaks through the encapsulation boundaries to touch someone else’s state. That’s exactly the problem React’s programming model tries to address.</p>
</blockquote>
<p>state 要不透明,对内部进行优化,不能碰到其他的 state.</p>
<blockquote>
<p>However, unfortunately this state tree is opaque to end users. This means that there are a bunch of legitimate use cases are not available to external libraries. E.g. undo/redo, reclaiming memory, restoring state between sessions, debugging tools, hot reloading, moving state from server to the client and more.</p>
</blockquote>
<p>因为是不透明的, 就有不能做 undo/redo reclaiming memory,  restoring state between sessions, debugging tools, hot reloading, moving state from server to the client and more.</p>
<blockquote>
<p>We could provide a standard externalized state-tree. E.g. using an immutable-js data structure. However, that might make clever optimizations and future features more difficult to adopt. It also isn’t capable of fully encapsulating the true state of the tree which may include DOM state, it may be ok to treat this state differently as a heuristic but the API need to account for it. It also doesn’t allow us to enforce a certain level of encapsulation between components.</p>
<p>Another approach is to try to add support for more use cases to React, one-by-one until the external state tree doesn’t become useful anymore. I’ve created separate issues for the ones we we’re already planning on supporting:</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>React provides the notion of implicitly allowing a child component to store state (using the setState functionality). Howeve]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[redux-loop]]></title>
    <link href="http://shane.hsi.rocks/2016/04/28/redux-loop/"/>
    <id>http://shane.hsi.rocks/2016/04/28/redux-loop/</id>
    <published>2016-04-28T08:00:50.000Z</published>
    <updated>2016-04-28T08:33:48.000Z</updated>
    <content type="html"><![CDATA[<p>sequence your effects naturally and purely by returning them from your reducers.</p>
<blockquote>
<p>Doesn’t redux-loop put side-effects in the reducer?</p>
</blockquote>
<p>It doesn’t. The values returned from the reducer when <strong>scheduling an effect</strong> with redux-loop only <strong>describe</strong> the effect. Calling the reducer will <strong>not cause the effect to run</strong>. The value returned by the reducer is just an object that the store knows how to interpret when it is enhanced by redux-loop. You can safely call a reducer in your tests <strong>without worrying about waiting for effects to finish</strong> and what they will do to your environment.</p>
<p>只是一个形容，一个占位。</p>
<h2 id="quick_example"><a href="#quick_example" class="headerlink" title="quick example"></a>quick example</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//... 略去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstAction = &#123;</span><br><span class="line">  type: <span class="string">'FIRST_ACTION'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doSecondAction = (value) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        type: <span class="string">'SECOND_ACTION'</span>,</span><br><span class="line">        payload: value,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thirdAction = &#123;</span><br><span class="line">  type: <span class="string">'THIRD_ACTION'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个还是蛮牛逼的</span></span><br><span class="line"><span class="comment">// immutable store state allowed by default, but not required</span></span><br><span class="line"><span class="keyword">const</span> initialState = fromJS(&#123;</span><br><span class="line">  firstRun: <span class="literal">false</span>,</span><br><span class="line">  secondRun: <span class="literal">false</span>,</span><br><span class="line">  thirdRun: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'FIRST_ACTION'</span>:</span><br><span class="line">    <span class="comment">// 序列是： 首先是 first 然后是 batch 到一个 promise，一个 constant </span></span><br><span class="line">    <span class="comment">// Enter a sequence at FIRST_ACTION, SECOND_ACTION and THIRD_ACTION will be</span></span><br><span class="line">    <span class="comment">// dispatched in the order they are passed to batch</span></span><br><span class="line">    <span class="keyword">return</span> loop(</span><br><span class="line">      state.set(<span class="string">'firstRun'</span>, <span class="literal">true</span>),</span><br><span class="line">      Effects.batch([</span><br><span class="line">        Effects.promise(doSecondAction, <span class="string">'hello'</span>),</span><br><span class="line">        Effects.constant(thirdAction)</span><br><span class="line">      ])</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SECOND_ACTION'</span>:</span><br><span class="line">    <span class="keyword">return</span> state.set(<span class="string">'secondRun'</span>, action.payload);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'THIRD_ACTION'</span>:</span><br><span class="line">    <span class="keyword">return</span> state.set(<span class="string">'thirdRun'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: passing enhancer as the last argument to createStore requires redux@&gt;=3.1.0</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, initialState, install());</span><br><span class="line"></span><br><span class="line">store</span><br><span class="line">  .dispatch(firstAction)</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    <span class="comment">// dispatch returns a promise for when the current sequence is complete</span></span><br><span class="line">    <span class="comment">// &#123; firstRun: true, secondRun: 'hello', thirdRun: true &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(store.getState().toJS());</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Why_use_this_3F"><a href="#Why_use_this_3F" class="headerlink" title="Why use this?"></a>Why use this?</h2><p>Having used and followed the progression of Redux and the Elm Architecture, and after trying other effect patterns for Redux, we came to the following conclusion:</p>
<blockquote>
<p>Synchronous state transitions caused by returning a new state from the reducer in response to an action are just one of all possible effects an action can have on application state.<br>同步的状态变化一般是 reducer 响应 action，这只是其中 action 能给到 application state 的 effects 的一种。</p>
</blockquote>
<p>Many other methods for handling effects in Redux, especially those implemented with action-creators, incorrectly teach the user that asynchronous effects are fundamentally different from synchronous state transitions. </p>
<p>很多 redux 处理 effects 的方法，特别是通过 actionCreators 实现的，错误的教给了用户，异步 effects 和同步是本质不同的。</p>
<p>This separation encourages divergent and increasingly specific means of processing particular types effects. </p>
<p>Instead, we should focus on making our reducers powerful enough to handle asynchronous effects as well as synchronous state transitions. </p>
<p>相反的，我们应该让 reduer 能处理异步，就像处理同步一样。</p>
<p>With redux-loop, the reducer doesn’t just decide what happens now due to a particular action, it decides what happens next. All of the behavior of your application can be traced through one place, and that behavior can be easily broken apart and composed back together. This is one of the most powerful features of the Elm architecture, and with redux-loop it is a feature of Redux as well.</p>
<p>这样，redcuer 除了响应 action，也能决定下一步做什么。</p>
<p>这些都是 behaviror，都能在一处 traced。这些 behavior 都可以被轻松的 分解和组合。这就是 redux 的强度特性之一。</p>
<h3 id="Write_a_reducer_with_some_effects"><a href="#Write_a_reducer_with_some_effects" class="headerlink" title="Write a reducer with some effects"></a>Write a reducer with some effects</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Effects, loop &#125; <span class="keyword">from</span> <span class="string">'redux-loop'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loadingStart, loadingSuccess, loadingFailure &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchDetails</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">`/api/details/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">    .then((r) =&gt; r.json())</span><br><span class="line">    .then(loadingSuccess)</span><br><span class="line">    .catch(loadingFailure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'LOADING_START'</span>:</span><br><span class="line">      <span class="keyword">return</span> loop(</span><br><span class="line">        &#123; ...state, loading: <span class="literal">true</span> &#125;,</span><br><span class="line">        Effects.promise(fetchDetails, action.payload.id)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'LOADING_SUCCESS'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        details: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'LOADING_FAILURE'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        error: action.payload.message</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的是 <code>loop</code>。</p>
<p>A loop joins an updated model state with an effect for the store to process</p>
<p>组合了一个被更新过的 model state，和一个 effect。store 会之后处理。</p>
<p>Effects are declarative specifications of the next behavior of the store.</p>
<h2 id="Avoid_circular_loops_21"><a href="#Avoid_circular_loops_21" class="headerlink" title="Avoid circular loops!"></a>Avoid circular loops!</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'FIRST'</span>:</span><br><span class="line">      <span class="keyword">return</span> loop(</span><br><span class="line">        state,</span><br><span class="line">        Effects.constant(second())</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SECOND'</span>:</span><br><span class="line">      <span class="keyword">return</span> loop(</span><br><span class="line">        state,</span><br><span class="line">        Effects.constant(first())</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This minimal example will cause perpetual dispatching! While it is also possible to make this mistake with large, complicated networks of redux-thunk action creators, it is much easier to spot the mistake before it is made. It helps to keep your reducers small and focused, and use combineReducers or manually compose reducers so that the number of actions you deal with at one time is small. </p>
<p>A small set of actions which initiate a loop will help reduce the likelihood of causing circular dispatches.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>sequence your effects naturally and purely by returning them from your reducers.</p>
<blockquote>
<p>Doesn’t redux-loop put side-effects ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[elm architecture]]></title>
    <link href="http://shane.hsi.rocks/2016/04/28/elm-architecture/"/>
    <id>http://shane.hsi.rocks/2016/04/28/elm-architecture/</id>
    <published>2016-04-28T07:14:46.000Z</published>
    <updated>2016-04-28T07:30:10.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>model</li>
<li>update</li>
<li>view </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- MODEL</span><br><span class="line"></span><br><span class="line">type alias Model = &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- UPDATE</span><br><span class="line"></span><br><span class="line">type Action = Reset | ...</span><br><span class="line"></span><br><span class="line">update : Action -&gt; Model -&gt; Model</span><br><span class="line">update action model =</span><br><span class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></span><br><span class="line">    Reset -&gt; ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- VIEW</span><br><span class="line"></span><br><span class="line">view : Model -&gt; Html</span><br><span class="line">view =</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<h2 id="Example_1_3A_A_Counter"><a href="#Example_1_3A_A_Counter" class="headerlink" title="Example 1: A Counter"></a>Example 1: A Counter</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type alias Model = Int</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看到了吗？使用 union type， TypeScript 也有。然后通过 namespace</span></span><br><span class="line">type Action = Increment | Decrement</span><br><span class="line"></span><br><span class="line">update : Action -&gt; Model -&gt; Model</span><br><span class="line">update action model =</span><br><span class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></span><br><span class="line">    Increment -&gt; model + <span class="number">1</span></span><br><span class="line">    Decrement -&gt; model - <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>view</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">view : Signal.Address Action -&gt; Model -&gt; Html</span><br><span class="line">view address model =</span><br><span class="line">  div []</span><br><span class="line">    [ button [ onClick address Decrement ] [ text <span class="string">"-"</span> ]</span><br><span class="line">    , div [ countStyle ] [ text (toString model) ]</span><br><span class="line">    , button [ onClick address Increment ] [ text <span class="string">"+"</span> ]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">countStyle : Attribute</span><br><span class="line">countStyle =</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>注意理解下 <code>Address</code> 函数，后面在讲解到。</p>
<h2 id="Example_2_3A_A_Pair_of_Counters"><a href="#Example_2_3A_A_Pair_of_Counters" class="headerlink" title="Example 2: A Pair of Counters"></a>Example 2: A Pair of Counters</h2><p>我们看这个 Fractal 的架构如何组合？如何重用？</p>
<p>我们封装了一个模块，它的接口是统一的：</p>
<p><code>Model init Action update view</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> Counter (Model, init, Action, update, view) where</span><br><span class="line"></span><br><span class="line">type Model</span><br><span class="line"></span><br><span class="line">init : Int -&gt; Model</span><br><span class="line"></span><br><span class="line">type Action</span><br><span class="line"></span><br><span class="line">update : Action -&gt; Model -&gt; Model</span><br><span class="line"></span><br><span class="line">view : Signal.Address Action -&gt; Model -&gt; Html</span><br></pre></td></tr></table></figure>
<p>我们期待的是提供合适的函数接口，但是隐藏具体执行过程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>model</li>
<li>update</li>
<li>view </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[单向 UI 架构]]></title>
    <link href="http://shane.hsi.rocks/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/"/>
    <id>http://shane.hsi.rocks/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/</id>
    <published>2016-04-28T06:12:43.000Z</published>
    <updated>2016-04-28T07:12:04.000Z</updated>
    <content type="html"><![CDATA[<p>这里有一篇<a href="http://adoyle.me/blog/unidirectional-user-interface-architectures.html" target="_blank" rel="external">翻译</a></p>
<ul>
<li><strong>User events</strong></li>
<li><strong>User interface rendering</strong> 在屏幕上的图形输出，通常表示为HTML或一些可比高级别声明性代码如JSX。</li>
<li><strong>UI</strong> 它接受用户事件作为输入，并输出渲染，一个持续的过程，而不是一次性的变换。</li>
</ul>
<blockquote>
<p>A unidirectional architecture is said to be <strong>fractal</strong> if subcomponents are structured in the same way as the whole is.</p>
</blockquote>
<p>单向被认为是 fractal（分形），如果子组件的组织方式是统一的。</p>
<p>In fractal architectures, the whole can be naively packaged as a component to be used in some larger application.</p>
<p>In non-fractal architectures, the non-repeatable parts are said to be orchestrators over the parts that have hierarchical composition.</p>
<p>非分形架构中，非重复模块和其他模块需要特定的协调器。</p>
<h2 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h2><ul>
<li><p>Dispatcher 是 singleton。</p>
</li>
<li><p>Only View has composable components.</p>
<p>  A React component is a UI program, and is usually not written as a Flux architecture internally. Hence Flux is not fractal, where the <strong>orchestrators</strong> are the <strong>Dispatcher</strong> and the <strong>Stores</strong>.</p>
</li>
<li><p>User event handlers are declared in the rendering. event 在 rendering 里声明</p>
<p>  <code>onClick={this.clickHandler}</code></p>
</li>
</ul>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux is a variation of Flux where the <strong>singleton Dispatcher</strong> was adapted to become <strong>a singleton Store</strong>. </p>
<ul>
<li>Singleton Store</li>
<li>Provider</li>
<li>Provider</li>
<li>Reducers</li>
</ul>
<h3 id="Peculiarities"><a href="#Peculiarities" class="headerlink" title="Peculiarities"></a>Peculiarities</h3><p>Like Flux, Redux is not (by design) fractal and the <strong>Store</strong> is an <strong>orchestrator</strong>.</p>
<h2 id="Elm"><a href="#Elm" class="headerlink" title="Elm"></a>Elm</h2><ul>
<li>Model: a type defining the structure of state data 定义 data 的结构</li>
<li>View: a pure function transforming state into rendering 将 state 转换成rendering</li>
<li>Actions: a type defining user events sent through mailboxes 就是 type</li>
<li>Update: a pure function from previous state and an action to new state 就是 reducer</li>
</ul>
<p>和 redux 相比，他没有一个 store。</p>
<hr>
<p>关于 reactive ？</p>
<img src="/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/passive.png" alt="passive.png" title="">
<p>Bar is <strong>passive</strong>: it allows other modules to change its state. Foo is proactive: it is responsible for making Bar’s state function correctly. The passive module is unaware of the existence of the arrow which affects it.</p>
<p>被调用方（passive）不知道调用方（proactive）的存在。Bar 允许其他 modules，比如 Foo 来改变 Bar 本身的状态。</p>
<img src="/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/reactive.png" alt="reactive.png" title="">
<p>Bar is <strong>reactive</strong>: it is fully responsible for managing its own state by reacting to external events. Foo, on the other hand, is unaware of the existence of the arrow originating from its network request event.</p>
<p>Bar 完全控制自己的状态。Foo 不知道 Bar 的存在。</p>
<blockquote>
<p>What is the benefit of this approach? Inversion of Control, mainly because Bar is responsible for itself. Plus, we can hide Bar’s incrementCounter() as a private function. In the passive case, it was required to have incrementCounter() public, which means we are exposing Bar’s internal state management outwards. It also means if we want to discover how Bar’s counter works, we need to find all usages of incrementCounter() in the codebase. In this regard, Reactive and Passive seem to be duals of each other.</p>
</blockquote>
<p>IoC，可以隐藏 Bar 的 incrementCounter() 作为私有方法。<strong>如果要知道 Bar incrementCounter() 的工作机制，我们要找到所有 incrementCounter() 被调用的地方</strong></p>
<blockquote>
<p>这个我觉得是重点，public/private 的本身含义很简单，关键就是 private 之后会带来的倾向性。Bar 只相应唯一一个 event 的 payload。Bar 的最终吐出的 state，外界对它的影响要最低。state，主要在 Bar，而不是把 Bar 当做一个改变 state 的操作。</p>
</blockquote>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里有一篇<a href="http://adoyle.me/blog/unidirectional-user-interface-architectures.html" target="_blank" rel="external">翻译</a></p>
<ul>
<li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[redux data flow]]></title>
    <link href="http://shane.hsi.rocks/2016/04/27/redux-data-flow/"/>
    <id>http://shane.hsi.rocks/2016/04/27/redux-data-flow/</id>
    <published>2016-04-27T10:22:48.000Z</published>
    <updated>2016-04-28T03:59:31.000Z</updated>
    <content type="html"><![CDATA[<p>原文 1：<a href="https://github.com/jarvisaoieong/redux-architecture" target="_blank" rel="external">jarvisaoieong/redux-architecture</a></p>
<p>In classical Redux, which side effect is handled by thunk middleware, is not fractal (a term that is nicely explained by @stalz)</p>
<p>传统的 redux 中，side effect 是通过 thunk 中间件来处理的，</p>
<p>它不是 <strong><a href="http://staltz.com/unidirectional-user-interface-architectures.html" target="_blank" rel="external">fractal</a></strong> 的</p>
<img src="/2016/04/27/redux-data-flow/redux-architecture.png" alt="redux-architecture.png" title="">
<p>Even with some new Redux additions, like redux-saga, are also not composable in a fractal way with the rest of architecture.</p>
<p>redux-saga 也无法用 fractal 的方式和其他模块进行组合。</p>
<p>I think <a href="https://github.com/evancz/elm-architecture-tutorial/" target="_blank" rel="external">elm architecture</a> has found the proper way to do it right. Beside composing Views, State and Reducers (which are already composed in classical Redux), Actions and Effects should be composed too. All that leads to composition of application pieces at the higher level.</p>
<p>Elm 架构找到了一种正确的解决方式。除了组合 Views，States 和 reducers（redux 已经 compose），Actions 和 Effects 也会被 compose。总体来说，就能将 application pieces 组合到一个高的层级。</p>
<img src="/2016/04/27/redux-data-flow/elm-architecture.png" alt="elm-architecture.png" title="">
<p><strong>注：</strong> 需要理解下 elm</p>
<p>Redux is awesome. In order to make redux architecture fractal. We only need two adjustment in our application.</p>
<ol>
<li><p>Use <a href="https://github.com/raisemarketplace/redux-loop" target="_blank" rel="external">redux-loop</a> as side effect solution. </p>
<p>It will make the effects composable and the reducers more domain centric. It give you elm architecture side effect like solutions. 可以让 effects 变的可以 compose。reducer 更加面向 domain。给了类似 elm 架构的解决方案。</p>
</li>
<li><p>Don’t use <code>bindActionCreators</code>, just pass <code>dispatch</code> as the parameter to the components.</p>
<p>What the component needed is model (the data) and dispatch (a way to communicate with the rest architecture). It doesnt need the action callback as the parameters.不要使用 <code>bindActionCreators</code>，只要将 dispatch 传入 components。component 需要 modal（就是 data 数据）和 dispatch（和应用的其他架构部分做交互的方式）。不需要 action callback。</p>
</li>
</ol>
<p>This repo is port of the elm architecture examples in redux with redux-loop to show the benefits of hierarchical composition everywhere. In this example, I used my fork of <a href="https://github.com/jarvisaoieong/redux-loop" target="_blank" rel="external">redux-loop</a> and <a href="https://github.com/jarvisaoieong/redux-logger" target="_blank" rel="external">redux-logger</a> to demonstrate how to log the high order action and async action. (Please open the console in the <a href="http://jarvisaoieong.github.io/redux-architecture/" target="_blank" rel="external">live demo</a>.)</p>
<p><img src="http://i.imgur.com/33MQJvu.png" alt=""></p>
<img src="/2016/04/27/redux-data-flow/log.png" alt="log.png" title="">
<p>I hope we can make elm architecture to the mainstream to create a truly reusable and well encapsulated application.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 1：<a href="https://github.com/jarvisaoieong/redux-architecture" target="_blank" rel="external">jarvisaoieong/redux-architecture</a></p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Read recompose API]]></title>
    <link href="http://shane.hsi.rocks/2016/04/23/Read-recompose-API/"/>
    <id>http://shane.hsi.rocks/2016/04/23/Read-recompose-API/</id>
    <published>2016-04-22T23:14:48.000Z</published>
    <updated>2016-04-22T23:19:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="u6570_u636E_u6D41"><a href="#u6570_u636E_u6D41" class="headerlink" title="数据流"></a>数据流</h2><p>这种方式不好用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = withState(</span><br><span class="line">  <span class="string">'counter'</span>, <span class="string">'setCounter'</span>, <span class="number">0</span></span><br><span class="line">)((&#123; counter, setCounter &#125;) =&gt; (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      Count: &#123;counter&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> setCounter(n =&gt; n + 1)&#125;&gt;Increment<span class="tag">&lt;/<span class="title">button</span>&gt;</span> /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> setCounter(n =&gt; n - 1)&#125;&gt;Decrement<span class="tag">&lt;/<span class="title">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>√ 这种方式符合 redux-style，目前够清晰。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counterReducer = (count, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> INCREMENT:</span><br><span class="line">    <span class="keyword">return</span> count + <span class="number">1</span></span><br><span class="line">  <span class="keyword">case</span> DECREMENT:</span><br><span class="line">    <span class="keyword">return</span> count - <span class="number">1</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = withReducer(</span><br><span class="line">  <span class="string">'counter'</span>, <span class="string">'dispatch'</span>, counterReducer, <span class="number">0</span></span><br><span class="line">)((&#123; counter, dispatch &#125;) =&gt; (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      Count: &#123;counter&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> dispatch(&#123; type: INCREMENT &#125;)&#125;&gt;Increment<span class="tag">&lt;/<span class="title">button</span>&gt;</span> /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> dispatch(&#123; type: DECREMENT &#125;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="u6027_u80FD"><a href="#u6027_u80FD" class="headerlink" title="性能"></a>性能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A component that is expensive to render</span></span><br><span class="line"><span class="keyword">const</span> ExpensiveComponent = (&#123; propA, propB &#125;) =&gt; &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optimized version of same component, using shallow comparison of props</span></span><br><span class="line"><span class="comment">// Same effect as React's PureRenderMixin</span></span><br><span class="line"><span class="keyword">const</span> OptimizedComponent = pure(ExpensiveComponent)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Even more optimized: only updates if specific prop keys have changed</span></span><br><span class="line"><span class="keyword">const</span> HyperOptimizedComponent = onlyUpdateForKeys([<span class="string">'propA'</span>, <span class="string">'propB'</span>])(ExpensiveComponent)</span><br></pre></td></tr></table></figure>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EnhancedComponent = hoc(BaseComponent)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composedHoc = compose(hoc1, hoc2, hoc3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same as</span></span><br><span class="line"><span class="keyword">const</span> composedHoc = BaseComponent =&gt; hoc1(hoc2(hoc3(BaseComponent)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same as</span></span><br><span class="line">@withState(<span class="comment">/*...args*/</span>)</span><br><span class="line">@mapProps(<span class="comment">/*...args*/</span>)</span><br><span class="line">@pure</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>## </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="u6570_u636E_u6D41"><a href="#u6570_u636E_u6D4]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECSS Reading Notes]]></title>
    <link href="http://shane.hsi.rocks/2016/04/18/ECSS-Reading-Notes/"/>
    <id>http://shane.hsi.rocks/2016/04/18/ECSS-Reading-Notes/</id>
    <published>2016-04-18T05:30:12.000Z</published>
    <updated>2016-04-18T06:39:07.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>会有一些可选的关于 tools 的 guidelines。</p>
<h1 id="u7B2C_u4E00_u7AE0"><a href="#u7B2C_u4E00_u7AE0" class="headerlink" title="第一章"></a>第一章</h1><p>定义下问题。</p>
<p>定义下基本需求：</p>
<ul>
<li>大型 css base，可维护</li>
<li>可安全删除某些 portion</li>
<li>能快速跟上新的设计</li>
<li>改变不影响其他</li>
<li>工具少，工作流简单</li>
<li>aria 来做 state change communication</li>
</ul>
<p>今晚阅读完毕。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>会有一些可选的关于 tools 的 guidelines。</p>
<h1 id="u7B2C_u4E0]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test mock terminology]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Test-mock-terminology/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Test-mock-terminology/</id>
    <published>2016-04-16T08:45:55.000Z</published>
    <updated>2016-04-16T09:00:29.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://sinonjs.org/#examples" target="_blank" rel="external">sinon examples</a> 非常的清晰。</p>
<p>找到一篇中文：<a href="http://www.tuicool.com/articles/iAz6fi" target="_blank" rel="external">置换测试: Mock, Stub 和其他</a></p>
<ul>
<li><p>double - 理解为置换，它是所有模拟测试对象的 <strong>统称</strong>，我们也可以称它为替身。</p>
</li>
<li><p>stub - 测试桩，它能实现当特定的方法被调用时，返回一个指定的模拟值（每次一致的模拟数据）。</p>
</li>
</ul>
<p>以 sinon.js 为例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stub = sinon.stub().returns(<span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>spy - 侦查，它负责汇报情况，持续追踪什么方法 <strong>被调用了</strong> ，以及调用过程中 <strong>传递了哪些参数</strong> 。比如一个特定的方法是否被调用或者是否使用正确的参数调用。当你需要测试两个对象间的 某些<strong>协议</strong> 或者关系时会非常有用。</li>
</ul>
<blockquote>
<p>关键是方法间的 <strong>协议</strong>。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">it(<span class="string">"calls the original function"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> spy = sinon.spy();</span><br><span class="line">    <span class="keyword">var</span> proxy = once(spy);</span><br><span class="line"></span><br><span class="line">    proxy();</span><br><span class="line"></span><br><span class="line">    assert(spy.called);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>mock - 与 spy 类似，有些许不同。 spy 追踪所有的方法调用，并在事后让你写断言，而 mock 通常需要你 <strong>事先设定期望</strong>。你告诉它你期望发生什么，然后执行测试代码并验证最后的结果与事先定义的期望是否一致。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">it(<span class="string">"returns the return value from the original function"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myAPI = &#123; method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br><span class="line">    <span class="keyword">var</span> mock = sinon.mock(myAPI);</span><br><span class="line">    mock.expects(<span class="string">"method"</span>).once().returns(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> proxy = once(myAPI.method);</span><br><span class="line"></span><br><span class="line">    assert.equals(proxy(), <span class="number">42</span>);</span><br><span class="line">    mock.verify();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>fake - <strong>具备完整</strong> 功能实现和行为的对象，行为上来说它和这个类型的真实对象上一样，但不同于它所模拟的类，它使测试变得更加容易。一个典型的例子是使用内存中的数据库来生成一个数据持久化对象，而不是去访问一个真正的生产环境的数据库。</li>
</ul>
<p>对细节有更多，参考 <a href="http://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="external">Mocks Aren’t Stubs</a></p>
<h2 id="u6A21_u62DF_u4E3B_u4E49_u8005__28Mockists_29_vs-__u7EDF_u8BA1_u4E3B_u4E49_u8005__28Statists_29"><a href="#u6A21_u62DF_u4E3B_u4E49_u8005__28Mockists_29_vs-__u7EDF_u8BA1_u4E3B_u4E49_u8005__28Statists_29" class="headerlink" title="模拟主义者 (Mockists) vs. 统计主义者 (Statists)"></a>模拟主义者 (Mockists) vs. 统计主义者 (Statists)</h2><p>总结下，模拟的是行为（内部的），统计的是最终状态。</p>
<p>许多关于模拟对象的讨论主要是衍生自 Fowler 的文章的，它们讨论了两种不同类型的程序员，模拟主义者和统计主义者，所写的测试。</p>
<p>模拟主意的方式是测试对象之间的交互。通过使用模拟对象，你可以更容易地验证被测对象是否遵循了它与其他类已建立的协议，使得在正确的时间发生正确的外部调用。对于那些使用行为驱动 (behavior-driven) 的开发者来说，这种测试可以驱动出更好的生产代码，因为你需要明确模拟出特定的方法，这可以帮你设计出在两个对象之间使用的更优雅的API，这种想法与模拟驱动紧密联系在一起。因此模拟主义的测试更偏向于单元级别的测试，而不是完全的端到端 (end-to-end) 测试。</p>
<p>统计主义的方式是不使用模拟对象。这种思路是测试时只测试状态而不是行为，因此这种类型的测试更加健壮。使用模拟测试时，如果你更新了实际类的行为，模拟类也需要同步更新；如果你忘了这么做，你可能会遇到测试可以通过但是代码却不能正确工作的情况。通过强调在测试环境中只使用那些真正的代码，统计主意的测试可以帮助你 <strong>减少测试代码和实现代码的耦合度，并降低出错率</strong>。这种类型的测试，您可能已经猜到，适合于更全面的端到端的测试。</p>
<p>当然，并不是说有两个对立的程序员学派；你不可能看到模拟主义和统计主义的当街对决。这种分歧是有用的，但是，得认识到 mock 在有些时候是你的工具箱里最好的工具，但是有时候又不是。不同类型的测试适用于不同的任务，并且最高效的测试套件往往是不同测试风格的集合体。仔细考虑你到底想要用单个测试来验证些什么，这能帮助你找到最合适的测试方式，而且能帮你决定对于当前工作来说，使用模拟测试对象是否是正确的工具。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://sinonjs.org/#examples" target="_blank" rel="external">sinon examples</a> 非常的清晰。</p>
<p>找到一篇中文：<a href="http://www.tuicool]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wallaby Summary]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-Summary/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-Summary/</id>
    <published>2016-04-16T08:38:36.000Z</published>
    <updated>2016-04-16T08:45:25.000Z</updated>
    <content type="html"><![CDATA[<p>测试基础：</p>
<p>Mocha + expect(assertion) + sinon</p>
<ul>
<li><p>Node + TypeScript</p>
</li>
<li><p>Browser + webpack + TypeScript(to ES6) + Babel(ES7，主要是 async/await)</p>
</li>
<li><p>React tsx</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试基础：</p>
<p>Mocha + expect(assertion) + sinon</p>
<ul>
<li><p>Node + TypeScript</p>
</li>
<li><p>Browser + webpack + TypeScript(to ES6) ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wallaby.js TypeScript Node Browser]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-js-TypeScript-Node-Browser/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-js-TypeScript-Node-Browser/</id>
    <published>2016-04-16T08:20:07.000Z</published>
    <updated>2016-04-16T08:34:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7ED3_u5408_webpack__u7684"><a href="#u7ED3_u5408_webpack__u7684" class="headerlink" title="结合 webpack 的"></a>结合 webpack 的</h2><p>用到了 wallaby-webpack postprocessor 和 TypeScript。</p>
<p>package.json</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"chai"</span>: <span class="string">"^2.1.2"</span>,</span><br><span class="line">    <span class="string">"wallaby-webpack"</span>: <span class="string">"*"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.7.3"</span>,</span><br><span class="line">    <span class="string">"ts-loader"</span>: <span class="string">"^0.5.5"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"*"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>tsconfig.json</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="string">"noEmit"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"typings/tsd.d.ts"</span>,</span><br><span class="line">    <span class="string">"typings/assertion-error/assertion-error.d.ts"</span>,</span><br><span class="line">    <span class="string">"typings/chai/chai.d.ts"</span>,</span><br><span class="line">    <span class="string">"typings/jasmine/jasmine.d.ts"</span>,</span><br><span class="line">    <span class="string">"typings/node/node.d.ts"</span>,</span><br><span class="line">    <span class="string">"test/personSpec.ts"</span>,</span><br><span class="line">    <span class="string">"src/Person.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>wallaby.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wallabyWebpack = <span class="built_in">require</span>(<span class="string">'wallaby-webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackPostprocessor = wallabyWebpack(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      <span class="comment">// load 为 false，是因为用到了 webpack。</span></span><br><span class="line">      &#123; pattern: <span class="string">'src/**/*.ts'</span>, load: <span class="literal">false</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      &#123; pattern: <span class="string">'test/**/*Spec.ts'</span>, load: <span class="literal">false</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结合 webpack</span></span><br><span class="line">    postprocessor: webpackPostprocessor,</span><br><span class="line"></span><br><span class="line">    bootstrap: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// required to trigger test loading</span></span><br><span class="line">      <span class="built_in">window</span>.__moduleBundler.loadTests();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="u7EAF_TypeScript"><a href="#u7EAF_TypeScript" class="headerlink" title="纯 TypeScript"></a>纯 TypeScript</h2><p>安装下 jasmine 的 typings</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">w</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'src/*Browser.ts'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      <span class="string">'test/*BrowserSpec.ts'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后是这么引用 Jasmine 的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path="../typings/jasmine/jasmine.d.ts"/&gt;</span></span><br><span class="line"><span class="comment">///&lt;reference path="../src/sayingsBrowser.ts"/&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Sayings Greeter'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'should greet'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> greeter = <span class="keyword">new</span> Sayings.Greeter(<span class="string">'John'</span>);</span><br><span class="line">        expect(greeter.greet()).toBe(<span class="string">'Hello, John'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>纯的 TypeScript。基本没啥这么写的。要么就用 webpack 来写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">w</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'src/*Node.ts'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      <span class="string">'test/*NodeSpec.ts'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    env: &#123;</span><br><span class="line">      type: <span class="string">'node'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// you may remove the setting if you have a tsconfig.json file where the same is set</span></span><br><span class="line">    compilers: &#123;</span><br><span class="line">      <span class="string">'**/*.ts'</span>: w.compilers.typeScript(&#123;<span class="built_in">module</span>: <span class="string">'commonjs'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// By default TypeScript compiler renames .ts files to .js files.</span></span><br><span class="line">    <span class="comment">// If you'd like to not do it and for example use your own renaming strategy,</span></span><br><span class="line">    <span class="comment">// you may pass 'noRename' option to TS compiler</span></span><br><span class="line">    <span class="comment">//  '**/*.ts': w.compilers.typeScript(&#123; noRename: true &#125;)</span></span><br><span class="line">    <span class="comment">// and may use preprocessors to rename files the way you like:</span></span><br><span class="line">    <span class="comment">//preprocessors: &#123;</span></span><br><span class="line">    <span class="comment">//  '**/*.ts': file =&gt; file.rename(file.path + '.js').content</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7ED3_u5408_webpack__u7684"><a href="#u7ED3_u5408_webpack__u7684" class="headerlink" title="结合 webpack 的"></a>结合 webpack 的</h2><p>用到]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript existential operator alternative syntax]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/JavaScript-existential-operator-alternative-syntax/"/>
    <id>http://shane.hsi.rocks/2016/04/16/JavaScript-existential-operator-alternative-syntax/</id>
    <published>2016-04-16T08:05:06.000Z</published>
    <updated>2016-04-16T08:06:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/15260732/does-typescript-support-the-operator-and-whats-it-called" target="_blank" rel="external">链接</a></p>
<p>妥协的方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thing = foo &amp;&amp; foo.bar || <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> thing = foo &amp;&amp; foo.bar &amp;&amp; foo.bar.check &amp;&amp; foo.bar.check.x || <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://stackoverflow.com/questions/15260732/does-typescript-support-the-operator-and-whats-it-called" target="_blank" rel="exter]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wallaby.js Configuration file]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-js-Configuration-file/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-js-Configuration-file/</id>
    <published>2016-04-16T05:00:01.000Z</published>
    <updated>2016-04-16T08:15:14.000Z</updated>
    <content type="html"><![CDATA[<p>by default, wallaby.js is using PhantomJs to run tests.</p>
<p>默认是在 PhantomJs 跑测试（就是 browsers 啦）。</p>
<p>通过 <code>env</code> 来跑在 node 或者 <a href="https://wallabyjs.com/docs/integration/electron.html" target="_blank" rel="external">latest Chromium/V8 via Electron</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">env: &#123;</span><br><span class="line">  type: <span class="string">'node'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> env: &#123;</span><br><span class="line">  kind: <span class="string">'electron'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wallaby</span><br><span class="line">    .localProjectDir <span class="comment">// string 返回 project 当前的目录 </span></span><br><span class="line">    .projectCacheDir <span class="comment">// string project 的 cache 目录 也就是， wallaby 会把文件从 `files` `tests` 复制到 cache 目录，跑的是 cache 里的</span></span><br><span class="line">    .compilers <span class="comment">// 访问 TypeScript Babel compilers https://wallabyjs.com/docs/config/compilers.html</span></span><br><span class="line">    .defaults</span><br></pre></td></tr></table></figure>
<h2 id="u5FEB_u6377_u94FE_u63A5"><a href="#u5FEB_u6377_u94FE_u63A5" class="headerlink" title="快捷链接"></a>快捷链接</h2><ul>
<li><p>配置 compilers <a href="https://wallabyjs.com/docs/integration/typescript.html" target="_blank" rel="external">TypeScript</a> 和 <a href="https://wallabyjs.com/docs/integration/es-next.html" target="_blank" rel="external">ES6/ES7</a></p>
</li>
<li><p>配置 test framework 跑 test 之前设置下环境 <a href="https://wallabyjs.com/docs/config/bootstrap.html" target="_blank" rel="external">setup/bootstrap</a></p>
</li>
<li><p>配置 <a href="https://wallabyjs.com/docs/config/runner.html" target="_blank" rel="external">env</a>，node.js 其他 version 的 phantomjs，electron。</p>
</li>
<li><p><a href="https://wallabyjs.com/docs/config/preprocessors.html" target="_blank" rel="external">preprocessor</a>，比如处理某些 template 为 javascript 来 load tests</p>
</li>
</ul>
<h2 id="test_framework"><a href="#test_framework" class="headerlink" title="test framework"></a>test framework</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">wallaby</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'src/**/*.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      <span class="string">'test/**/*Spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    testFramework: <span class="string">'mocha'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="delays"><a href="#delays" class="headerlink" title="delays"></a>delays</h2><p>使用默认的</p>
<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>输出详细信息，一般不用，报 bug 的时候可以用。</p>
<h1 id="Files_and_tests"><a href="#Files_and_tests" class="headerlink" title="Files and tests"></a>Files and tests</h1><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><p>注意：</p>
<ul>
<li>一定要写全<ul>
<li>比如如果你在 js 里 load 了 json，要写上</li>
<li>如果你 require 了其他的 js，要写上</li>
<li>例外<ul>
<li>node_modules 目录（因为 wallaby 不会 cache 它们，就用 local 的）</li>
<li>如果用了 webpack 等 bundler（除非用的是 global）</li>
<li>用了 中间件 <a href="https://wallabyjs.com/docs/config/middleware.html" target="_blank" rel="external">Middleware</a>???</li>
</ul>
</li>
</ul>
</li>
<li>注意根据依赖设置前后顺序</li>
<li>可以是 js，也可以是 css， image json 等任何类型</li>
</ul>
<h2 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h2><p>略过</p>
<h2 id="File_object"><a href="#File_object" class="headerlink" title="File object"></a>File object</h2><p>pattern</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">files: [</span><br><span class="line">      <span class="string">'src/**/*.js'</span>,</span><br><span class="line">      <span class="comment">// is the same as</span></span><br><span class="line">      &#123; pattern: <span class="string">'src/**/*.js'</span>, instrument: <span class="literal">true</span>, load: <span class="literal">true</span>, ignore: <span class="literal">false</span> &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>
<p>其中 <code>ignore</code> 的快捷写法是 <code>!</code> 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"src/**/*.js"</span>,</span><br><span class="line">    <span class="string">"!src/**/*Spec.js"</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="string">"tests"</span>: [</span><br><span class="line">    <span class="string">"src/**/*Spec.js"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>load</code> 只是否被 sandbox HTML 加载（通过 <code>&lt;script&gt;</code> ）。如果用了 Webpack 就不需要了。</p>
<h2 id="Overriding_defaults"><a href="#Overriding_defaults" class="headerlink" title="Overriding defaults"></a>Overriding defaults</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">wallaby</span>) </span>&#123;</span><br><span class="line">  wallaby.defaults.files.instrument = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'libs/lib1.js'</span>,</span><br><span class="line">      <span class="string">'libs/lib2.js'</span>,</span><br><span class="line">      <span class="string">'libs/lib3.js'</span>,</span><br><span class="line">      <span class="string">'libs/lib4.js'</span>,</span><br><span class="line">      &#123; pattern: <span class="string">'src/**/*.js'</span>, instrument: <span class="literal">true</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      <span class="string">'test/**/*Spec.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h1><p>PhantomJs, Chromium/V8 via Electron and node.js</p>
<p>默认的是 By default, PhantomJs (1.9.8)</p>
<p>具体的是细节，默认的和 node 就可以 </p>
<p><a href="https://wallabyjs.com/docs/config/runner.html" target="_blank" rel="external">更多</a></p>
<h1 id="Compilers"><a href="#Compilers" class="headerlink" title="Compilers"></a>Compilers</h1><p>这个和 preprocessors 会混淆。</p>
<p>preprocessors 也能 transform，然后给到 test runner，但是如果你要有 code coverage，首先 wallaby 需要在任意的 preprocessors 前，intstrument 它们。</p>
<p>也就是说 wallaby 需要了解这些 dialect。</p>
<p>Wallaby.js 本身就支持 ES6，JSX。其他的需要配置。</p>
<p>内置了三款：</p>
<blockquote>
<p>Wallaby.js has three built-in compilers: TypeScript, CoffeeScript and Babel.</p>
</blockquote>
<p>如果用了 Babel compiler ，就不要用 Babel preprocessor。</p>
<p>如果只用了 ES6，没用到 ES7，可以 keep using Babel preprocessor without Babel compiler。</p>
<p>但是如果用到了 TypeScript，则必须用 compiler。preprocessors for TypeScript and CoffeeScript are not required</p>
<p>连配置 compiler 的语法和 preprocessors 都差不多。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">compilers: &#123;</span><br><span class="line">  <span class="string">'**/*.js'</span>: wallaby.compilers.babel(&#123;</span><br><span class="line">    <span class="comment">// babel options</span></span><br><span class="line">    <span class="comment">// like `stage: n` for Babel 5.x or `presets: [...]` for Babel 6</span></span><br><span class="line">    <span class="comment">// (no need to duplicate .babelrc, if you have it, it'll be automatically loaded)</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="string">'**/*.ts'</span>: wallaby.compilers.typeScript(&#123;</span><br><span class="line">    <span class="comment">// TypeScript compiler specific options</span></span><br><span class="line">    <span class="comment">// https://github.com/Microsoft/TypeScript/wiki/Compiler-Options</span></span><br><span class="line">    <span class="comment">// (no need to duplicate tsconfig.json, if you have it, it'll be automatically used)</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Preprocessors"><a href="#Preprocessors" class="headerlink" title="Preprocessors"></a>Preprocessors</h2><p>我的需求已经不需要配置 Preprocessors 了。</p>
<p><a href="https://wallabyjs.com/docs/config/preprocessors.html" target="_blank" rel="external">链接</a></p>
<ul>
<li>compilers</li>
<li>instrumentation</li>
<li>preprocessors</li>
<li>postprocessor</li>
<li>test run</li>
</ul>
<p>It is not recommended to keep any state between function calls because preprocessors and compilers may run in different node processes.</p>
<p>Postprocessor is a function that runs for every batch of file changes after all compilers and preprocessors. It has access not to just one file, but to <strong>all</strong> files (compiled and preprocessed, as well as <strong>original ones</strong>). It is also guaranteed to always run in the <strong>same node process</strong>, so it can <strong>keep some required state</strong>.</p>
<p>Considering all of the above, postprocessor is an ideal place for something like a module bundler, or anything else that needs to  <strong>keep some state between</strong> test runs and have access to all files at the same time.</p>
<p>a function that takes a single argument and is supposed to return a <strong>promise</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     files: [</span><br><span class="line">       <span class="string">'src/**/*.js'</span></span><br><span class="line">     ],</span><br><span class="line"></span><br><span class="line">     tests: [</span><br><span class="line">       <span class="string">'test/**/*Spec.js'</span></span><br><span class="line">     ],</span><br><span class="line"></span><br><span class="line">     <span class="comment">// @param wallaby wallaby.js context</span></span><br><span class="line">     postprocessor: <span class="function"><span class="keyword">function</span> (<span class="params">wallaby</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">         <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// postprocessor work here</span></span><br><span class="line">              <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">// resolve when the work is done</span></span><br><span class="line">              <span class="comment">// or reject on errors</span></span><br><span class="line">              resolve();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">              reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<p>具体的可以看下 webpack 的示例</p>
<p><a href="https://github.com/jeffling/wallaby-webpack/blob/master/index.js" target="_blank" rel="external">wallaby-webpack/index.js</a></p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>setup，alias 是 bootstrap。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'src/**/*.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      <span class="string">'test/**/*Spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    setup: <span class="function"><span class="keyword">function</span> (<span class="params">wallaby</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// wallaby.testFramework is jasmine/QUnit/mocha object</span></span><br><span class="line">      wallaby.testFramework.ui(<span class="string">'tdd'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// you can access 'window' object in a browser environment,</span></span><br><span class="line">      <span class="comment">// 'global' object or require(...) something in node environment 比如 window 和 global</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>by default, wallaby.js is using PhantomJs to run tests.</p>
<p>默认是在 PhantomJs 跑测试（就是 browsers 啦）。</p>
<p>通过 <code>env</code> 来跑在 node 或者 ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Monorepo]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Monorepo/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Monorepo/</id>
    <published>2016-04-16T04:44:25.000Z</published>
    <updated>2016-04-16T04:44:41.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/babel/babel/blob/master/doc/design/monorepo.md" target="_blank" rel="external">Why is Babel a monorepo?</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/babel/babel/blob/master/doc/design/monorepo.md" target="_blank" rel="external">Why is Babel a monorepo?</a></]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wallaby ES7]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-ES7/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-ES7/</id>
    <published>2016-04-16T04:28:53.000Z</published>
    <updated>2016-04-16T08:17:08.000Z</updated>
    <content type="html"><![CDATA[<p>先看看 package.json</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.4.5"</span>,</span><br><span class="line">    <span class="string">"babel-polyfill"</span>: <span class="string">"^6.3.14"</span>,</span><br><span class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">    <span class="string">"babel-preset-stage-0"</span>: <span class="string">"^6.3.13"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 babel-polyfill 上次用到过，对于支持 async/await 必须：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"core-js"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">  <span class="string">"babel-regenerator-runtime"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">  <span class="string">"babel-runtime"</span>: <span class="string">"^5.0.0"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/zloirock/core-js" target="_blank" rel="external">core-js</a> 是一个 polyfills 集合。</p>
<p>具体参见：<a href="https://babeljs.io/docs/usage/polyfill/" target="_blank" rel="external">Polyfill</a></p>
<p>babel-polyfill 和 regenerator-runtime 差别不大。具体差别参考上面的链接和源码。</p>
<p>在看下 <code>.babelrc</code> 配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-0"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看下 wallaby.js 配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">wallaby</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      &#123;pattern: <span class="string">'node_modules/babel-polyfill/dist/polyfill.js'</span>, instrument: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="string">'src/**/*.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      <span class="string">'test/**/*Spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    compilers: &#123;</span><br><span class="line">      <span class="string">'**/*.js'</span>: wallaby.compilers.babel()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中加入这句话，其中，<code>instrument</code> 为 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;pattern: <span class="string">'node_modules/babel-polyfill/dist/polyfill.js'</span>, instrument: <span class="literal">false</span>&#125;,</span><br></pre></td></tr></table></figure>
<p>链接 <a href="https://wallabyjs.com/docs/config/files.html" target="_blank" rel="external">Configuration file: Files and tests</a></p>
<p>关于 <code>instrument</code>：</p>
<blockquote>
<p>The instrument boolean property (<strong>true by default</strong>) determines whether the file is instrumented. Setting the property to false disables the file <strong>code coverage reporting</strong> and prevents the file changes from <strong>triggering automatic test execution</strong>. The setting should normally be set to false for libraries, utils and other rarely changing files. Using the setting makes wallaby.js run your code <strong>faster</strong>, as it doesn’t have to perform unnecessary work.</p>
</blockquote>
<p>还有一个是 <code>compilers</code>。链接 <a href="https://wallabyjs.com/docs/config/compilers.html" target="_blank" rel="external">Compilers</a></p>
<p>写到这，我觉得要把 Wallaby/Configuration file 从头到尾看一遍。</p>
<p>更新：已经看完了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先看看 package.json</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Babel Stage-x Syntax]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Babel-Stage-x-Syntax/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Babel-Stage-x-Syntax/</id>
    <published>2016-04-16T04:14:01.000Z</published>
    <updated>2016-04-16T04:28:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="stage_0"><a href="#stage_0" class="headerlink" title="stage 0"></a>stage 0</h1><p><a href="https://github.com/tc39/ecma262/blob/master/stage0.md" target="_blank" rel="external">stage0</a></p>
<h2 id="Function_Bind_Syntax"><a href="#Function_Bind_Syntax" class="headerlink" title="Function Bind Syntax"></a>Function Bind Syntax</h2><p>文章 <a href="https://babeljs.io/blog/2015/05/14/function-bind" target="_blank" rel="external">Function Bind Syntax</a>.</p>
<h1 id="stage_1"><a href="#stage_1" class="headerlink" title="stage 1"></a>stage 1</h1><p>和 TypeScript 类似，使用 TypeScript 语法即可。</p>
<h1 id="stage_2"><a href="#stage_2" class="headerlink" title="stage 2"></a>stage 2</h1><h2 id="es-trailing-function-commas"><a href="#es-trailing-function-commas" class="headerlink" title="es-trailing-function-commas"></a><a href="https://github.com/jeffmo/es-trailing-function-commas" target="_blank" rel="external">es-trailing-function-commas</a></h2><p>这个倒还好。</p>
<h2 id="ecmascript-rest-spread"><a href="#ecmascript-rest-spread" class="headerlink" title="ecmascript-rest-spread"></a><a href="https://github.com/sebmarkbage/ecmascript-rest-spread" target="_blank" rel="external">ecmascript-rest-spread</a></h2><p>1 Rest Properties</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; x: <span class="number">1</span>, y: <span class="number">2</span>, a: <span class="number">3</span>, b: <span class="number">4</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>2 Spread Properties</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = &#123; x, y, ...z &#125;;</span><br><span class="line">n; <span class="comment">// &#123; x: 1, y: 2, a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="stage_3"><a href="#stage_3" class="headerlink" title="stage 3"></a>stage 3</h1><h2 id="Async_to_generator_transform"><a href="#Async_to_generator_transform" class="headerlink" title="Async to generator transform"></a>Async to generator transform</h2><p>In</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> bar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Out</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _asyncToGenerator = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = _asyncToGenerator(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> bar();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>todo 深入理解 async/await yield promise</p>
</blockquote>
<h2 id="exponentiation-operator"><a href="#exponentiation-operator" class="headerlink" title="exponentiation-operator"></a><a href="https://github.com/rwaldron/exponentiation-operator" target="_blank" rel="external">exponentiation-operator</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x ** y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> squared = <span class="number">2</span> ** <span class="number">2</span>;</span><br><span class="line"><span class="comment">// same as: 2 * 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cubed = <span class="number">2</span> ** <span class="number">3</span>;</span><br><span class="line"><span class="comment">// same as: 2 * 2 * 2</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="stage_0"><a href="#stage_0" class="headerlink" title="stage 0"></a>stage 0</h1><p><a href="https://github.com/tc39/ecma262/blob/mast]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wallaby node]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-node/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-node/</id>
    <published>2016-04-16T04:03:55.000Z</published>
    <updated>2016-04-16T04:37:56.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/shanehsi/wallaby-node-iojs-sample" target="_blank" rel="external">demo</a></p>
<p>先看 package.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">private</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">  "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">chai</span>": <span class="value"><span class="string">"^3.5.0"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>用了 chai 这个 assertion library。</p>
<p>在看 wallaby.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'lib/**/*.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      <span class="string">'test/**/*Spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    bootstrap: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      global.expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    env: &#123;</span><br><span class="line">      type: <span class="string">'node'</span></span><br><span class="line">      <span class="comment">// More options are described here</span></span><br><span class="line">      <span class="comment">// http://wallabyjs.com/docs/integration/node.html</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>解释下： bootstrap，顾名思义，就是在 bootstrap 是，重新将 expect 全局变量替换下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bootstrap: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  global.expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>更多的<a href="http://wallabyjs.com/docs/integration/node.html" target="_blank" rel="external">配置</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/shanehsi/wallaby-node-iojs-sample" target="_blank" rel="external">demo</a></p>
<p>先看 package.json</p>
<figure]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wallaby Intro]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-Intro/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-Intro/</id>
    <published>2016-04-16T04:02:06.000Z</published>
    <updated>2016-04-16T04:02:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u4ECB_u7ECD_Wallaby-js"><a href="#u4ECB_u7ECD_Wallaby-js" class="headerlink" title="介绍 Wallaby.js"></a>介绍 Wallaby.js</h1><h2 id="What_about_a_list_of_main_features_3F"><a href="#What_about_a_list_of_main_features_3F" class="headerlink" title="What about a list of main features?"></a>What about a list of main features?</h2><ul>
<li>continuous testing 持续测试，性能不错</li>
<li>browser code unit testing，测试 browser，是依赖（PhantomJs, Electron or node.js）</li>
<li>node.js unit testing</li>
<li>Supports many testing frameworks（Jasmine 默认）</li>
<li>支持 ES6 and React JSX</li>
<li>支持 TypeScript, CoffeeScript, and ES7</li>
<li>支持  Webpack and Browserify</li>
</ul>
<p>其他的包括：</p>
<ul>
<li>可扩展 preprocessors, compilers and more</li>
<li>性能（只跑变动的，并行的跑，跑选择的）</li>
<li>实时覆盖率</li>
<li>在编辑器 inline 显示 expectations, errors and console.log messages</li>
<li>显示跑的 test 的变量的 data</li>
<li>test 执行的截图？？</li>
</ul>
<h2 id="u548C_Karma_2C_Mocha__u7684_u533A_u522B"><a href="#u548C_Karma_2C_Mocha__u7684_u533A_u522B" class="headerlink" title="和 Karma, Mocha 的区别"></a>和 Karma, Mocha 的区别</h2><p>其他的 runner，需要手动跑，配置 watch，跑所有的 tests，test 的结果是显示在其他的地方，需要切换。</p>
<h2 id="u6587_u7AE0_u94FE_u63A5"><a href="#u6587_u7AE0_u94FE_u63A5" class="headerlink" title="文章链接"></a>文章链接</h2><ul>
<li>所有文档 <a href="http://wallabyjs.com/docs/" target="_blank" rel="external">地址</a></li>
<li>切换不同的 test framework <a href="https://wallabyjs.com/docs/integration/overview.html#supported-testing-frameworks" target="_blank" rel="external">favorite testing framework</a>，主要考虑到如何测试 async/await, promise, observable 这些。Jasmine 似乎不够强大。选择更通用的 mocha 吧。Jasmine 的文档写的也是一绝（不好读）。mocha 肯定有解决 async/await 的方法。社区支持很好。</li>
</ul>
<p>默认的 test framework：</p>
<blockquote>
<p>By default, wallaby.js is using jasmine for browser and mocha for node.</p>
</blockquote>
<p>Todo list:</p>
<ul>
<li><p>[ ]  wallaby</p>
<ul>
<li><p>[ ] webpack</p>
</li>
<li><p>[ ] typescript</p>
</li>
<li><p>[ ] mocha</p>
</li>
<li><p>[ ] async/await</p>
</li>
<li><p>[ ] promise</p>
</li>
<li><p>[ ] rx observable</p>
</li>
<li><p>[ ] node (express)</p>
</li>
</ul>
</li>
<li><p>[ ] koa 2</p>
<ul>
<li>[ ] wallaby</li>
</ul>
</li>
<li><p>测试 React，如何集成 tsx？</p>
</li>
<li>测试 node <a href="https://wallabyjs.com/docs/integration/node.html" target="_blank" rel="external">Node.js</a>，特别是 typescript。</li>
<li><a href="https://wallabyjs.com/docs/integration/typescript.html" target="_blank" rel="external">测试 TypeScript</a></li>
<li><a href="https://wallabyjs.com/docs/integration/es-next.html" target="_blank" rel="external">集成 Babel</a></li>
<li><a href="https://wallabyjs.com/docs/integration/webpack.html" target="_blank" rel="external">集成 webpack</a></li>
<li><a href="https://wallabyjs.com/docs/config/preprocessors.html" target="_blank" rel="external">支持 preprocessors</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4ECB_u7ECD_Wallaby-js"><a href="#u4ECB_u7ECD_Wallaby-js" class="headerlink" title="介绍 Wallaby.js"></a>介绍 Wallaby.js</h1><h2 id="Wha]]>
    </summary>
    
  </entry>
  
</feed>
