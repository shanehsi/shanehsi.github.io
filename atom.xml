<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-01-29T08:40:18.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Twitter Likes Collections Before 060129]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Twitter-Likes-Collections-Before-060129/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Twitter-Likes-Collections-Before-060129/</id>
    <published>2016-01-29T03:17:40.000Z</published>
    <updated>2016-01-29T08:40:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="RxJS"><a href="#RxJS" class="headerlink" title="RxJS"></a>RxJS</h2><ul>
<li><p>egghead.io 上的 RxJS <a href="https://egghead.io/lessons/rxjs-reacting-to-multiple-inputs-using-rxjs-s-combinelatest?utm_content=bufferc97fc&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer" target="_blank" rel="external">课程</a></p>
</li>
<li><p>RxJS 的 <a href="https://overcast.fm/+BPab3rsQQ" target="_blank" rel="external">podcast</a>，采访的 Matthew Podwysocki </p>
</li>
<li><p>RxJS 的<a href="https://github.com/annatomka/rxjs-examples#image-sampler-example" target="_blank" rel="external">示例</a></p>
</li>
<li><p>RxJS 的 Ben Lesh 的 youtube <a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=9on6u7pI3vY%C2%A0%E2%80%A6" target="_blank" rel="external">视频</a></p>
</li>
<li><p><a href="https://medium.com/@BrianDiPalma/thoughts-on-rxjs-cf3562e20d74#.g9n42ub2k" target="_blank" rel="external">Thoughts on RxJS</a>，<a href="https://speakerdeck.com/staltz/the-whole-future-declared-in-a-var" target="_blank" rel="external">另一篇</a></p>
</li>
<li><p><a href="http://staltz.com/how-to-debug-rxjs-code.html" target="_blank" rel="external">如何调试 RxJS 代码</a></p>
</li>
<li><p>【Netflix 如何使用 Node](<a href="http://thenewstack.io/netflix-uses-node-js-power-user-interface/" target="_blank" rel="external">http://thenewstack.io/netflix-uses-node-js-power-user-interface/</a>)</p>
</li>
<li><p><a href="https://github.com/jadbox/rxjs-cluster" target="_blank" rel="external">Using Rx, maximize CPU usage in Node by using the new clusterMap that uses cluster/forked processes</a></p>
</li>
<li><p><a href="https://jsfiddle.net/MichalZalecki/h2xfjgh6/" target="_blank" rel="external">Use Rx.Scheduler.requestAnimationFrame for animations </a></p>
</li>
<li><p>对比下 <a href="https://medium.com/@puppybits/rxjs-is-great-so-why-have-i-moved-on-534c513e7af3?source=latest---" target="_blank" rel="external">ClosureScript</a></p>
</li>
<li><p><a href="https://github.com/escherpad/luna#wanna-use-reactive-extention-rxjs-and-redux-in-your-project-but-dont-know-how" target="_blank" rel="external">Hacker News - Show HN: A Reactive (Rxjs) Redux Lib with Explainations http://ift.tt/1UK1oBV </a></p>
</li>
<li><p><a href="https://github.com/garbles/yolk" target="_blank" rel="external">yolk</a> Yolk (An RxJS UI Library) in 7 Minutes, <a href="https://egghead.io/lessons/rxjs-yolk-an-rxjs-ui-library-in-7-minutes?utm_content=bufferc279c&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer" target="_blank" rel="external">egghead.io</a></p>
</li>
<li><p><a href="https://github.com/mattpodwysocki/rx-fluxish" target="_blank" rel="external">mattpodwysocki/rx-fluxish</a></p>
</li>
<li><p><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="external">The introduction to Reactive Programming you’ve been missing</a>，这个有 egghead 视频。</p>
</li>
<li><p><a href="https://github.com/trxcllnt/reaxtor" target="_blank" rel="external">Falcor + Rx + virtual-dom</a></p>
</li>
<li><p><a href="http://moumne.com/rx-training-games/#?title=meteorites" target="_blank" rel="external">Rx Training Games</a></p>
</li>
<li><p><a href="http://staltz.com/rx-glitches-arent-actually-a-problem.html" target="_blank" rel="external">RX GLITCHES AREN’T ACTUALLY A PROBLEM</a></p>
</li>
<li><p><a href="https://github.com/ReactiveX/RxJS/issues/752#issuecomment-161234549" target="_blank" rel="external">This comment by Paul Taylor is better than 1000 blog posts. https://github.com/ReactiveX/RxJS/issues/752#issuecomment-161234549 … Explains Observables and how Promises are not Futures.</a></p>
</li>
<li><p><a href="https://medium.com/@ReactiveConf/richard-feldman-the-reactive-approach-is-a-great-fit-for-the-vast-majority-of-web-apps-aac93e245fc9#.kj6uivwql" target="_blank" rel="external">Richard Feldman: The Reactive Approach Is a Great Fit for the Vast Majority of Web Apps</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=QhjALubBQPg&amp;feature=youtu.be" target="_blank" rel="external">.@trxcllnt’s talk at @ReactiveConf on #RxJS 5 goes into more detail on the work done than my talks. Great stuff! https://youtu.be/QhjALubBQPg </a></p>
</li>
</ul>
<h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><ul>
<li><p>一个可视化编辑的 CMS <a href="https://github.com/relax/relax" target="_blank" rel="external">relax/relax</a>，可以 Linking data from a schema in the page builder。（使用了 GraphQL）。</p>
</li>
<li><p><a href="https://github.com/jlongster/backend-with-webpack/blob/master/gulpfile.js#L75" target="_blank" rel="external">gulp 结合 webpack 示例</a></p>
</li>
<li><p>测试相关，I made this react-testing-recipes based on course from @eggheadio and @_ericelliott ‘s brilliant work，<a href="https://github.com/fraserxu/react-testing-recipes" target="_blank" rel="external">链接</a></p>
</li>
<li><p>另一个设计工具 <a href="https://twitter.com/fusetools" target="_blank" rel="external">Fuse</a></p>
</li>
<li><p><a href="https://github.com/ericclemmons/react-resolver" target="_blank" rel="external">ericclemmons/react-resolver</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/34403269/what-is-the-best-way-deal-with-fetch-error-in-react-redux/34403521#34403521" target="_blank" rel="external">I just answered how to handle Async #reactjs #redux errors &amp; display “global user messages” </a></p>
</li>
<li><p><a href="https://medium.com/modern-user-interfaces/a-journey-into-reactive-user-interfaces-101-1daea5702486#.i5vr0ctwf" target="_blank" rel="external">A journey into Reactive User Interfaces 101</a></p>
</li>
<li><p><a href="https://github.com/heroku/react-refetch?utm_content=buffer8dfc2&amp;utm_medium=twitter&amp;utm_source=changelog&amp;utm_campaign=buffer" target="_blank" rel="external">heroku/react-refetch</a> 学习下一些场景。越来越发现，不需要搞复杂的 Flux，特别是生产代码中。</p>
</li>
<li><p><a href="http://www.christianalfoni.com/articles/2015_11_30_Exploring-Elm-part1" target="_blank" rel="external">Exploring Elm - Part 1</a></p>
</li>
<li><p><a href="https://github.com/facebook/react/issues/5465" target="_blank" rel="external">isMounted() will go away. Avoid it in new code. As always, please refrain from knee-jerk reactions in comments ;-) </a></p>
</li>
<li><p><a href="https://auth0.com/blog/2015/11/20/face-off-virtual-dom-vs-incremental-dom-vs-glimmer/" target="_blank" rel="external">React Virtual DOM vs Incremental DOM vs Ember’s Glimmer: Fight</a></p>
</li>
<li><p><a href="https://github.com/heroku/react-refetch" target="_blank" rel="external">A simple, declarative, and composable way to fetch data for React components</a></p>
</li>
<li><p><a href="https://github.com/Gozala/reflex" target="_blank" rel="external">Elm in JS Library</a></p>
</li>
<li><p><a href="http://www.alexkyte.me/2015/08/mutability-and-persistent-data.html?m=1" target="_blank" rel="external">Mutability and Persistent Data Structures: Retroactivity</a> Data structures with time-traveling built in! <a href="http://www.alexkyte.me/2015/08/mutability-and-persistent-data.html?m=1" target="_blank" rel="external">http://www.alexkyte.me/2015/08/mutability-and-persistent-data.html?m=1</a> …<br>@dan_abramov interesting for framework-agnostic time travel<br>11 retweets 37 likes</p>
</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul>
<li><p>一篇关于 Node 企业级开发的<a href="https://medium.com/@nodesource/the-enterprise-node-community-987ab4221ef5#.db5l4k4ax" target="_blank" rel="external">文章</a>，<a href="http://thenewstack.io/tns-analysts-node-js-tooling-enterprise-please/" target="_blank" rel="external">另一篇</a></p>
</li>
<li><p><a href="http://www.alexkras.com/simple-guide-to-finding-a-javascript-memory-leak-in-node-js/" target="_blank" rel="external">Node.js 内存泄露检查</a></p>
</li>
<li><p>创建交互式 Node 命令行<a href="https://www.youtube.com/watch?v=QLat0Y3jqUA" target="_blank" rel="external">工具</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=gHrrgZmoY6E" target="_blank" rel="external">Make Node.js Debuggable</a></p>
</li>
<li><p><a href="http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html" target="_blank" rel="external">Debugging Node.js in Production - </a></p>
</li>
<li><p><a href="https://developer.atlassian.com/blog/2015/11/scripting-with-node/" target="_blank" rel="external">Building Command Line Tools with Node: </a></p>
</li>
</ul>
<h2 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h2><ul>
<li><a href="https://github.com/lodash/lodash/releases/tag/4.0.0" target="_blank" rel="external">lodash 4.0</a></li>
</ul>
<h2 id="u535A_u5BA2"><a href="#u535A_u5BA2" class="headerlink" title="博客"></a>博客</h2><ul>
<li><p>facebook designer Julie Zhuo 的<a href="https://medium.com/the-year-of-the-looking-glass/write-in-2016-938f569b535e#.1oqvdlgwj" target="_blank" rel="external">博客</a></p>
</li>
<li><p><a href="https://medium.com/@puppybits" target="_blank" rel="external">Puppybits</a> Sr Developer on iOS, ClojureScript, ReactJS, full stack and product creation. UX and Econ junkie. Ex-R/GA, Ex-Nike, Ex-Disney, currently at Capital One.</p>
</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><p><a href="http://www.webdirections.org/blog/asynchronous-frontiers-in-javascript-domenic-denicola-code-2015/" target="_blank" rel="external">异步 JavaScript 现状</a></p>
</li>
<li><p><a href="https://medium.com/@housecor/12-rules-for-professional-javascript-in-2015-f158e7d3f0fc#.j42o9wy8w" target="_blank" rel="external">12 Rules for Professional JavaScript in 2015 - </a></p>
</li>
<li><p><a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.5mm1n1mwc" target="_blank" rel="external">Javascript Fatigue</a></p>
</li>
<li><p><a href="https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80#.qi3qkoaxc" target="_blank" rel="external">@addyosmani for anyone wondering about tree-shaking vs. dead-code elimination,</a></p>
</li>
<li><p><a href="http://www.sitepoint.com/how-to-schedule-background-tasks-in-javascript/" target="_blank" rel="external">How to Schedule Background Tasks in JavaScript</a> 新的 API requestIdleCallback</p>
</li>
<li><p><a href="https://github.com/vsavkin/CoolCodeSnippets" target="_blank" rel="external">vsavkin/CoolCodeSnippets</a> This repository shows two ways of implementing the object algebras pattern in TypeScript. The two ways are with and without using classes.</p>
</li>
<li><p><a href="https://medium.com/@mweststrate/how-to-create-strongly-typed-npm-modules-1e1bda23a7f4#.rxgfq2d2t" target="_blank" rel="external">How to create strongly-typed npm packages</a></p>
</li>
<li><p><a href="https://blog.oio.de/2014/01/31/an-introduction-to-typescript-module-system/" target="_blank" rel="external">An introduction to TypeScript’s module system</a></p>
</li>
<li><p><a href="http://blog.getify.com/concurrently-javascript-1/" target="_blank" rel="external">Concurrently JavaScript: 3 Posts on Concurrency in JS - </a></p>
</li>
</ul>
<h2 id="CSS__u548C__u52A8_u6548"><a href="#CSS__u548C__u52A8_u6548" class="headerlink" title="CSS 和 动效"></a>CSS 和 动效</h2><ul>
<li><p><a href="https://github.com/simplaio/rucksack" target="_blank" rel="external">simplaio/rucksack</a>，使用 postcss 做了一些 shorthand 写法。可以先学习下写法。但是我更喜欢写标准。</p>
</li>
<li><p><a href="https://react.rocks/tag/react-motion" target="_blank" rel="external">React Motion demo</a>，<a href="https://react.rocks/example/react-motion_Water_Ripples" target="_blank" rel="external">另一个</a></p>
</li>
<li><p><a href="http://flexbox.help/" target="_blank" rel="external">Test CSS Flexbox Rules Live</a>，<a href="http://flexboxfroggy.com/" target="_blank" rel="external">另一篇</a></p>
</li>
<li><p><a href="http://johnpolacek.github.io/expressive-css/" target="_blank" rel="external">Expressive CSS</a></p>
</li>
<li><p><a href="http://ai.github.io/postcss-isolation/" target="_blank" rel="external">Fix Global CSS with PostCSS</a></p>
</li>
</ul>
<h2 id="u5DE5_u5177_Utils"><a href="#u5DE5_u5177_Utils" class="headerlink" title="工具 Utils"></a>工具 Utils</h2><ul>
<li><p><a href="http://www.sitepoint.com/front-end-tools-favorite-finds-2015/" target="_blank" rel="external">Front-end Tools: Some of My Favorite Finds of 2015</a>，这个挺好玩 <a href="http://arasatasaygin.github.io/is.js/" target="_blank" rel="external">is.js</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=BzmuEhBc3yk&amp;feature=youtu.be" target="_blank" rel="external">Angular 2 Http - Working with RxJS Observables</a></p>
</li>
<li><p><a href="http://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/" target="_blank" rel="external">Bliss: A 3KB Library for Happier Vanilla JS - </a></p>
</li>
<li><p><a href="https://cyclicmaterials.github.io/2015/11/26/release-cycle-hammer-driver-0.1.1.html" target="_blank" rel="external">Detect touch gestures with Cycle.js and Hammer.js</a></p>
</li>
<li><p><a href="https://github.com/kittens/lerna" target="_blank" rel="external">:dragon: A tool for managing JavaScript projects with multiple packages.</a></p>
</li>
<li><p><a href="http://engineroom.teamwork.com/10-things-to-know-about-gulp/" target="_blank" rel="external">10 things to know about Gulp</a></p>
</li>
</ul>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><ul>
<li><a href="https://github.com/acdlite/router#proof-of-concept-react-router-like-api" target="_blank" rel="external">I’ve been experimenting with routing by re-implementing the React Router API using middleware. More to follow soon: </a></li>
</ul>
<h2 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/" target="_blank" rel="external">Don’t lose user and app state, use Page Visibility</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="RxJS"><a href="#RxJS" class="headerlink" title="RxJS"></a>RxJS</h2><ul>
<li><p>egghead.io 上的 RxJS <a href="https://egghead.io/lesson]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hub, Makes Git Better with Github]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Hub-Makes-Git-Better-with-Github/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Hub-Makes-Git-Better-with-Github/</id>
    <published>2016-01-29T01:56:39.000Z</published>
    <updated>2016-01-29T01:58:46.000Z</updated>
    <content type="html"><![CDATA[<p>链接：<a href="https://hub.github.com/" target="_blank" rel="external">hub</a>。</p>
<p>github 的常用功能的命令行客户端。实现了如：</p>
<ul>
<li>查看 issues</li>
<li>打开 wiki</li>
<li>fork</li>
<li>pull-request</li>
<li>使用 github 的 compare view 来 compare</li>
</ul>
<p>等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>链接：<a href="https://hub.github.com/" target="_blank" rel="external">hub</a>。</p>
<p>github 的常用功能的命令行客户端。实现了如：</p>
<ul>
<li>查看 issues</li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 Annual Retro]]></title>
    <link href="http://shane.hsi.rocks/2016/01/28/2015-Annual-Retro/"/>
    <id>http://shane.hsi.rocks/2016/01/28/2015-Annual-Retro/</id>
    <published>2016-01-28T06:39:15.000Z</published>
    <updated>2016-01-28T06:39:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5DE5_u4F5C"><a href="#u5DE5_u4F5C" class="headerlink" title="工作"></a>工作</h2><p>2015 年最大的收获就是 <strong>前端</strong> 技能的提升。事实上，从 2015 年 2 月开始，基本上就专注在此，至此有 1 年全职前端经验。</p>
<p>由于进入了 <strong>前端</strong> 这个领域，今年学习了很多东西，并且由于前端社区相对未到成熟阶段，也思考了很多东西。</p>
<p>先列个书单：</p>
<h2 id="u4E66_u5355"><a href="#u4E66_u5355" class="headerlink" title="书单"></a>书单</h2><h4 id="u6280_u672F/_u65B9_u6CD5_u8BBA"><a href="#u6280_u672F/_u65B9_u6CD5_u8BBA" class="headerlink" title="技术/方法论"></a>技术/方法论</h4><ul>
<li>《Spring 3.x企业应用开发实战》（始于14年，阅读70%）</li>
<li>《Java RESTful Web Service实战》</li>
<li>《JavaScript 语言精粹》（重读）</li>
<li>《Effective JavaScript》</li>
<li>《实现领域驱动设计》（重读）</li>
<li>《WebKit技术内幕》</li>
<li>《思考软件，创新设计：A段架构师的思考技术》（阅读50%）</li>
<li>《JavaScript函数式编程》（阅读60%）</li>
<li>《你不知道的JavaScript（上卷）》</li>
<li>《编写可测试的JavaScript代码》</li>
<li>《响应式Web设计：HTML5和CSS3实战》（阅读30%）</li>
<li>《图解CSS3 核心技术与案例实战》（阅读70%）</li>
<li>《Clojure Reactive Programming》（阅读40%）</li>
<li>《Reactive Programming with Rxjs》</li>
</ul>
<p>2015 年看得最多的就是 JavaScript 相关的书籍。源于两点，一定对 JavaScript 语法的陌生迫使我必须熟悉基础，二是在使用了很多框架（React，Redux 等）之后(自上而下)，再结合基础(自下而上)，互补地学习。</p>
<p>关于前端学习还要重点推荐下 《WebKit技术内幕》，它打破了 HTML/CSS 于我的神秘性。HTML/CSS 都是 DSL，通过 WebKit 的底层技术实现，能更宏观地理解这两种声明式语言。有些玄乎，但是建议前端都来看下，由于可以不求甚解，甚至可以当做小说来读。</p>
<p>另外就是这本《Reactive Programming with RxJS》，是花了 11 美元购入的电子书，纪念一下。因为对 RxJS 太过痴迷，等不及国内上市。响应式是一块，函数式又是另一块。涉足前端最令人欣喜地一点就是，对语言的理论有了一定的研究。</p>
<h4 id="u8BBE_u8BA1"><a href="#u8BBE_u8BA1" class="headerlink" title="设计"></a>设计</h4><ul>
<li>《设计之下:搜狐新闻客户端的用户体验设计》</li>
<li>《西文字体2：经典款字体及其表现方法》（阅读30%）</li>
</ul>
<p>前端除了涉及到逻辑（JavaScript），但是它更原始的领域是结构（HTML），布局（CSS）。再往上一步，其实是设计，CSS 其实解决的是排版（多列布局，栅格布局）和定位（盒模型之间），这些其实是设计。第一本是导论类，至于字体，是因为字体相对结构简单又充满美感（今年恰好去过欧洲，能实地领略书中所讲字体的魅力）。</p>
<h2 id="u751F_u6D3B"><a href="#u751F_u6D3B" class="headerlink" title="生活"></a>生活</h2><h4 id="u7231_u60C5"><a href="#u7231_u60C5" class="headerlink" title="爱情"></a>爱情</h4><p>2015 年最大的收获是遇到了人生的另一半。几句箴言：性格相合，未来可期。这里不会细表。不过的确有些变化，比如更切身地体会到了生活与工作的平衡。这是必修的一课。</p>
<h4 id="u65C5_u884C"><a href="#u65C5_u884C" class="headerlink" title="旅行"></a>旅行</h4><p>2015 年末桂花酿成了酒，便和妹子去苏州品尝。作为去年最后一场旅行，我们在平江路的一间茶楼上，细数了下 2015 年去过的城市。</p>
<ul>
<li>2015 年初的东北之行：哈尔滨，亚布力，呼兰区（哈尔滨市），长白山（延吉市），安图县（延吉市），沈阳。</li>
<li>3 月份趁着早春的苏州之行</li>
<li>4 月份武汉最舒服的日子去拜访妹子的老友</li>
<li>7 月份的香港、深圳</li>
<li>国庆的法意土之旅：巴黎，威尼斯，佛罗伦萨，比萨，罗马，伊斯坦布尔。</li>
<li>以及 12 月岁末的苏州之行，喝了桂花酿，去了新开张的诚品书店。</li>
</ul>
<h4 id="u6587_u5B66_u7C7B_u4E66_u5355"><a href="#u6587_u5B66_u7C7B_u4E66_u5355" class="headerlink" title="文学类书单"></a>文学类书单</h4><ul>
<li>《括号里的日本人》</li>
<li>《单身社会》（阅读20%）</li>
<li>《听客溪的朝圣》（阅读50%）</li>
<li>《意大利之魅》</li>
<li>《伊斯坦布尔：一座城市的记忆》（阅读20%）</li>
<li>《托斯卡纳艳阳下（2014版）》（阅读80%）</li>
<li>《三体》三部曲</li>
<li>《梦的解析(彩色插图珍藏版)》（阅读30%）</li>
<li>《门外汉的京都》（阅读80%）</li>
</ul>
<p>很多书是为了国庆的法意土之行准备。三体是在往返欧洲的13小时航班上阅读完毕。</p>
<h2 id="u5EA7_u53F3_u94ED"><a href="#u5EA7_u53F3_u94ED" class="headerlink" title="座右铭"></a>座右铭</h2><p>近 5 年来我正经思考出过两套座右铭。</p>
<p>『旅行是为了见识更多的世界，认识更多的人！』</p>
<p>当时是实习一年，临近毕业即将正式入职。1 年半后，是：</p>
<p>『应为匠人！』</p>
<p>这本身体现了一种沉淀。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5DE5_u4F5C"><a href="#u5DE5_u4F5C" class="headerlink" title="工作"></a>工作</h2><p>2015 年最大的收获就是 <strong>前端</strong> 技能的提升。事实上，从 2015 年]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Deep Clone in JavaScript]]></title>
    <link href="http://shane.hsi.rocks/2016/01/28/Deep-Clone-in-JavaScript/"/>
    <id>http://shane.hsi.rocks/2016/01/28/Deep-Clone-in-JavaScript/</id>
    <published>2016-01-28T02:02:57.000Z</published>
    <updated>2016-01-28T06:22:53.000Z</updated>
    <content type="html"><![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript" target="_blank" rel="external">How to Deep clone in javascript</a></p>
<p>深入理解后会涉及到 JavaScript 语言的基础知识。</p>
<p>尝试使用 TypeScript 方便 JavaScript 的深克隆。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript" target="_blank" rel="external">How to Deep clone ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Import JavaScript files in TypeScript]]></title>
    <link href="http://shane.hsi.rocks/2016/01/27/Import-JavaScript-files-in-TypeScript/"/>
    <id>http://shane.hsi.rocks/2016/01/27/Import-JavaScript-files-in-TypeScript/</id>
    <published>2016-01-27T09:01:54.000Z</published>
    <updated>2016-01-27T09:01:54.000Z</updated>
    <content type="html"><![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/12689716/typescript-with-knockoutjs/12692174#12692174" target="_blank" rel="external">TypeScript with KnockoutJS</a></p>
<p>TypeScript 具有良好的教学作用。目前初步的想法是，直接 import 现有的 JavaScript 代码，然后对其进行封装。TypeScript 的类型系统，会提供完备的接口定义写法。</p>
<p>这其实是一种组合式的重用方式。对于可用的直接 import 进来，对于不可用的进行重写。</p>
<p>那如何在 TypeScript 文件中 import Javascript 呢？</p>
<p>TypeScript 提供的特性就是写 Definition Files。在写的时候参考 <a href="https://github.com/borisyankov/DefinitelyTyped" target="_blank" rel="external">DefinitelyTyped</a> 的写法，先进行模仿。</p>
<p>文件可以直接写在相应 js 文件的旁边，[name].d.ts。</p>
<p>具体在写的时候，如果有新的问题或思路进行补充。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/12689716/typescript-with-knockoutjs/12692174#12692174" target="_blank" rel="external">Type]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Write a React Tooltip Component]]></title>
    <link href="http://shane.hsi.rocks/2016/01/22/Write-a-React-Tooltip-Component/"/>
    <id>http://shane.hsi.rocks/2016/01/22/Write-a-React-Tooltip-Component/</id>
    <published>2016-01-22T02:25:45.000Z</published>
    <updated>2016-01-27T07:57:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>今天来写下 tooltip 组件。</p>
<p>如果今天有时间，写下 table 组件，同样，以上两个样式都是以最简单为主。</p>
<p>这些写完之后，加上 button，icon，input 这些非常依赖样式的组件，这些等下周专心写 css 时再说。周末做些组件的类型层级分析归类重构。</p>
<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><ul>
<li>Form 的 label 后面可能会带个 ？的图标，鼠标悬浮或者点击会有 popup 浮层。</li>
<li>Form 校验的时候，发生错误（或者极少数情况人性化的警告下）会在 input（类似的有 select，calendar ）的框靠右内部显示一个 ！的红色 icon，然后默认会自动弹出 popup 浮层，显示错误的提示信息。</li>
<li>比如上传按钮，可以在右侧也有一个 popup 浮层。显示上传成功。类似有 提交 按钮。</li>
</ul>
<p>所以，这个 trigger 相应的事件是</p>
<ul>
<li>click</li>
<li>focus</li>
<li>hover</li>
<li>还有就是自动触发显示。</li>
</ul>
<blockquote>
<p>再强调下，当前不要把时间花在抽出公共组件上，先把功能实现。</p>
</blockquote>
<h2 id="u5B9E_u73B0_u65B9_u5F0F"><a href="#u5B9E_u73B0_u65B9_u5F0F" class="headerlink" title="实现方式"></a>实现方式</h2><p>代码因为和 Select 的场景类似（都是 trigger 一下，显示其他的组件）。</p>
<p>关键是定位问题。</p>
<p>我发现有两种定位方式，有用 <code>position:fixed</code> 的，很明显的问题是，滚动时就会相对 viewport 固定。也有相对 body 绝对定位的，这个基本没有问题。但是 tooltip 是在单独的地方维护的，当然写的时候可以一块，也就是并不真正render在被声明的地方。后面的方式是合理的。不过总感觉有些变扭。</p>
<p>找下其他方案吧。</p>
<p>参考<a href="http://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" target="_blank" rel="external">这篇资料</a>先学习下 <code>offsetWidth</code>，<code>clientWidth</code>，<code>scrollWidth</code> 这些概念。</p>
<p>另外翻到一篇文章，由于 <a href="http://web.jobbole.com/83409/" target="_blank" rel="external">层叠上下文 Stacking Context</a>（<a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="external">另一篇</a>），Modal 这种东西应该直接 append 到 body。就和上面第二种方式类似。概念看 spec 会看很久，从浏览器绘制顺序来看，就是浏览器先绘制父元素，在绘制 z-index 为复数，然后是 <code>position:static</code> ，然后是正数（从小到大）。</p>
<p>还有一个接口 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="external">getBoundingClientRect</a>，返回元素的大小及其相对于视口的位置。</p>
<h2 id="To_be_continued"><a href="#To_be_continued" class="headerlink" title="To be continued"></a>To be continued</h2><p>目前在 Tooltip 的研究上出现停滞，主要是在写的过程中发现了之间漏掉的设计点，这块是看到了这个文章 <a href="https://leozdgao.me/reactzhong-de-portalzu-jian/" target="_blank" rel="external">React中的Portal组件</a>之后对 Portal 这个抽象概念，期望有更多的理解。当然也是为了解决层叠上下文。只是，Portal 作为公共组件，沉淀的设计会更多，更值得学习。</p>
<p>另外，目前暂时参考了 react-components，自定义了样式，和再做了一层业务自定义的封装，以保证项目进度。同时，对属性做了接口限制（TypeScript 的优势）。希望对抽象做分层，循序渐进，不断迭代优化。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>今天来写下 tooltip 组件。</p>
<p>如果今天有时间，写下 table 组件，同样，以上两个]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Regexp Contains Sub String]]></title>
    <link href="http://shane.hsi.rocks/2016/01/21/JavaScript-Regexp-Contains-Sub-String/"/>
    <id>http://shane.hsi.rocks/2016/01/21/JavaScript-Regexp-Contains-Sub-String/</id>
    <published>2016-01-21T08:07:36.000Z</published>
    <updated>2016-01-21T08:11:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><p>一般是在 typeahead 时使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="xml"><span class="tag">&lt;<span class="title">substring</span>&gt;</span>, 'i').test(<span class="tag">&lt;<span class="title">string</span>&gt;</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>其中 <code>&#39;i&#39;</code> 代表忽略大小写。</p>
<p>也可以使用 <code>indexOf</code>，<code>&lt;string&gt;.indexOf(&lt;substring&gt;) !== -1</code>。可以看出不能方便的通过类似 <code>&#39;i&#39;</code> 设置忽略大小写。</p>
<p>至于性能，根据浏览器实现不同性能有所差异。参考：<a href="http://stackoverflow.com/questions/5296268/fastest-way-to-check-a-string-contain-another-substring-in-javascript" target="_blank" rel="external">Fastest way to check a string contain another substring in Javascript?</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><p>一般是在 typeahead 时使用。</p>
<figure class="highlight js"]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Write a React Select Component]]></title>
    <link href="http://shane.hsi.rocks/2016/01/21/Write-a-React-Select-Component/"/>
    <id>http://shane.hsi.rocks/2016/01/21/Write-a-React-Select-Component/</id>
    <published>2016-01-21T02:07:45.000Z</published>
    <updated>2016-01-27T07:53:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天写下 Select 组件。</p>
<p>通过写 React Upload 组件，发现其实理解了上传的本质之后，后面只是用 React 的方式包装。所以，组件需要自已研发，这样才能加深理解，做到心中无框架，回归编程的通用。</p>
<p>另外，在写 TypeScript 之后，类型的 mental modal 引入之后，前端开始变得有条理性。我相信设计是一项很重要的步骤，基于缜密的思维甚至依托严密的理论设计出来的事物才能响应变化。</p>
<p>所以，Select 组件也决定自己写。</p>
<h2 id="u76EE_u7684"><a href="#u76EE_u7684" class="headerlink" title="目的"></a>目的</h2><p>最终的形态分为几类：</p>
<ul>
<li>基本</li>
<li>不可改，独立筛选框</li>
<li>邮箱提示类</li>
<li>Typeahead</li>
<li>选项组</li>
</ul>
<p>暂时不做多选。</p>
<h1 id="u6B65_u9AA4"><a href="#u6B65_u9AA4" class="headerlink" title="步骤"></a>步骤</h1><p>我先实现下『不可改，独立筛选框』，『基本』类似。</p>
<h2 id="u7ED3_u6784"><a href="#u7ED3_u6784" class="headerlink" title="结构"></a>结构</h2><p>第一步还是先写结构， HTML。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">container</span>")&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("select")&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span>&gt;</span>Select the country ...<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">drop</span>")&#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">search</span>")&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">autoComplete</span>=<span class="value">"off"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">option-list</span>")&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">option</span>")&#125;&gt;</span>China<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">option</span>")&#125;&gt;</span>China Taiwan<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果不写 css，会发现除了没有边框外，已经达到了最终的效果（展开状态）。</p>
<h2 id="u6837_u5F0F"><a href="#u6837_u5F0F" class="headerlink" title="样式"></a>样式</h2><p>简单写点样式。只要稍微设置下 border，padding 和 color，backgroud-color，其他暂时不设置。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">15rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.select</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.4rem</span> <span class="number">0.8rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#686868</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.select</span> &gt; <span class="tag">span</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#686868</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.drop</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#686868</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> -<span class="number">1px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.1rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.search</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.2rem</span> .<span class="number">4rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.search</span> &gt; <span class="tag">input</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.5rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.option-list</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.4rem</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.option</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.4rem</span> <span class="number">0.5rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.option</span><span class="pseudo">:hover</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#0b97c4</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>写样式的时候，需要从设计的角度来想。比如这个组件的 display 一定是 <code>inline</code> 或者 <code>inline-block</code>。至于里面的结构的样式，其实已经不影响外面了。另外，<code>drop</code> 肯定是 <code>position: absolute</code>。</p>
<h2 id="u4E8B_u4EF6"><a href="#u4E8B_u4EF6" class="headerlink" title="事件"></a>事件</h2><p>直接上代码吧。</p>
<p>Select.tsx</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Option &#125; <span class="keyword">from</span> <span class="string">'./Option'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 drop 是否显示</span></span><br><span class="line"><span class="keyword">const</span> hidden = &#123;</span><br><span class="line">  <span class="string">"display"</span>: <span class="string">"none"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> show = &#123;</span><br><span class="line">  <span class="string">"display"</span>: <span class="string">"block"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  private clickOutsideHandler: any;</span><br><span class="line"></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 常用的 state</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      selected: &#123;</span><br><span class="line">        display: <span class="string">"Select the country ..."</span>,</span><br><span class="line">        value: <span class="literal">undefined</span></span><br><span class="line">      &#125;,</span><br><span class="line">      open: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.onClickSelect = <span class="keyword">this</span>.onClickSelect.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onClickOption = <span class="keyword">this</span>.onClickOption.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onClickDocument = <span class="keyword">this</span>.onClickDocument.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onChangeFilter = <span class="keyword">this</span>.onChangeFilter.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件在 Update 的时候做些事情，这可能是这个组件（复杂的组件）的特殊之处，</span></span><br><span class="line">  <span class="comment">// 1. focus 到 filter 框</span></span><br><span class="line">  <span class="comment">// 2. 注册 clickOutsideHandler，并注意在 open=false 时回收</span></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.open) &#123;</span><br><span class="line">      <span class="keyword">const</span> filterNode: any = findDOMNode(<span class="keyword">this</span>.refs[<span class="string">"filter"</span>]);</span><br><span class="line">      filterNode.focus();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.clickOutsideHandler) &#123;</span><br><span class="line">        <span class="keyword">this</span>.clickOutsideHandler = addReactDomEventListener(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, <span class="keyword">this</span>.onClickDocument);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clickOutsideHandler) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clickOutsideHandler.remove();</span><br><span class="line">      <span class="keyword">this</span>.clickOutsideHandler = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onClickSelect() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      open: !<span class="keyword">this</span>.state.open</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onClickOption(&#123; value, display &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      selected: &#123;</span><br><span class="line">        display: display,</span><br><span class="line">        value: value</span><br><span class="line">      &#125;,</span><br><span class="line">      filter: <span class="literal">undefined</span>,</span><br><span class="line">      open: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭 drop</span></span><br><span class="line">  private onClickDocument(event: Event) &#123;</span><br><span class="line">    <span class="keyword">const</span> target: EventTarget = event.target;</span><br><span class="line">    <span class="keyword">const</span> root = findDOMNode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">const</span> dropNode = findDOMNode(<span class="keyword">this</span>.refs[<span class="string">"drop"</span>]);</span><br><span class="line">    <span class="comment">// 如果不包含</span></span><br><span class="line">    <span class="keyword">if</span> (!containsNode(root, target) &amp;&amp; !containsNode(dropNode, target)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;open: <span class="literal">false</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onChangeFilter(event) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = event.target.value;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      filter: value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> optionListV;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选功能</span></span><br><span class="line">    <span class="keyword">const</span> filteredOptionList = _.filter(_.values(<span class="keyword">this</span>.props.options), (o: any) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (_.isEmpty(<span class="keyword">this</span>.state.filter)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.state.filter, <span class="string">'i'</span>).test(o.desc);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_.isEmpty(filteredOptionList)) &#123;</span><br><span class="line">        <span class="comment">// Option 设置了一个 disabled 的状态</span></span><br><span class="line">      optionListV = <span class="xml"><span class="tag">&lt;<span class="title">Option</span> <span class="attribute">disabled</span></span><br><span class="line">                            <span class="attribute">display</span>=<span class="value">'无匹配项'</span>/&gt;</span>;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      optionListV = _.map(filteredOptionList, (item: any) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="title">Option</span> <span class="attribute">key</span>=<span class="value">&#123;item.value&#125;</span></span><br><span class="line">                        <span class="attribute">value</span>=<span class="value">&#123;item.value&#125;</span></span><br><span class="line">                        <span class="attribute">display</span>=<span class="value">&#123;item.display&#125;</span></span><br><span class="line">                        <span class="attribute">desc</span>=<span class="value">&#123;item.desc&#125;</span></span><br><span class="line">                        <span class="attribute">onClick</span>=<span class="value">&#123;this.onClickOption&#125;</span>/&gt;</span>)</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("container")&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("select")&#125;</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onClickSelect&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">span</span>&gt;</span>&#123;this.state.selected.display&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ref</span>=<span class="value">"drop"</span> <span class="attribute">className</span>=<span class="value">&#123;cx("drop")&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;this.state.open?</span> <span class="attribute">show</span> <span class="attribute">:</span> <span class="attribute">hidden</span>&#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("search")&#125;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"filter"</span></span><br><span class="line">                   <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">autoComplete</span>=<span class="value">"off"</span></span><br><span class="line">                   <span class="attribute">value</span>=<span class="value">&#123;this.state.filter&#125;</span></span><br><span class="line">                   <span class="attribute">onChange</span>=<span class="value">&#123;this.onChangeFilter&#125;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("option-list")&#125;</span>&gt;</span></span><br><span class="line">            &#123;optionListV&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Option.tsx</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path="../../../typings/ttsd.d.ts" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; findDOMNode &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">const</span> styles = <span class="built_in">require</span>(<span class="string">"./Option.css"</span>);</span><br><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">"classnames/bind"</span>;</span><br><span class="line"><span class="keyword">const</span> cx = classNames.bind(styles);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Option</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.onClick = <span class="keyword">this</span>.onClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onClick(&#123;</span><br><span class="line">      value: <span class="keyword">this</span>.props.value,</span><br><span class="line">      display: <span class="keyword">this</span>.props.display</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.disabled) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("disable")&#125;</span>&gt;</span>&#123;this.props.display&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      )</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("option")&#125;</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onClick&#125;</span>&gt;</span>&#123;this.props.display&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="u601D_u8003"><a href="#u601D_u8003" class="headerlink" title="思考"></a>思考</h1><p>在写的过程中，发现很多 Select 其实可以更细化的拆分，比如 Option 可以泛化成 menu。这是其二。</p>
<p>另外写组件的过程其实包含了很多事情，包括：</p>
<ul>
<li>结构</li>
<li>样式</li>
<li>事件</li>
<li>值的处理</li>
<li>甚至包括从总体来看组件的设计</li>
</ul>
<p>Select 的确有不同的形态，我发现很多组件尝试用 if-else，在同一个 <code>&lt;Select&gt;</code> 里做到统一。我认为这样是不好的。感性的原因是这是一种很弱的抽象，圈复杂度非常高，不利于代码维护。还有一个原因，也是我这两天自己研发组件得到的经验：开始不要想很多，一个场景对应一套实现；之后再考虑提取公用代码。</p>
<p>这才是 <strong>设计之道</strong>。</p>
<p>所以，暂时不考虑细节的部分，我认为 Select 组件已经开发完成了。代码都在那儿，如何重构是之后的事情。这种时候似乎应该 test-driven。考虑到 test-driven DSL 的恶心程度，在不是复合场景下（复合比如：样式+事件+数据流）不如手动测试。</p>
<p>明天开发 trigger，popup 和 table。</p>
<p>即使这些开发完毕了，也不要急着重构，而是上生产环境。慢慢抽出公用组件。刚开始都是丑陋的代码，慢慢变得合理高效。一下次输入很多知识点会非常低效。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天写下 Select 组件。</p>
<p>通]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Tips]]></title>
    <link href="http://shane.hsi.rocks/2016/01/20/Git-Tips/"/>
    <id>http://shane.hsi.rocks/2016/01/20/Git-Tips/</id>
    <published>2016-01-20T05:49:17.000Z</published>
    <updated>2016-01-27T10:06:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="git_submodule"><a href="#git_submodule" class="headerlink" title="git submodule"></a>git submodule</h2><p><a href="https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.4.txt#L38-L40" target="_blank" rel="external">git1.8.4</a> (July 2013) 之后不需要回到 . 目录。</p>
<p>直接到 submodule 期望所在的目录：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">cd</span> ./src/vendor/</span><br><span class="line"><span class="label">git</span> <span class="keyword">submodule </span><span class="keyword">add </span>&lt;git<span class="comment">@github ...&gt; &lt;project-name&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考链接 <a href="http://stackoverflow.com/questions/9035895/how-do-i-add-a-submodule-to-a-sub-directory" target="_blank" rel="external">How do I add a submodule to a sub-directory?</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="git_submodule"><a href="#git_submodule" class="headerlink" title="git submodule"></a>git submodule</h2><p><a href="https://github.co]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Write a React Upload Component]]></title>
    <link href="http://shane.hsi.rocks/2016/01/19/Write-a-React-Upload-Component/"/>
    <id>http://shane.hsi.rocks/2016/01/19/Write-a-React-Upload-Component/</id>
    <published>2016-01-19T07:15:34.000Z</published>
    <updated>2016-01-27T07:53:23.000Z</updated>
    <content type="html"><![CDATA[<p>这是一遍学习文档，目的：</p>
<ul>
<li>了解 upload 相关技术细节。</li>
<li>了解 IE8/9 的兼容性如何解决，即所谓的渐进增强，优雅降级。</li>
</ul>
<p>参考文档：</p>
<ol>
<li><a href="https://github.com/SoAanyip/React-FileUpload" target="_blank" rel="external">SoAanyip/React-FileUpload</a></li>
<li><a href="https://github.com/react-component/upload" target="_blank" rel="external">react-component/upload</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/08/file_upload.html" target="_blank" rel="external">文件上传的渐进式增强</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="external">XMLHttpRequest Level 2 使用指南</a></li>
<li><a href="http://www.html5rocks.com/zh/tutorials/file/xhr2/" target="_blank" rel="external">XMLHttpRequest2 新技巧</a></li>
<li><a href="http://www.cnblogs.com/wangmeijian/p/3978407.html" target="_blank" rel="external">利用iframe无刷新上传文件的坑</a></li>
<li><a href="http://fex.baidu.com/webuploader/" target="_blank" rel="external">Web Uploader</a> 这块只是说明，上传也需要一个集成式的方案</li>
</ol>
<h1 id="u4E0A_u4F20_u6587_u4EF6"><a href="#u4E0A_u4F20_u6587_u4EF6" class="headerlink" title="上传文件"></a>上传文件</h1><h2 id="1-__u4F20_u7EDF_u5F62_u5F0F"><a href="#1-__u4F20_u7EDF_u5F62_u5F0F" class="headerlink" title="1. 传统形式"></a>1. 传统形式</h2><p>使用 Form，用户先选择文件，然后点击”Upload”按钮，文件开始上传。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"upload-form"</span> <span class="attribute">action</span>=<span class="value">"upload.php"</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span> &gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">id</span>=<span class="value">"upload"</span> <span class="attribute">name</span>=<span class="value">"upload"</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Upload"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-_iframe_u4E0A_u4F20"><a href="#2-_iframe_u4E0A_u4F20" class="headerlink" title="2. iframe上传"></a>2. iframe上传</h2><p>Form 上传是同步的，用户需等待上传结束。而且上传成功后，会跳转到 action 所指的页面。</p>
<p>如果要实现异步上传，在 HTML5 之前，需要使用 iframe。当用户点击提交时，动态插入 iframe 元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = $(<span class="string">"#upload-form"</span>);</span><br><span class="line">　form.on(<span class="string">'submit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　<span class="comment">// 此处动态插入iframe元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>插入 iframe 的代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机生成数作为 id</span></span><br><span class="line"><span class="keyword">var</span> seed = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> id = <span class="string">"uploader-frame-"</span> + seed;</span><br><span class="line"><span class="keyword">var</span> callback = <span class="string">"uploader-cb-"</span> + seed;　　</span><br><span class="line"> <span class="comment">// iframe 的 html 代码</span></span><br><span class="line"><span class="keyword">var</span> iframe = $(<span class="string">'&lt;iframe id="'</span> + id + <span class="string">'" name="'</span> + id + <span class="string">'" style="display:none;"&gt;'</span>); </span><br><span class="line"><span class="keyword">var</span> url = form.attr(<span class="string">'action'</span>);</span><br><span class="line">form.attr(<span class="string">'target'</span>, id).append(iframe).attr(<span class="string">'action'</span>, url + <span class="string">'?iframe='</span> + callback);</span><br></pre></td></tr></table></figure>
<p>最后一行，</p>
<ol>
<li>向 Form 添加 target 属性，指向动态插入的 iframe。使得上传结束后，服务器将结果返回 iframe 窗口。当前页面就不会跳转了。</li>
<li>其次在 action 属性指定的上传网址后面添加了一个参数，使得服务器知道回调函数的名称。这样能将服务器返回的信息，从 iframe 返回到上层页面。</li>
</ol>
<p>服务器返回的信息，格式如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">window</span>.top.window[<span class="string">'callback'</span>](data);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以，在当前页面定义回调：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;　　　　</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'received callback:'</span>, data);　　　　</span><br><span class="line">    iframe.remove(); <span class="comment">//removing iframe</span></span><br><span class="line">    　　　　</span><br><span class="line">    form.removeAttr(<span class="string">'target'</span>);　　　　</span><br><span class="line">    form.attr(<span class="string">'action'</span>, url);　　　　</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="literal">undefined</span>; <span class="comment">//removing callback</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-_ajax__u4E0A_u4F20"><a href="#3-_ajax__u4E0A_u4F20" class="headerlink" title="3. ajax 上传"></a>3. ajax 上传</h2><p>HTML5 提出了 XMLHttpRequest Level 2，使得 ajax 可以上传文件，为异步上传。</p>
<p>上传代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">form.on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;　</span><br><span class="line">    <span class="comment">// 此处进行ajax上传</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里主要使用 FormData 对象，它能够构建类似表单的键值对。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.FormData) &#123;　</span><br><span class="line">　　<span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">　　<span class="comment">// 建立一个upload表单项，值为上传的文件</span></span><br><span class="line">　　formData.append(<span class="string">'upload'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'upload'</span>).files[<span class="number">0</span>]);</span><br><span class="line">　　<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">　　xhr.open(<span class="string">'POST'</span>, $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>));</span><br><span class="line">　　<span class="comment">// 定义上传完成后的回调函数</span></span><br><span class="line">　　xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　<span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">　　　　　　<span class="built_in">console</span>.log(<span class="string">'上传成功'</span>);</span><br><span class="line">　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　<span class="built_in">console</span>.log(<span class="string">'出错了'</span>);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　xhr.send(formData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-__u8FDB_u5EA6_u6761"><a href="#4-__u8FDB_u5EA6_u6761" class="headerlink" title="4. 进度条"></a>4. 进度条</h2><p>XMLHttpRequest Level2 定义了一个 progress 事件，获取上传进度。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">progress</span> <span class="attribute">id</span>=<span class="value">"uploadprogress"</span> <span class="attribute">min</span>=<span class="value">"0"</span> <span class="attribute">max</span>=<span class="value">"100"</span> <span class="attribute">value</span>=<span class="value">"0"</span>&gt;</span>0<span class="tag">&lt;/<span class="title">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">　　　　<span class="keyword">var</span> complete = (event.loaded / event.total * <span class="number">100</span> | <span class="number">0</span>);</span><br><span class="line">　　　　<span class="keyword">var</span> progress = <span class="built_in">document</span>.getElementById(<span class="string">'uploadprogress'</span>);</span><br><span class="line">　　　　progress.value = progress.innerHTML = complete;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意，progress事件不是定义在xhr，而是定义在xhr.upload，因为这里需要区分下载和上传，下载也有一个progress事件</p>
<p>关于图片预览暂时不了解。</p>
<p>关于拖放上传暂时不了解。</p>
<h1 id="XMLHttpRequest_Level_2"><a href="#XMLHttpRequest_Level_2" class="headerlink" title="XMLHttpRequest Level 2"></a>XMLHttpRequest Level 2</h1><h2 id="u8001_u7248_u672C_XMLHttpRequest"><a href="#u8001_u7248_u672C_XMLHttpRequest" class="headerlink" title="老版本 XMLHttpRequest"></a>老版本 XMLHttpRequest</h2><p>我们看下老版的示例代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'example.php'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<p>然后监控 XMLHttpRequest 对象的状态变化：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">if</span> ( xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span> ) &#123;</span><br><span class="line">　　　　alert( xhr.responseText );</span><br><span class="line">　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　alert( xhr.statusText );</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>xhr.readyState：XMLHttpRequest对象的状态，等于4表示数据已经接收完毕。</li>
<li>xhr.status：服务器返回的状态码，等于200表示一切正常。</li>
<li>xhr.responseText：服务器返回的文本数据</li>
<li>xhr.responseXML：服务器返回的XML格式的数据</li>
<li>xhr.statusText：服务器返回的状态文本。</li>
</ul>
<p>老版本的缺点：</p>
<ul>
<li>只支持文本数据的传送，无法用来读取和上传二进制文件。</li>
<li>传送和接收数据时，没有进度信息，只能提示有没有完成。</li>
<li>受到”同域限制”（Same Origin Policy），只能向同一域名的服务器请求数据。</li>
</ul>
<h2 id="XMLHttpRequest_Level_2-1"><a href="#XMLHttpRequest_Level_2-1" class="headerlink" title="XMLHttpRequest Level 2"></a>XMLHttpRequest Level 2</h2><ul>
<li>可以设置HTTP请求的时限。</li>
<li>可以使用FormData对象管理表单数据。</li>
<li>可以上传文件。</li>
<li>可以请求不同域名下的数据（跨域请求）。</li>
<li>可以获取服务器端的二进制数据。</li>
<li>可以获得数据传输的进度信息。</li>
</ul>
<p>下面直接用示例代码，实际使用时注意下浏览器兼容性。</p>
<h3 id="HTTP_u8BF7_u6C42_u7684_u65F6_u9650"><a href="#HTTP_u8BF7_u6C42_u7684_u65F6_u9650" class="headerlink" title="HTTP请求的时限"></a>HTTP请求的时限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.timeout = <span class="number">3000</span>;</span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">　alert(<span class="string">'请求超时！'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="FormData_u5BF9_u8C61"><a href="#FormData_u5BF9_u8C61" class="headerlink" title="FormData对象"></a>FormData对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="comment">// 添加表单项</span></span><br><span class="line">formData.append(<span class="string">'username'</span>, <span class="string">'张三'</span>);</span><br><span class="line">formData.append(<span class="string">'id'</span>, <span class="number">123456</span>);</span><br><span class="line"><span class="comment">// 直接传送 FormData 对象，和提交网页表单效果一样</span></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure>
<p>也可以直接获取网页表单的值：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'myform'</span>);</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">formData.append(<span class="string">'secret'</span>, <span class="string">'123456'</span>); <span class="comment">// 添加一个表单项</span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, form.action);</span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure>
<h3 id="u4E0A_u4F20_u6587_u4EF6-1"><a href="#u4E0A_u4F20_u6587_u4EF6-1" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; files.length;i++) &#123;</span><br><span class="line">　　formData.append(<span class="string">'files[]'</span>, files[i]);</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure>
<h3 id="u8DE8_u57DF_u8D44_u6E90_u5171_u4EAB_uFF08CORS_uFF09"><a href="#u8DE8_u57DF_u8D44_u6E90_u5171_u4EAB_uFF08CORS_uFF09" class="headerlink" title="跨域资源共享（CORS）"></a>跨域资源共享（CORS）</h3><p>前提是，浏览器必须支持这个功能，而且服务器端必须同意这种”跨域”。</p>
<p>其余写法一样。</p>
<h3 id="u63A5_u6536_u4E8C_u8FDB_u5236_u6570_u636E"><a href="#u63A5_u6536_u4E8C_u8FDB_u5236_u6570_u636E" class="headerlink" title="接收二进制数据"></a>接收二进制数据</h3><p>两种方式</p>
<h4 id="u8001_u65B9_u6CD5_uFF1A_u6539_u5199MIMEType"><a href="#u8001_u65B9_u6CD5_uFF1A_u6539_u5199MIMEType" class="headerlink" title="老方法：改写MIMEType"></a>老方法：改写MIMEType</h4><p>即将二进制当做纯文本，再在浏览器端将字节还原成二进制数据。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.overrideMimeType(<span class="string">"text/plain; charset=x-user-defined"</span>);</span><br><span class="line"><span class="keyword">var</span> binStr = xhr.responseText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = binStr.length; i &lt; len; ++i) &#123;</span><br><span class="line">　　<span class="keyword">var</span> c = binStr.charCodeAt(i);</span><br><span class="line">　　<span class="keyword">var</span> byte = c &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后一行的位运算”c &amp; 0xff”，表示在每个字符的两个字节之中，只保留后一个字节，将前一个字节扔掉。原因是浏览器解读字符的时候，会把字符自动解读成Unicode的0xF700-0xF7ff区段。</p>
</blockquote>
<h4 id="responseType_u5C5E_u6027"><a href="#responseType_u5C5E_u6027" class="headerlink" title="responseType属性"></a>responseType属性</h4><p>使用新增的 responseType 属性。使用到的时候再具体了解。</p>
<p>进度信息上面已经写过，暂时不了解详细用法。</p>
<h1 id="React__u5B9E_u6218"><a href="#React__u5B9E_u6218" class="headerlink" title="React 实战"></a>React 实战</h1><p>学习的目的是由浅入深，知其所以然，从最简单的开始。</p>
<h2 id="XHR2_2C_FormData"><a href="#XHR2_2C_FormData" class="headerlink" title="XHR2, FormData"></a>XHR2, FormData</h2><p>先写一个简单的表单。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Props &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; findDOMNode &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxUpload</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>&lt;<span class="title">any</span>&gt;, </span>&#123;&#125;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.sendForm = <span class="keyword">this</span>.sendForm.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private sendForm() &#123;</span><br><span class="line">    <span class="keyword">const</span> node = findDOMNode(<span class="keyword">this</span>.refs[<span class="string">'file'</span>]);</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">'file'</span>, node.files[<span class="number">0</span>]);;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>, <span class="string">'url'</span>);</span><br><span class="line">    xhr.send(formData);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"file"</span> <span class="attribute">type</span>=<span class="value">"file"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span></span><br><span class="line">               <span class="attribute">onClick</span>=<span class="value">&#123;this.sendForm&#125;</span></span><br><span class="line">               <span class="attribute">value</span>=<span class="value">"Upload"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="iframe__u65E0_u5237_u65B0"><a href="#iframe__u65E0_u5237_u65B0" class="headerlink" title="iframe 无刷新"></a>iframe 无刷新</h2><h3 id="u7B2C_u4E00_u4E2A_u793A_u4F8B"><a href="#u7B2C_u4E00_u4E2A_u793A_u4F8B" class="headerlink" title="第一个示例"></a>第一个示例</h3><p>由于对 iFrame 不甚了解。所以，先花点篇幅了解下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"datafile"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"upload"</span> </span><br><span class="line">        <span class="attribute">onClick</span>=<span class="value">"fileUpload(this.form,'index.php','upload'); return false;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"upload"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileUpload</span>(<span class="params">form, action_url, div_id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create the iframe...</span></span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"id"</span>, <span class="string">"upload_iframe"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"name"</span>, <span class="string">"upload_iframe"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"width"</span>, <span class="string">"0"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"height"</span>, <span class="string">"0"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"border"</span>, <span class="string">"0"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"style"</span>, <span class="string">"width: 0; height: 0; border: none;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add to document...</span></span><br><span class="line">    form.parentNode.appendChild(iframe);</span><br><span class="line">    <span class="built_in">window</span>.frames[<span class="string">'upload_iframe'</span>].name = <span class="string">"upload_iframe"</span>;</span><br><span class="line"></span><br><span class="line">    iframeId = <span class="built_in">document</span>.getElementById(<span class="string">"upload_iframe"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add event...</span></span><br><span class="line">    <span class="keyword">var</span> eventHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (iframeId.detachEvent) iframeId.detachEvent(<span class="string">"onload"</span>, eventHandler);</span><br><span class="line">        <span class="keyword">else</span> iframeId.removeEventListener(<span class="string">"load"</span>, eventHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Message from server...</span></span><br><span class="line">        <span class="keyword">if</span> (iframeId.contentDocument) &#123;</span><br><span class="line">            content = iframeId.contentDocument.body.innerHTML;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframeId.contentWindow) &#123;</span><br><span class="line">            content = iframeId.contentWindow.document.body.innerHTML;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframeId.document) &#123;</span><br><span class="line">            content = iframeId.document.body.innerHTML;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(div_id).innerHTML = content;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Del the iframe...</span></span><br><span class="line">        setTimeout(<span class="string">'iframeId.parentNode.removeChild(iframeId)'</span>, <span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iframeId.addEventListener) iframeId.addEventListener(<span class="string">"load"</span>, eventHandler, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (iframeId.attachEvent) iframeId.attachEvent(<span class="string">"onload"</span>, eventHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set properties of form...</span></span><br><span class="line">    form.setAttribute(<span class="string">"target"</span>, <span class="string">"upload_iframe"</span>);</span><br><span class="line">    form.setAttribute(<span class="string">"action"</span>, action_url);</span><br><span class="line">    form.setAttribute(<span class="string">"method"</span>, <span class="string">"post"</span>);</span><br><span class="line">    form.setAttribute(<span class="string">"enctype"</span>, <span class="string">"multipart/form-data"</span>);</span><br><span class="line">    form.setAttribute(<span class="string">"encoding"</span>, <span class="string">"multipart/form-data"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Submit the form...</span></span><br><span class="line">    form.submit();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(div_id).innerHTML = <span class="string">"Uploading..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上做的步骤是：</p>
<ol>
<li>创建 iframe，并且设置 id 和 style（即不可见）</li>
<li>append 到 document</li>
<li>创建 event handler，主要是两块逻辑，一是 remove event listener，而是获取服务器返回的数据，并写到上层的 document</li>
<li>然后用两种方式，<code>addEventListener(&#39;load&#39;)</code>，<code>attachEvent(&#39;onload&#39;)</code></li>
<li>设置 form 属性，特别是设置 <code>target</code> 为创建的 iframe</li>
<li>提交表单</li>
</ol>
<h3 id="u7B2C_u4E8C_u4E2A_u793A_u4F8B"><a href="#u7B2C_u4E8C_u4E2A_u793A_u4F8B" class="headerlink" title="第二个示例"></a>第二个示例</h3><p>上面的例子还是太复杂了，需要动态创建 iframe。下面这个例子是最最简单的例子。没有任何 JavaScript。但是，既然是从基础开始，还是要了解下基础的几个 attribute 的作用。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">name</span>=<span class="value">"fileUpload"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">action</span>=<span class="value">"xxxx"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span> <span class="attribute">name</span>=<span class="value">"fileForm"</span> <span class="attribute">target</span>=<span class="value">"fileUpload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">class</span>=<span class="value">"fileInput"</span> <span class="attribute">name</span>=<span class="value">"fileInput"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样是：</p>
<ol>
<li><code>enctype=&quot;multipart/form-data&quot;</code> 通过文件流传递给后端，具体含义，参考 <a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="external">四种常见的POST 提交数据方式</a></li>
<li><code>target=&quot;fileUpload&quot;</code>，Form 表单的 target 属性设置为 frame，即将远程服务器返回的内容显示到 iframe 上，其他还有 <code>_blank</code> 新页面。</li>
<li>name 用在表单提交时，这里 input 的 name，fileInput，就是传递给后台的 Form 键值对的 key，或者，就是 FormData <code>formData.append(&#39;file&#39;, node.files[0]);</code>。再比如多个 radio 有多个 id，但是 name 是一样的，所以表单提交时，只会传一个值。再比如 select 也是类似的行为。</li>
</ol>
<h3 id="u7B2C_u4E09_u4E2A_u793A_u4F8B_-__u52A8_u6001_u521B_u5EFA_iframe"><a href="#u7B2C_u4E09_u4E2A_u793A_u4F8B_-__u52A8_u6001_u521B_u5EFA_iframe" class="headerlink" title="第三个示例 - 动态创建 iframe"></a>第三个示例 - 动态创建 iframe</h3><p>例子来源于：<a href="http://www.cnblogs.com/wangmeijian/p/3978407.html" target="_blank" rel="external">利用iframe无刷新上传文件的坑</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*2014年9月18日17:39:47 By 王美建*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxUpload</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">        参数说明:</span><br><span class="line">        opt.frameName : iframe的name值;</span><br><span class="line">        opt.url : 文件要提交到的地址;</span><br><span class="line">        opt.fileName : file控件的name;</span><br><span class="line">        opt.format : 文件格式，以数组的形式传递，如['jpg','png','gif','bmp'];</span><br><span class="line">        opt.callBack : 上传成功后回调;</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">var</span> iName = opt.frameName; <span class="comment">//太长了，变短点</span></span><br><span class="line">    <span class="keyword">var</span> iframe, form;</span><br><span class="line">    <span class="comment">//创建iframe和form表单</span></span><br><span class="line">    iframe = $(<span class="string">'&lt;iframe name="'</span> + iName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">    form = $(<span class="string">'&lt;form method="post" style="display:none;" target="'</span> + iName + <span class="string">'" action="'</span> + opt.url + <span class="string">'"  name="form_'</span> + iName + <span class="string">'" enctype="multipart/form-data" /&gt;'</span>);</span><br><span class="line">    file = $(<span class="string">'&lt;input type="file" name="'</span> + opt.fileName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">    file.appendTo(form);</span><br><span class="line">    <span class="comment">//插入body</span></span><br><span class="line">    $(<span class="built_in">document</span>.body).append(iframe).append(form);</span><br><span class="line">    <span class="comment">//触发浏览事件，选择文件</span></span><br><span class="line">    file.click();</span><br><span class="line">    <span class="comment">//选中文件后，验证文件格式是否符合要求</span></span><br><span class="line">    file.change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取得所选文件的扩展名</span></span><br><span class="line">        <span class="keyword">var</span> fileFormat = $(<span class="keyword">this</span>).val().exec(<span class="regexp">/\.[a-zA-Z]+$/</span>)[<span class="number">0</span>].substring(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (opt.format.join(<span class="string">'-'</span>).indexOf(fileVal) != -<span class="number">1</span>) &#123;</span><br><span class="line">            form.submit(); <span class="comment">//格式通过验证后提交表单;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            iframe.remove();</span><br><span class="line">            form.remove();</span><br><span class="line">            alert(<span class="string">'文件格式错误，请重新选择！'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//文件提交完后</span></span><br><span class="line">    iframe.load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="keyword">this</span>).contents().find(<span class="string">'body'</span>).html();</span><br><span class="line">        opt.callBack(data);</span><br><span class="line">        iframe.remove();</span><br><span class="line">        form.remove();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分解下步骤：</p>
<p>1.创建iframe和form表单，并 append 到 document 中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建iframe和form表单</span></span><br><span class="line">iframe = $(<span class="string">'&lt;iframe name="'</span> + iName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">form = $(<span class="string">'&lt;form method="post" style="display:none;" target="'</span> + iName + <span class="string">'" action="'</span> + opt.url + <span class="string">'"  name="form_'</span> + iName + <span class="string">'" enctype="multipart/form-data" /&gt;'</span>);</span><br><span class="line">file = $(<span class="string">'&lt;input type="file" name="'</span> + opt.fileName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">file.appendTo(form);</span><br><span class="line"><span class="comment">//插入body</span></span><br><span class="line">$(<span class="built_in">document</span>.body).append(iframe).append(form);</span><br></pre></td></tr></table></figure>
<p>2.触发浏览事件，选择文件 <code>file.click();</code>。</p>
<p>3.<code>file.change</code> 事件判断文件格式，符合则提交，否则要 remove 掉创建的 form 和 iframe。</p>
<p>4.<code>iframe.load</code> 事件，拿到服务器返回的数据，并调用 callback 回传。remove 掉创建的 form 和 iframe。</p>
<p>因为<strong>低版本的IE（IE8及以下）做了安全限制，file控件必须由用户主动点击触发选择的文件才可以上传，而不能使用js的click事件来模拟点击触发</strong>。</p>
<p>所以，<code>file = $(&#39;&lt;input type=&quot;file&quot; name=&quot;&#39; + opt.fileName + &#39;&quot; /&gt;&#39;);</code> 不要动态创建，而是显示在 HTML 里，但是在 <code>file.change</code> 时会将 file 的 id 传入<code>ajaxUpload</code>，然后 appendTo 到 form 里。之后无异。此时要主要创建一个中间变量，保存 file 的父级，用完后 appendTo 回去，否则 file 会被删除。</p>
<p>看下代码（来源：<a href="http://www.cnblogs.com/wangmeijian/p/3978407.html" target="_blank" rel="external">利用iframe无刷新上传文件的坑</a>）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*2014年9月19日11:11:07 By 王美建*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxUpload</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">        参数说明:</span><br><span class="line">        opt.id : 页面里file控件的ID;</span><br><span class="line">        opt.frameName : iframe的name值;</span><br><span class="line">        opt.url : 文件要提交到的地址;</span><br><span class="line">        opt.format : 文件格式，以数组的形式传递，如['jpg','png','gif','bmp'];</span><br><span class="line">        opt.callBack : 上传成功后回调;</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">var</span> iName=opt.frameName; <span class="comment">//太长了，变短点</span></span><br><span class="line">    <span class="keyword">var</span> iframe,form,file,fileParent;</span><br><span class="line">    <span class="comment">//创建iframe和form表单</span></span><br><span class="line">    iframe = $(<span class="string">'&lt;iframe name="'</span>+iName+<span class="string">'" /&gt;'</span>);</span><br><span class="line">    form = $(<span class="string">'&lt;form method="post" style="display:n1one;" target="'</span>+iName+<span class="string">'" action="'</span>+opt.url+<span class="string">'"  name="form_'</span>+iName+<span class="string">'" enctype="multipart/form-data" /&gt;'</span>);</span><br><span class="line">    file = $(<span class="string">'#'</span>+opt.id); <span class="comment">//通过id获取flie控件</span></span><br><span class="line">    fileParent = file.parent(); <span class="comment">//存父级</span></span><br><span class="line">    file.appendTo(form);</span><br><span class="line">    <span class="comment">//插入body</span></span><br><span class="line">    $(<span class="built_in">document</span>.body).append(iframe).append(form);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得所选文件的扩展名</span></span><br><span class="line">    <span class="keyword">var</span> fileFormat=<span class="regexp">/\.[a-zA-Z]+$/</span>.exec(file.val())[<span class="number">0</span>].substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(opt.format.join(<span class="string">'-'</span>).indexOf(fileFormat)!=-<span class="number">1</span>)&#123;</span><br><span class="line">        form.submit();<span class="comment">//格式通过验证后提交表单;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        file.appendTo(fileParent); <span class="comment">//将file控件放回到页面</span></span><br><span class="line">        iframe.remove();</span><br><span class="line">        form.remove();</span><br><span class="line">        alert(<span class="string">'文件格式错误，请重新选择！'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件提交完后</span></span><br><span class="line">    iframe.load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="keyword">this</span>).contents().find(<span class="string">'body'</span>).html();        </span><br><span class="line">        file.appendTo(fileParent);</span><br><span class="line">        iframe.remove();</span><br><span class="line">        form.remove();</span><br><span class="line">        opt.callBack(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后再优化下显示。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一遍学习文档，目的：</p>
<ul>
<li>了解 upload 相关技术细节。</li>
<li>了解 IE8/9 的兼容性如何解决，即所谓的渐进增强，优雅降级。</li>
</ul>
<p>参考文档：</p>
<ol>
<li><a href="https://g]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Learn Redux]]></title>
    <link href="http://shane.hsi.rocks/2016/01/16/Learn-Redux/"/>
    <id>http://shane.hsi.rocks/2016/01/16/Learn-Redux/</id>
    <published>2016-01-16T05:01:29.000Z</published>
    <updated>2016-01-27T07:52:45.000Z</updated>
    <content type="html"><![CDATA[<p>通过接口学习：<a href="https://github.com/rackt/react-redux/blob/master/docs/api.md" target="_blank" rel="external">API</a>。</p>
<h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><h3 id="u4F7F_u7528_u793A_u4F8B"><a href="#u4F7F_u7528_u793A_u4F8B" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Router</span> <span class="attribute">history</span>=<span class="value">&#123;history&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">component</span>=<span class="value">&#123;AppContainer&#125;</span> <span class="attribute">path</span>=<span class="value">'/'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Router</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>然后必须和 connect 结合使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counters: state.counters</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@connect(select)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContainer</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">IAppContainerProps</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> actions = bindActionCreators(CounterActions, dispatch);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">App</span> <span class="attribute">name</span>=<span class="value">"John"</span> <span class="attribute">actions</span>=<span class="value">&#123;actions&#125;</span>/&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>仅提取核心部分：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Component, Children &#125; = <span class="built_in">require</span>(<span class="string">'react'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 表示 this.store 会被 Provider 的 children 通过 context 获取</span></span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; store: <span class="keyword">this</span>.store &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  constructor(props, context) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props, context)</span><br><span class="line">    <span class="keyword">this</span>.store = props.store</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; children &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 仅仅是对 children 的无 DOM 包装</span></span><br><span class="line">    <span class="keyword">return</span> Children.only(children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Provider</span><br></pre></td></tr></table></figure>
<p>所以，Provider 的功能仅仅是将 store 注册到 React context 中。</p>
<h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><h3 id="u4F7F_u7528_u573A_u666F"><a href="#u4F7F_u7528_u573A_u666F" class="headerlink" title="使用场景"></a>使用场景</h3><p>使用场景已经介绍过:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counters: state.counters</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connect(select)(view)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这里 connect 是 curry 高阶函数。connect 是将被 annotated 的 <code>React.Component</code> 和 Redux store 联结起来。</p>
<h3 id="u6E90_u7801-1"><a href="#u6E90_u7801-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">mapStateToProps, mapDispatchToProps, mergeProps, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapWithConnect</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">          constructor(props, context) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props, context);</span><br><span class="line">            <span class="comment">// 注释[2]</span></span><br><span class="line">            <span class="keyword">this</span>.store = props.store || context.store;</span><br><span class="line">            <span class="keyword">const</span> storeState = <span class="keyword">this</span>.store.getState();</span><br><span class="line">            <span class="keyword">this</span>.state = &#123; storeState &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注释[1]</span></span><br><span class="line">        <span class="keyword">return</span> hoistStatics(Connect, WrappedComponent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = connect;</span><br></pre></td></tr></table></figure>
<p><strong>注释[1]：</strong></p>
<p>Copies non-react specific statics from a child component to a parent component. Similar to Object.assign, but with React static keywords blacklisted from being overridden.</p>
<p>地址：<a href="https://github.com/mridgway/hoist-non-react-statics" target="_blank" rel="external">https://github.com/mridgway/hoist-non-react-statics</a></p>
<p>接口：hoistNonReactStatics(targetComponent, sourceComponent)</p>
<p>即将 WrappedComponent 的 component 的 keys，除去 contextTypes，mixins，defaultProps，displayName 等，复制到 Connect 上，并返回 Connect。</p>
<p><strong>注释[2]：</strong></p>
<p>使用 Provider 的原因就是给 connect 提供 store。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">invariant(<span class="keyword">this</span>.store,</span><br><span class="line">        <span class="string">`Could not find "store" in either the context or `</span> +</span><br><span class="line">        <span class="string">`props of "<span class="subst">$&#123;this.constructor.displayName&#125;</span>". `</span> +</span><br><span class="line">        <span class="string">`Either wrap the root component in a &lt;Provider&gt;, `</span> +</span><br><span class="line">        <span class="string">`or explicitly pass "store" as a prop to "<span class="subst">$&#123;this.constructor.displayName&#125;</span>".`</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure>
<p>更多参考：</p>
<ul>
<li><a href="http://rackt.org/redux/docs/recipes/ComputingDerivedData.html" target="_blank" rel="external">Computing Derived Data</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>通过接口学习：<a href="https://github.com/rackt/react-redux/blob/master/docs/api.md" target="_blank" rel="external">API</a>。</p>
<h2 id="Provide]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use Router5]]></title>
    <link href="http://shane.hsi.rocks/2016/01/15/Use-Router5/"/>
    <id>http://shane.hsi.rocks/2016/01/15/Use-Router5/</id>
    <published>2016-01-15T09:12:45.000Z</published>
    <updated>2016-01-18T14:14:52.000Z</updated>
    <content type="html"><![CDATA[<p>Router5 的<a href="http://router5.github.io/docs/understanding-router5.html" target="_blank" rel="external">文档</a> 对 router 的解释非常直观详尽，是深入理解 SPA 中 router 的很好资料。其对 react 的绑定，<a href="http://router5.github.io/docs/with-react.html#/inbox" target="_blank" rel="external">react-router5</a> 的实现也很简单直观。理解越多，使用越灵活，功能就越强大。</p>
<h2 id="Get_started"><a href="#Get_started" class="headerlink" title="Get started"></a>Get started</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> router5</span><br></pre></td></tr></table></figure>
<p>其接口：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router5 = <span class="built_in">require</span>(<span class="string">'router5'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router5.Router5</span></span><br><span class="line"><span class="comment">// router5.RouteNode</span></span><br></pre></td></tr></table></figure>
<p>提供的插件：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> router5-listeners</span><br><span class="line">npm <span class="keyword">install</span> router5-history</span><br></pre></td></tr></table></figure>
<p>Code example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router5 &#125; <span class="keyword">from</span> <span class="string">'router5'</span>;</span><br><span class="line"><span class="keyword">import</span> historyPlugin <span class="keyword">from</span> <span class="string">'router5-history'</span>;</span><br><span class="line"><span class="keyword">import</span> listenersPlugin <span class="keyword">from</span> <span class="string">'router5-listeners'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line">    .addNode(<span class="string">'home'</span>, <span class="string">'/home'</span>)</span><br><span class="line">    .usePlugin(historyPlugin())</span><br><span class="line">    .usePlugin(listenersPlugin())</span><br><span class="line">    <span class="comment">// Development helper</span></span><br><span class="line">    .usePlugin(Router5.loggerPlugin())</span><br><span class="line">    .start();</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.canDeactivate(<span class="string">'home'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// is the equivalent of, 为 0.x 的写法，canDeactivate 是 shortcut version</span></span><br><span class="line">router.registerComponent(<span class="string">'home'</span>, &#123;</span><br><span class="line">    canDeactivate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Configuring_routes"><a href="#Configuring_routes" class="headerlink" title="Configuring routes"></a>Configuring routes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router5()</span><br><span class="line">    .setOption(<span class="string">'useHash'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// .setOption('hashPrefix', '!')</span></span><br><span class="line">    .setOption(<span class="string">'defaultRoute'</span>, <span class="string">'inbox'</span>)</span><br><span class="line">    <span class="comment">// Routes</span></span><br><span class="line">    .addNode(<span class="string">'inbox'</span>,         <span class="string">'/inbox'</span>)</span><br><span class="line">    .addNode(<span class="string">'inbox.message'</span>, <span class="string">'/message/:id'</span>)</span><br><span class="line">    .addNode(<span class="string">'compose'</span>,       <span class="string">'/compose'</span>)</span><br><span class="line">    .addNode(<span class="string">'contacts'</span>,      <span class="string">'/contacts'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router5([], &#123;</span><br><span class="line">        useHash: <span class="literal">true</span>,</span><br><span class="line">        hashPrefix: <span class="string">'!'</span>,</span><br><span class="line">        defaultRoute: <span class="string">'home'</span>,</span><br><span class="line">        defaultParams: &#123;&#125;,</span><br><span class="line">        base: <span class="string">''</span>,</span><br><span class="line">        trailingSlash: <span class="literal">false</span>,</span><br><span class="line">        autoCleanUp: <span class="literal">true</span>,</span><br><span class="line">        strictQueryParams: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .setOption(<span class="string">'useHash'</span>, <span class="literal">false</span>)</span><br><span class="line">    .setOption(<span class="string">'hashPrefix'</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure>
<p>useHash，hashPrefix 会被 <code>router5-history</code> 用到。</p>
<p>defaultRoute，defaultParams 会被用作默认 navigation。</p>
<h2 id="Preventing_navigation"><a href="#Preventing_navigation" class="headerlink" title="Preventing navigation"></a>Preventing navigation</h2><p>场景，允许/阻止用户进入下一个 view：比如用户在填写表单，未保存之前，给出提示，并禁止离开当前 view。</p>
<h2 id="u6574_u4F53_u611F_u53D7"><a href="#u6574_u4F53_u611F_u53D7" class="headerlink" title="整体感受"></a>整体感受</h2><p>最终还是选择了先使用 <code>react-router</code>。</p>
<p>router5 整体的文档非常清楚，设计感和覆盖场景也很现实常用。只可惜 react-router5 的很多很变扭，而且还需要很多的 biolerplate 代码，最关键的是 NotFound 的设计很原始。</p>
<p>Anyway，有机会自己实现一个。对 router 也是一种熟悉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Router5 的<a href="http://router5.github.io/docs/understanding-router5.html" target="_blank" rel="external">文档</a> 对 router 的解释非常直观详尽，是深入理]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Write a Webpack Plugin]]></title>
    <link href="http://shane.hsi.rocks/2016/01/14/Write-a-Webpack-Plugin/"/>
    <id>http://shane.hsi.rocks/2016/01/14/Write-a-Webpack-Plugin/</id>
    <published>2016-01-14T09:56:38.000Z</published>
    <updated>2016-01-27T07:53:26.000Z</updated>
    <content type="html"><![CDATA[<p>Plugin 介入的是 Webpack build process。也就是说，在 Webpack build 时，做一些其他的工作（然后可以拿到 Webpack build 时的一些 context）。</p>
<p>Plugin 需要理解 Webpack 的一些 low-level 的内部机制，然后 hook into。要读一些 source code。</p>
<h2 id="Compiler_and_Compilation"><a href="#Compiler_and_Compilation" class="headerlink" title="Compiler and Compilation"></a>Compiler and Compilation</h2><p>开发 plugin 要知晓两个对象 <code>compiler</code>，<code>compilation</code>。</p>
<ul>
<li><p><code>compiler</code> 相当于 Webpck 的 context，并且是配置过的，也就是说，可以拿到 Webpack 的配置比如，options，loaders，plugins。每一个 plguin 都会获得一个对 <code>compiler</code> 的引用。</p>
</li>
<li><p><code>compilation</code> 对应于一个版本的 assets 的 build。因为在运行 Webpack development middleware 时，每次文件变动被探测到，都会有一个新的 compilation，生成一次新的 compiled assets。所以，<code>compilation</code> 代表了 module resources，compiled assets，changed files 和 watched dependencies 的当前状态。还提供了很多 callback points，让 plugin 来做些自定义操作。</p>
</li>
</ul>
<h2 id="Basic_plugin_architecture"><a href="#Basic_plugin_architecture" class="headerlink" title="Basic plugin architecture"></a>Basic plugin architecture</h2><p>Plugins 是实例化对象，prototype 上必须有 <code>apply</code> 方法，它会在 Webpack 安装这个 plugin 时调用。apply 会得到一个 Webpack compiler 的引用，并被赋权使用 compiler 的 callbacks。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorldPlugin</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Setup the plugin instance with options...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloWorldPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">  compiler.plugin(<span class="string">'done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World!'</span>); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HelloWorldPlugin;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloWorldPlugin = <span class="built_in">require</span>(<span class="string">'hello-world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpackConfig = &#123;</span><br><span class="line">  <span class="comment">// ... config settings here ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HelloWorldPlugin(&#123;options: <span class="literal">true</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Accessing_the_compilation"><a href="#Accessing_the_compilation" class="headerlink" title="Accessing the compilation"></a>Accessing the compilation</h2><p>如何访问 <code>compilation</code> 对象呢？通过使用 <code>compiler</code> 的回调。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloCompilationPlugin</span>(<span class="params">options</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">HelloCompilationPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置回调，访问 compilation</span></span><br><span class="line">  compiler.plugin(<span class="string">"compilation"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置回调，访问 compilation 的 steps</span></span><br><span class="line">    compilation.plugin(<span class="string">"optimize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Assets are being optimized."</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HelloCompilationPlugin;</span><br></pre></td></tr></table></figure>
<p>关于 <code>complier</code>，<code>compilation</code> 更多的信息参看 <a href="https://webpack.github.io/docs/plugins.html" target="_blank" rel="external">plugins API</a>。</p>
<h2 id="Async_compilation_plugins"><a href="#Async_compilation_plugins" class="headerlink" title="Async compilation plugins"></a>Async compilation plugins</h2><p>异步这块暂时不看。</p>
<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>以上是 high-level 的文档，这里是具体的细节。</p>
<p>Webpack 的很多对象都继承 Tabable class，后者会暴露一个 <code>plugin</code> 方法。通过 <code>plugin</code> 方法，plugins 会 inject custom build steps。比如：<code>compiler.plugin</code> 和 <code>compilation.plugin</code>。</p>
<p>具体说，对于 plguin 的调用会绑定在 build process 的特定步骤。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/ MyPlugin.js</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPlugin</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Configure your plugin with options...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">  compiler.plugin(<span class="string">"compile"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 开始 compile</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The compiler is starting to compile..."</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">"compilation"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一个新的 compilation</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The compiler is starting a new compilation..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// optimize 步骤</span></span><br><span class="line">    compilation.plugin(<span class="string">"optimize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"The compilation is starting to optimize files..."</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">"emit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 开始emit 生成的 assets，此时是 plugin 往 c.assets (c: Compilation) 数组增加 assets 的最后机会</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The compilation is going to emit files..."</span>);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPlugin;</span><br></pre></td></tr></table></figure>
<p>全部的 steps，参见 <a href="https://webpack.github.io/docs/plugins.html#the-compiler-instance" target="_blank" rel="external">THE COMPILER INSTANCE</a>。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>该例子很简单，从文件系统拿到一个值，放入 compilation 的 assets。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlPlugin</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.options = options ? options : &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HtmlPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">"emit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation, callback</span>) </span>&#123;</span><br><span class="line">    that.addFileToWebpackAsset(compilation);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HtmlPlugin.prototype.addFileToWebpackAsset = <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> template = path.join(__dirname, <span class="string">'default-pc.html'</span>);</span><br><span class="line">  <span class="keyword">var</span> filename = path.resolve(template);</span><br><span class="line">  compilation.fileDependencies.push(filename);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> outFilename = path.basename(that.options.filename || <span class="string">'index.html'</span>);</span><br><span class="line">  compilation.assets[outFilename] = &#123;</span><br><span class="line">    source: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fs.readFileSync(filename).toString();</span><br><span class="line">    &#125;,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fs.statSync(filename).size;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HtmlPlugin;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Plugin 介入的是 Webpack build process。也就是说，在 Webpack build 时，做一些其他的工作（然后可以拿到 Webpack build 时的一些 context）。</p>
<p>Plugin 需要理解 Webpack 的一些 low-]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scaffold and Tools for Front-end (will update regularly)]]></title>
    <link href="http://shane.hsi.rocks/2016/01/13/Scaffold-and-Tools-for-Front-end-to-update/"/>
    <id>http://shane.hsi.rocks/2016/01/13/Scaffold-and-Tools-for-Front-end-to-update/</id>
    <published>2016-01-13T06:36:49.000Z</published>
    <updated>2016-01-29T03:16:26.000Z</updated>
    <content type="html"><![CDATA[<p>技术栈：</p>
<ul>
<li>TypeScript</li>
<li>React</li>
<li>Webpack</li>
<li>Babel</li>
<li>PostCSS &amp; CSS Modules</li>
<li>React Router</li>
<li>Redux</li>
<li>IE8 兼容性</li>
<li>Ajax 库</li>
<li>关于 gulp 和 webpack</li>
</ul>
<h2 id="Only_TypeScript_u2019s_Type"><a href="#Only_TypeScript_u2019s_Type" class="headerlink" title="Only TypeScript’s Type"></a>Only TypeScript’s Type</h2><p>其中 TypeScript 借助 IDE（如 webstorm）或者直接命令行 <code>tsc --watch</code> 编译成 <code>/\.jsx?$/</code>。也就是说，虽然用了 Webpack，但是没有使用 Webpack 的 TypeScript loader，保证出去这一步外，和使用 ES6 开发相同。<code>tsconfig.json</code> 如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">target</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">jsx</span>": <span class="value"><span class="string">"preserve"</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>使用 TypeScript 并不会增加学习的曲线，目前仅仅是使用 TypeScript 中的 Type 系统，做 compile 期的类型检查，而不是在运行时（比如使用 PropTypes）。</p>
<p>我们来看几个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">type:string, actionCreator?:any</span>):(<span class="params">...args:any[]</span>) =&gt; <span class="title">IAction</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用到了 <code>...args:any[]</code>，表明 <code>arguments</code> 是 array-like 的类型。并且 action 的返回值的类型是 <code>(...args:any[]) =&gt; IAction</code> 表明这是 curry。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">onActions</span>(<span class="params">handlers:&#123;[key: string]: Reducer&#125;, initialState:Object</span>):<span class="title">Reducer</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的是如何对 Dictionary 做类型，<code>{[key: string]: Reducer}</code>。</p>
<h2 id="Based_on_react-transform-boilerplate"><a href="#Based_on_react-transform-boilerplate" class="headerlink" title="Based on react-transform-boilerplate"></a>Based on react-transform-boilerplate</h2><p>其余即基于 <a href="https://github.com/gaearon/react-transform-boilerplate" target="_blank" rel="external">react-transform-boilerplate</a>。</p>
<p>没有多余的配置，由浅入深。</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>对于移动端，参考 <a href="https://github.com/weui/weui/blob/master/dist/style/weui.css" target="_blank" rel="external">weui</a>，但是只初步将其中的 weui-rest.css 和 weui-font.css（本身并没有这些文件，这里只是逻辑分块）作为全局 css。</p>
<p>并参考 <a href="https://github.com/corysimmons/boy" target="_blank" rel="external">boy</a> 项目。</p>
<h2 id="React_Router"><a href="#React_Router" class="headerlink" title="React Router"></a>React Router</h2><p>首先，并没有说使用 Redux 来管理 router history。</p>
<p>另外，我是想自己写一个 router 的。</p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux 之前看过一遍源码，整体的实现原理，包括响应式的实现，而且 reducer 的 hot reload 等。前几天开始重新整理下源码的思路。</p>
<h2 id="IE8__u517C_u5BB9_u6027"><a href="#IE8__u517C_u5BB9_u6027" class="headerlink" title="IE8 兼容性"></a>IE8 兼容性</h2><p>React 本身支持 IE9+，使用 es5-shim 可以支持到 IE8+。另外还有一点是，default 保留字是不允许 <code>exports.default</code>，所以要使用 es3ify 转换成 <code>exports[&#39;default&#39;]</code>。本身是不增加代码量就可以兼容。</p>
<p>兼容 polyfill:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script src="/assets/js/vendor/es5-shim.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="/assets/js/vendor/es5-sham.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外，也要考虑使用的依赖和编写的组件是否兼容。而且这些只有在写的过程中不断地在 IE8 测试，总之不是轻松的活计。</p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Ajax 库感兴趣完全可以自己写一个，相对比较固定的写法。网上类似的参考也很多。</p>
<ul>
<li><a href="https://github.com/ForbesLindesay/ajax" target="_blank" rel="external">ForbesLindesay/ajax</a></li>
<li><a href="https://github.com/ma3uk/ajax" target="_blank" rel="external">ma3uk/ajax</a></li>
<li><a href="https://gist.github.com/mythz/1334560" target="_blank" rel="external">mythz/xhr.js</a></li>
<li><a href="https://github.com/dexteryy/mo" target="_blank" rel="external">dexteryy/mo</a></li>
</ul>
<p>目前使用 <a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">superagent</a>，是因为发现它的 response 的类型很丰富。</p>
<h2 id="u5173_u4E8E_gulp__u548C_webpack"><a href="#u5173_u4E8E_gulp__u548C_webpack" class="headerlink" title="关于 gulp 和 webpack"></a>关于 gulp 和 webpack</h2><p>webpack 出现后，曾经有一段时间，前端社区开始去 gulp，而开始使用 npm scripts。并且 webpack 的 loader 功能上和 gulp 有重合。</p>
<p>gulp，将所有的文件类型，比如：css，通过 src 读取文件，然后 pipe 一系列的 plguin，最终写到 dest。</p>
<p>webpack，js 文件可以 require 各种类型，font，img，css 等，然后不同的 loader 进行处理，如果可以写在 html（其实是 jsx）里，结果就是相应的写在 js 的方法（比如 inline img），要么就是 extract 出来。</p>
<p>webpack 的特点就是：最好都 inline 到 js 里。</p>
<p>gulp 的特点是：由于没有 js 这种变态的集大成者（html，inline style，inline img 等），所以最终需要在 html 里做集成（<code>&lt;style /&gt;</code>, <code>&lt;link style /&gt;</code> <code>&lt;script</code> 等）。</p>
<p>所以，结论就好下了，预测 webpack 的处理方式是符合趋势的（比如 shadow dom）。目前 webpack 和 react 结合的紧密。所以，需要一种标准，而不是很重的实现（接口分离开发）。</p>
<p>jsx 作为集成者：</p>
<ul>
<li>本身作为结构（DOM）</li>
<li>绑定样式：inline style，后者 css modules（class 作为 key）</li>
<li>绑定事件系统</li>
<li>绑定图片，在样式里</li>
<li>绑定字体，在样式里</li>
</ul>
<h2 id="To_be_continued"><a href="#To_be_continued" class="headerlink" title="To be continued"></a>To be continued</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>技术栈：</p>
<ul>
<li>TypeScript</li>
<li>React</li>
<li>Webpack</li>
<li>Babel</li>
<li>PostCSS &amp; CSS Modules</li>
<li>React Router</li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Read TypeScript Blog, Announcing TypeScript 1.7]]></title>
    <link href="http://shane.hsi.rocks/2016/01/13/Read-TypeScript-Blog-Announcing-TypeScript-1-7/"/>
    <id>http://shane.hsi.rocks/2016/01/13/Read-TypeScript-Blog-Announcing-TypeScript-1-7/</id>
    <published>2016-01-13T02:10:24.000Z</published>
    <updated>2016-01-27T07:52:52.000Z</updated>
    <content type="html"><![CDATA[<p>更新：</p>
<ul>
<li>对于 ES6 targets，默认打开 async/await</li>
<li>polymorphic ‘this’ typing</li>
<li>ES2016 的 exponentiation 语法</li>
<li>ES6 module targeting</li>
</ul>
<h2 id="Async/Await_for_ES6_targets"><a href="#Async/Await_for_ES6_targets" class="headerlink" title="Async/Await for ES6 targets"></a>Async/Await for ES6 targets</h2><p><a href="http://tc39.github.io/ecmascript-asyncawait/" target="_blank" rel="external">Asyc functions</a>，需要 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-generator-function-definitions" target="_blank" rel="external">ES6 generator</a> 支持（比如 node.js v4 及以上）。</p>
<p>函数通过 <code>async</code> 关键词指定它为一个 asynchronous function。</p>
<p><code>await</code>关键词用来停止执行（stop execution），直到 <code>async</code> 函数的 promise 已经 fulfilled。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"><span class="comment">// printDelayed is a 'Promise&lt;void&gt;'</span></span><br><span class="line">async <span class="function"><span class="keyword">function</span> <span class="title">printDelayed</span>(<span class="params">elements: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> element of elements) &#123;</span><br><span class="line">        await delay(<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">async <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">milliseconds: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise&lt;<span class="built_in">void</span>&gt;(resolve =&gt; &#123;</span><br><span class="line">        setTimeout(resolve, milliseconds);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printDelayed([<span class="string">"Hello"</span>, <span class="string">"beautiful"</span>, <span class="string">"asynchronous"</span>, <span class="string">"world"</span>]).then(() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Printed every element!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>对于目前对 async/await 的实现，参考上一篇<a href="http://blogs.msdn.com/b/typescript/archive/2015/11/03/what-about-async-await.aspx" target="_blank" rel="external">博客</a>。</p>
<h2 id="Polymorphic_this_Typing"><a href="#Polymorphic_this_Typing" class="headerlink" title="Polymorphic this Typing"></a>Polymorphic <code>this</code> Typing</h2><p>背景见 <a href="https://github.com/Microsoft/TypeScript/issues/229" target="_blank" rel="external">issue</a>。</p>
<p>这是 TypeScript 1.7 新增的类型。</p>
<p><code>this</code> 类型可以用在 classes 和 interfaces 里，表示某种类型，它是 containing type 的 subtype（而不是 containing type）。</p>
<p>关于多态这个计算机科学词汇，这里加深下理解。</p>
<p>我们先以 <a href="https://msdn.microsoft.com/zh-cn/library/ms173152.aspx" target="_blank" rel="external">C#中的多态性为例</a> 理解：</p>
<p>多态指两个方面：</p>
<ul>
<li>运行时，在 方法参数、集合或数组等位置，派生类的对象可以作为基类的对象处理。即，对象的声明类型不再与运行时相同。</li>
<li>基类可以定义并实现虚方法，派生类可以重写（override）这些方法，即派生类提供自己的定义和实现。运行时，CLR 查找对象的<strong>运行时</strong>定义，调用虚方法的重写方法。即，你可以调用基类的方法，但执行的是派生类版本。</li>
</ul>
<p>这些是在 C# 中的实践，再来看下<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9E%8B_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="external">维基百科</a>的定义：</p>
<blockquote>
<p>多态，是指计算机程序运行时，相同的消息可能会送给多个不同的类之对象，而系统可依据对象所属类，引发对应类的方法，而有不同的行为。<br>多态也可定义为“一种将不同的特殊行为和单个泛化记号相关联的能力”。</p>
</blockquote>
<p>这里先重点关于下<strong>动态多态（dynamic polymorphism）</strong>：通过类继承机制和虚函数机制生效于运行期。可以优雅地处理异质对象集合，只要其共同的基类定义了虚函数的接口。也被称为子类型多态（Subtype polymorphism）或包含多态（inclusion polymorphism）。在面向对象程序设计中，这被直接称为多态。</p>
<p>另外提及一点，静态多态中的参数化多态（Parametric polymorphism），把类型作为参数的多态。在面向对象程序设计中，这被称作<a href="https://zh.wikipedia.org/wiki/%E6%B3%9B%E5%9E%8B" target="_blank" rel="external">泛型编程</a>。</p>
<p>现在回头再看下 TypeScript 1.7 引入的多态 <code>this</code> 类型：</p>
<blockquote>
<p><code>this</code> 类型可以用在 classes 和 interfaces 里，表示某种类型，它是 containing type 的 subtype（而不是 containing type）。</p>
</blockquote>
<p>这个特性可以帮助容易写出某些 patterns，比如：hierachical fluent APIs，层级流式 API。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Model </span>&#123;</span><br><span class="line">    setupBase(): <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="interface"><span class="keyword">interface</span> AdvancedModel <span class="keyword">extends</span> Model </span>&#123;</span><br><span class="line">    setupAdvanced(): <span class="keyword">this</span>;  <span class="comment">// 返回值是 this，这个 this 既可以是指本身，也可以指基类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">createModel</span>(<span class="params"></span>): <span class="title">AdvancedModel</span></span>;</span><br><span class="line">newModel = newModel.setupBase().setupAdvanced(); <span class="comment">// fluent style works</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>问：TypeScript 中的 <code>declare</code> 关键词是指？</p>
</blockquote>
<p>关于 <code>this</code> 的更多信息，参考 <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#this-typing" target="_blank" rel="external">TypeScript Wiki</a>。</p>
<p>为了支持这个特性，TypeScript 1.7 对从 <code>this</code> 推导（inferring）type 做了些许变更。大致一些<a href="https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#TypeScript1.7" target="_blank" rel="external">潜在的 breaking changes</a>：</p>
<blockquote>
<p>In a class, the type of the value this will be inferred to the this type, and subsequent assignments from values of the original type can fail. As a workaround, you could add a type annotation for this. A code sample with recommended work around, along with a list of other potentially breaking changes is available at GitHub.</p>
</blockquote>
<h2 id="ES6_Module_Emitting"><a href="#ES6_Module_Emitting" class="headerlink" title="ES6 Module Emitting"></a>ES6 Module Emitting</h2><p>Node.js v4+，支持很多 ES6 特性，但是不支持 ES6 modules，可以如下配置，适应 Node.js v4+ 的 runtime。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//tsconfig.json targeting node.js v4 and beyond</span><br><span class="line">&#123;</span><br><span class="line">    "compilerOptions": &#123;</span><br><span class="line">        "module": "commonjs",</span><br><span class="line">        "target": "es6"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ES7_Exponentiation"><a href="#ES7_Exponentiation" class="headerlink" title="ES7 Exponentiation"></a>ES7 Exponentiation</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squared = <span class="number">2</span> ** <span class="number">2</span>;  <span class="comment">// same as: 2 * 2</span></span><br><span class="line"><span class="keyword">let</span> cubed = <span class="number">2</span> ** <span class="number">3</span>;  <span class="comment">// same as: 2 * 2 * 2</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">2</span>;</span><br><span class="line">num **= <span class="number">2</span>; <span class="comment">// same as: num = num * num;</span></span><br></pre></td></tr></table></figure>
<p>和 <code>Math.pow()</code> 说 Byebye。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>更新：</p>
<ul>
<li>对于 ES6 targets，默认打开 async/await</li>
<li>polymorphic ‘this’ typing</li>
<li>ES2016 的 exponentiation 语法</li>
<li>ES6 modu]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://shane.hsi.rocks/2015/12/21/hello-world/"/>
    <id>http://shane.hsi.rocks/2015/12/21/hello-world/</id>
    <published>2015-12-21T07:45:00.000Z</published>
    <updated>2015-12-26T08:01:23.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
