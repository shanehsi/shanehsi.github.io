<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-03-14T00:29:56.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Gulp API]]></title>
    <link href="http://shane.hsi.rocks/2016/03/13/Gulp-API/"/>
    <id>http://shane.hsi.rocks/2016/03/13/Gulp-API/</id>
    <published>2016-03-13T13:15:58.000Z</published>
    <updated>2016-03-14T00:29:56.000Z</updated>
    <content type="html"><![CDATA[<p>我很喜欢 gulp。接口很纯粹，模块化的思路很简洁。</p>
<p>所谓模块化的思路，就是 pipe，公用一套 steamm，vinyl。把文件的处理给分块。</p>
<ul>
<li>src</li>
<li>dest</li>
<li>task</li>
</ul>
<p>纯粹一点，js 不要引用 font，css，img。</p>
<p><del>不对，js 必须引用 svg，font，css，img 这些。</del></p>
<p><del>因为可以 inline。</del></p>
<p>前端比较麻烦的就是，各种格式都要用。我觉得还是没有必要 inline 吧。根据标准走。</p>
<p>如果经常变化的，inline（比如验证码图片）。所以，inline 是一种特殊需求的解决方案，不要做通用场景。</p>
<p>那其中一个 task 就来了。</p>
<ul>
<li>字体文件的合并</li>
<li>图片的合并，sprite</li>
</ul>
<blockquote>
<p>图片优化的其他策略，比如通过css，svg，iconfont 代替图片之类的。不是 task。</p>
</blockquote>
<p>这些是单独的开发流程。都是对其他资源的引用。</p>
<hr>
<h2 id="u9644_uFF1A_u518D_u8C08_u524D_u7AEF_u9700_u6C42"><a href="#u9644_uFF1A_u518D_u8C08_u524D_u7AEF_u9700_u6C42" class="headerlink" title="附：再谈前端需求"></a>附：再谈前端需求</h2><p>其他资源搞定了。</p>
<p>现在是 html，css 开发。</p>
<p>大的东西，一般不希望变（比如布局）。首先，作为大的东西，语义本来就很少。比如，只是设定边界。如果变，就可能变了30%。</p>
<p>如果是小的东西，可以变，变的话，只变了 1%。比如。小的东西，语义非常多。</p>
<p>大的东西都是精炼好的，职责单一的。才能做通用。</p>
<p>从布局组件来看，React 我觉得不好模拟。</p>
<p>不是我包含你，而是你附着我。</p>
<p>而且，因为是 whole store，不需要特殊的通信逻辑。</p>
<p>数据如果很慢的话，DOM 慢就不怕了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Anchor.Head&gt;</span><br><span class="line">    &lt;Elem.Logo&gt;</span><br><span class="line">    &lt;/Elem.Logo&gt;</span><br><span class="line">    &lt;Elem.</span><br><span class="line">&lt;/Anchor.Head&gt;</span><br><span class="line">&lt;Anchor.Anchor1&gt;</span><br><span class="line">&lt;/Anchor.Anchor1&gt;</span><br><span class="line">&lt;Anchor.Anchor2&gt;</span><br><span class="line">&lt;/Anchor.Anchor2&gt;</span><br><span class="line">&lt;Anchor.Foot&gt;</span><br><span class="line">&lt;/Anchor.Foot&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>看更新：</p>
</blockquote>
<p>从左至右，从上至下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">L</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">L.Sidebar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">L.Sidebar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">L.Head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">L.Head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">L.Workspace</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">L.Workspace</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">L</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">L.Head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">L.OmniSearch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">L.OmniSearch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">L.FunctonArea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">L.FunctonArea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">L.Head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">L.OmniSearch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">E.SearchBox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">E.SearchBox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">L.OmniSearch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">L.FunctonArea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">E.LFA.Add</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">E.Apps</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">E.LFA.Help</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">E.Setting</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">E.Notification</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">E.LFA.Uesr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">L.FunctonArea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>考虑到命名冲突，加入 namespace。</p>
<p>总之，不要提前抽象。而是合并抽象，类似于一种吸纳进标准库的流程。</p>
<p>Layout Store 来做 Layout Component 间通信。</p>
<p>One Single Store is also true. 因为，其实是 stream 的 merge。</p>
<p>从前端问题出发，做逻辑分类。便于精细处理。</p>
<blockquote>
<p>细分会变复杂，组织要用标准原语。降低复杂度。</p>
</blockquote>
<p>不要考虑性能，考虑性能瓶颈。</p>
<p>更多的考虑可读性。</p>
<p>其实，对 Component 再做下 Layout 和 Element 的逻辑分类。是映射于 CSS 的定位、布局相关属性和样式相关属性。</p>
<p>现在的分类标准是：</p>
<p><strong>如果要做 Loading 样式（就是线稿中间的默认空白显示），则分成 Layout 和 Element</strong>。</p>
<p>因为没有必要特别细化空白显示的结构。所以，Layout 到很微笑时，就没必要了。代码逻辑可以 monolithic 一点。反正可控好维护。</p>
<p>当然，如果分类了，就纯粹些（指 CSS 属性的运用）。</p>
<p>比如，Layout 的 Empty Placeholder 如何被加载到的 Data 和 View 替换？</p>
<p>挂载点的替换。在 React 里其实就是 Children。这块逻辑看起来不属于 Layout，而是为 Layout 在这个 context 中一个必备功能。可以抽出。</p>
<p>现在还有一个 portal 的还需要想好如何处理？</p>
<p>相对定位，这种两个 box 状态的绑定，是浏览器原生提供的。自己做一套不必。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我很喜欢 gulp。接口很纯粹，模块化的思路很简洁。</p>
<p>所谓模块化的思路，就是 pipe，公用一套 steamm，vinyl。把文件的处理给分块。</p>
<ul>
<li>src</li>
<li>dest</li>
<li>task</li>
</ul>
<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个 Maven 小技巧]]></title>
    <link href="http://shane.hsi.rocks/2016/03/10/A-Maven-Tip/"/>
    <id>http://shane.hsi.rocks/2016/03/10/A-Maven-Tip/</id>
    <published>2016-03-10T09:51:16.000Z</published>
    <updated>2016-03-10T09:56:32.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ol>
<li>当修改了biz包时，需要deploy biz包，为了规避风险，线下统一发布snapshot, 线上发布release, 每次修改升级一个版本号，发布线上时把snapshot去掉(mvn versions:set -DnewVersion=1.1 -DgenerateBackupPoms=false)</li>
</ol>
</blockquote>
<p>另外有直接的插件，<a href="https://maven.apache.org/guides/mini/guide-releasing.html" target="_blank" rel="external">maven-release-plugin</a>。</p>
<p>附一则：</p>
<p>查找重复类: mvn enforcer:enforce</p>
<p><a href="http://www.cnblogs.com/zemliu/p/3277241.html" target="_blank" rel="external">Maven重复类的解决</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ol>
<li>当修改了biz包时，需要deploy biz包，为了规避风险，线下统一发布snapshot, 线上发布release, 每次修改升级一个版本号，发布线上时把snapshot去掉(mvn versions:set -DnewVersion]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Component 规格]]></title>
    <link href="http://shane.hsi.rocks/2016/03/09/React-Component-Spec/"/>
    <id>http://shane.hsi.rocks/2016/03/09/React-Component-Spec/</id>
    <published>2016-03-09T03:48:20.000Z</published>
    <updated>2016-03-11T09:12:47.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>× 组件小而美，互相独立，不要搞大而全的 ui 框架，但是需要统一的架构（css，demo，test 等）</li>
<li>× 拥抱开源，多利用开源组件，在其基础上做一些本地化，二次开发，最好可以提 pr 反向回馈开源组件</li>
<li>√ 开源组件实在无法满足需求的情况，需要我们自己开发组件</li>
<li>√ 样式提供 css 文件，不同业务可以有不同的引入方式</li>
<li>√ 组件的输出需要是完整的编译后的代码（可以考虑只提供 CommonJS 风格），而不是编译前的 es6 代码，不应该把编译过程交给使用方</li>
</ul>
<h2 id="u7ED3_u6784_u548C_u6837_u5F0F"><a href="#u7ED3_u6784_u548C_u6837_u5F0F" class="headerlink" title="结构和样式"></a>结构和样式</h2><p><strong>样式提供 css 文件，不同业务可以有不同的引入方式</strong>：</p>
<p>这也就是为什么样式要和 HTML 分离的原因了。目前蚂蚁用的是 namespace。</p>
<p>引申下来，其实就是给个基础的样式，完全放开权限可以微调（如果想重写也是没问题的）。反正就是 HTML 结构是固定了，除了这个限制，爱怎么写 CSS 完全没问题。（所以，HTML 结构设计要合理，不要浮夸）。</p>
<p>这样感觉，less 很好的（讨厌 sass，嫌他复杂，依赖还有个 C 扩展，每次安装，每次改 npm 都一丢丢问题）。</p>
<h3 id="u66F4_u591A_u60F3_u6CD5"><a href="#u66F4_u591A_u60F3_u6CD5" class="headerlink" title="更多想法"></a>更多想法</h3><ul>
<li>结构很重要，最好提供文档，帮助写样式</li>
<li>我不想信 CSS，当然很多的属性可以再聚集成大的属性，用 PostCSS。但是我不想做标准化的事情。是个长期积淀的过程。</li>
</ul>
<h2 id="u524D_u7AEF_u7684_ISP"><a href="#u524D_u7AEF_u7684_ISP" class="headerlink" title="前端的 ISP"></a>前端的 ISP</h2><p><strong>拥抱开源，多利用开源组件，在其基础上做一些本地化，二次开发，最好可以提 pr 反向回馈开源组件</strong>：</p>
<p>目前 JavaScript 社区，能把接口定义好，再回馈。目前还是以 Monolithic 为主。</p>
<p>前端如何服务化，做到 micro，需要思考。<a href="http://www.zhihu.com/question/20314255" target="_blank" rel="external">Linux 为什么还要坚持使用宏内核？</a>。</p>
<h2 id="u5148_u5B8F_u540E_u5FAE_uFF0C_u76EE_u5F55_u9694_u79BB"><a href="#u5148_u5B8F_u540E_u5FAE_uFF0C_u76EE_u5F55_u9694_u79BB" class="headerlink" title="先宏后微，目录隔离"></a>先宏后微，目录隔离</h2><p><strong>组件小而美，互相独立，不要搞大而全的 ui 框架，但是需要统一的架构（css，demo，test 等）</strong>：</p>
<p>是从 Design（UI）推动 Component ？还是反之？</p>
<p>我目前的想法是，要从 Design 开始。出现业务需求是，也要从 Design Standard 出发进行设计增强。然后组件实现。</p>
<p>组件的实现要轻量。</p>
<p>从功能上划分，</p>
<ul>
<li>如果只是改动了 HTML 结构，放在一个组件</li>
<li>如果是样式上，由 CSS 负责。</li>
</ul>
<p>Design 的增强映射成 DOM 结构的增加（如果是修改，要是微调）。我相信从功能点划分出发，子类不会有 DOM 的巨大差异。只可能是增加。</p>
<p>组件化只是开发方便，从用户出发，还是 Design。</p>
<h2 id="u66F4_u591A_u60F3_u6CD5-1"><a href="#u66F4_u591A_u60F3_u6CD5-1" class="headerlink" title="更多想法"></a>更多想法</h2><p>类似于 ant.design 和 react-component 的关系。</p>
<p>后者提供 HTML DOM 结构，一份基础的样式。</p>
<p>HTML/CSS 之外的功能。这块功能的逻辑性是够强的，可以使用 OO 组合（and 我现在对 function 不求甚解，不甚感冒）。</p>
<h2 id="css__u7684_u8BA8_u8BBA"><a href="#css__u7684_u8BA8_u8BBA" class="headerlink" title="css 的讨论"></a>css 的讨论</h2><p>我觉得还是有好处的。说一些自己的经历和由此产生的想法。<br>如果每个组件都有单独的 CSS 文件，那么对于复杂的可能引入很多组件的项目来说，这个问题该怎么解决呢？因为如果是用 React 做项目的话，肯定要把基础的 HTML 结构放到顶层 React Component 里提供复用，如果使用最简单的方式，把组件的 CSS 以 形式写在 里，可能会有几个问题：1. 真正引用我们的组件的 React Component 并不能直接接触到 ，如果需要 inject 的话，就得用 document.head.appendChild(linkElement) 这种比较脏的形式，而且会导致 server rendering 的结果和浏览器端结果 checksum 不一致（会有 warning）。如果引用我们组件的 React Component 自身是会被重复引用的组件，很可能 元素会被重复写入 ；或者当组件的生命周期结束的时候，相应的 又没有从 DOM 被移除。如果不能妥善处理 元素，会有几个潜在问题：1. 里边出现大量重复的 ; 2. 大量重复无意义的请求; 3. CSS 很难合并; 4. CSS 文件自身变得难以管理，组件更新乃至替换组件变成了复杂、有风险的事情。为了避开这些问题，对方可能会选择使用 Reducer 这种集成化的解决方案，然而 Reducer 是在 Browserify 之上的封装（抱歉不是特别了解 Reducer，只看过源码，可能理解有误），选择 Reducer 也就意味着牺牲了自由度，对方需要放弃原来的 Browserify / WebPack 技术栈，也就是放弃大量的开源插件，这是有风险的事情，更何况让对方接受一个不是非常知名的集成解决方案并不是十分容易的事情。原本使用 React 组件只是类似调用一个函数那么简单的事情，为什么对方应该考虑这么多呢？<br>对于我们之前做项目来说，因为使用 Browerify 打包，CSS 地址必须 hardcode 到想要引用这个 CSS 的地方去，而且，不能使用常量，地址必须以某种非常特殊且明确的形式写在那里（或者写个简单的 transform 可以稍微解决得好一点，至少做 rebase 会简单些），不仅开发体验差、CSS 资源难管理，而且仍然会有前边提到的 checksum 不一致的问题。<br>之前在聚艺项目里的做法是，使用 Less 做开发，所有组件的样式都写在各自单独的样式文件里，然后统一从 entry.less 中 import 进来，实现 concat。这样就避开了在各种 React Component 里 inject 样式很麻烦的问题，也避开了 inline style 形式可能出现的 CSS 重复打包的问题。但是仍然有问题：各个组件必须有自己的命名空间，对于写 Less 来说还好，但是写组件就会麻烦很多；而且因为各种样式共享全局作用域，要想知道某个样式文件依赖了另外某一个样式文件是很难的事情。这里边有很多潜在的问题。<br>之前曾经非常看好把 CSS Style 以 JS Object 的形式写在 .jsx 里，但是这种形式开发体验并不好，语法也比原生的 CSS 啰嗦、失去了 CSS Preprocessor 的各种优势，而且因为不能原生支持 :hover 等形式，限制很多。如果依赖 Radium 等第三方库去做转换的话，仍然有问题：1. :hover, :active 等非常常用的伪类要用 JS 模拟，这在性能上会有问题，而且也无法保证模拟效果和原生 CSS 绝对一致；2. 原生 CSS 的很多可供选择的开源工具会废掉，比如个人比较常用的 Autoprefixer 在开发效率上会带来很大帮助，可以拓宽一些 CSS 新属性的兼容范围（比如最典型的 flex-box），而且对于 CSS 的可维护性也有改善（随着浏览器的更新、浏览器市场份额的变化，我们可以随时调整 vendor-prefix 的添加策略），但是如果写成 CSS in JS 的话，因为是一个全新的领域，原来这些很有用的工具就不存在了；3. CSS 全部写在 JS 里，可以想象会有多少重复的样式被 server render 出来。<br>个人认为比较理想的方式仍然是把 CSS 写在外部文件里，我们不仅可以使用各种 CSS Preprocessor，还可以同时使用 PostCSS 做更多事情。但是前边提到的引入 CSS 文件的问题怎么解决？我们自己开发一套解决方案不是一个很容易让人接受的方式（比如我一直一直都不太能接受 FES，总觉得一旦开始用它的框架，以后整个项目的发展空间就被框在它提供的功能范围里了，这是很大的风险）；其次，CSS 可以提供很好的可复用性，比如说 className，它本来就是一个 Class。我们可以利用一些工具在 build 阶段把 CSS 中的各种 className 替换成有规则的 ID，然后提供一个方法帮助组件在 JS 里调用这些被替换掉的 className；如果 className 样式提供的还不够的话，组件自身可以再在元素的 style 里进行扩展。而基于 PostCSS 的 Autoprefixer 可以让我们的 CSS 拥有更广泛的适用范围，甚至阿里开发的 CSSGrace 可以让我们的 CSS 兼容到 IE6，但只需要写最新的无前缀的 CSS 属性。<br>那么怎么把 CSS 加载到页面中呢，甚至最好还能实现 server rendering？<br>比如可以实现这样一个 React Component：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Style</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> css = fs.readFileSync(<span class="keyword">this</span>.props.cssFile, &#123; encoding: <span class="string">'utf-8'</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">dangerouslySetInnerHTML</span>=<span class="value">&#123;&#123;</span> <span class="attribute">__html:</span> <span class="attribute">css</span> &#125;&#125; /&gt;</span><span class="css">;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Style.propTypes = &#123;</span><br><span class="line">    cssFile: PropTypes.string.isRequired,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Style;</span><br></pre></td></tr></table></figure>
<p>然后在写组件的时候：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Style <span class="keyword">from</span> <span class="string">'@mtfe/react-tools/utils/Style.js'</span>;</span><br><span class="line"><span class="keyword">import</span> classNameUtils <span class="keyword">from</span> <span class="string">'@mtfe/react-tools/utils/className.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CSS_PATH = <span class="string">'../assets/style.css'</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; classNames, ComponentStyle &#125; = classNameUtils(<span class="xml"><span class="tag">&lt;<span class="title">Style</span> <span class="attribute">cssFile</span>=<span class="value">&#123;CSS_PATH&#125;</span> /&gt;</span><span class="css">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAwesomeComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="css">&lt;<span class="tag">section</span>&gt;</span><br><span class="line">                &lt;<span class="tag">ComponentStyle</span> /&gt;</span><br><span class="line">                &lt;<span class="tag">article</span> <span class="tag">className</span>=<span class="rules">&#123;classNames('my-awesome-article')&#125;</span>&gt;</span><br><span class="line">                    &lt;<span class="tag">h2</span> <span class="tag">className</span>=<span class="rules">&#123;classNames('my-awesome-article-title')&gt;Title&lt;/h2&gt;</span><br><span class="line">                    &lt;p&gt;blablablabla&lt;/p&gt;</span><br><span class="line">                &lt;/article&gt;</span><br><span class="line">            &lt;/section&gt;            </span><br><span class="line">        )</span></span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyAwesomeComponent;</span><br></pre></td></tr></table></figure>
<p>最后当别人调用我们的组件的时候：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> AwesomeComponent <span class="keyword">from</span> <span class="string">'my-awesome-component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">title</span>&gt;</span>Fancy App<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">header</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>My site<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">AwesomeComponent</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line">        )</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无需关心样式，组件和样式就都渲染出来了。CSS 部分可以做预处理和后处理，className 允许禁止转换，保持原来的 className，同时添加命名空间，方便用户自己对组件样式进行二次定制，甚至干脆允许禁止加载组件自己的样式，样式部分完全由用户自己去处理；组件的样式 <componentstyle>会在内部统计被加载的次数，将只被渲染一次（对于 server rendering 来说很有好处），而且当组件生命周期结束时，会自动判断是否需要把相应的样式从 DOM 中移除。因为 className 是被替换过的，因此没有命名空间的问题，组件变成了真正的组件，是可以随时调用的资源。如果用户觉得这些配置有些麻烦，可以封装一下组件再用。<br>当然，实现上面这些，困难在于：CSS 样式必须在组件 build 的时候就打包进去（这其实并不难），而且我们需要把对 CSS 类名解析的结果一并打包进去，提供可定制性。build 后的目录结构可能是这样的：</componentstyle></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">| ...</span></span><br><span class="line"><span class="string">| lib</span></span><br><span class="line"><span class="string">| -- index.js</span></span><br><span class="line"><span class="string">| -- assets</span></span><br><span class="line"><span class="string">| ---- css</span></span><br><span class="line"><span class="string">| ------ style.js</span></span><br><span class="line"><span class="string">| ------ style.classNames.js</span></span><br><span class="line"><span class="string">| ---- images</span></span><br><span class="line"><span class="string">| ------ icon.js</span></span><br><span class="line"><span class="string">| assets</span></span><br><span class="line"><span class="string">| -- css</span></span><br><span class="line"><span class="string">| ---- style.less</span></span><br><span class="line"><span class="string">| -- img</span></span><br><span class="line"><span class="string">| ---- icon.png</span></span><br><span class="line"><span class="string">| ...</span></span><br></pre></td></tr></table></figure>
<p>只把资源相关的东西 build 进去，其他依赖并没有 build 进去，这和 WebPack / Browserify 打包是不一样的。<br>因为急着出门，先写到这里……很多地方比较乱，请大家多提问题和意见</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>× 组件小而美，互相独立，不要搞大而全的 ui 框架，但是需要统一的架构（css，demo，test 等）</li>
<li>× 拥抱开源，多利用开源组件，在其基础上做一些本地化，二次开发，最好可以提 pr 反向回馈开源组件</li>
<li>√ 开源组件实在无]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读一段 JavaScript 代码段]]></title>
    <link href="http://shane.hsi.rocks/2016/03/08/Read-a-JavaScript-Code-Snippet/"/>
    <id>http://shane.hsi.rocks/2016/03/08/Read-a-JavaScript-Code-Snippet/</id>
    <published>2016-03-08T07:00:44.000Z</published>
    <updated>2016-03-08T09:04:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint no-var:0, vars-on-top:0 */</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  process.env.NODE_ENV = <span class="string">'development'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">var</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpHash = <span class="built_in">require</span>(<span class="string">'http-hash'</span>);</span><br><span class="line"><span class="keyword">var</span> ecstatic = <span class="built_in">require</span>(<span class="string">'ecstatic'</span>);</span><br><span class="line"><span class="keyword">var</span> pingme = <span class="built_in">require</span>(<span class="string">'pingme'</span>);</span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">'npmlog'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态文件 root 目录</span></span><br><span class="line"><span class="keyword">var</span> staticRoot = path.join(process.cwd(), <span class="string">'dist'</span>, process.env.NODE_ENV);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> serveStatic = ecstatic(&#123;</span><br><span class="line">  root: staticRoot,</span><br><span class="line">  cache: process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'no-store'</span> : <span class="number">3600</span>,</span><br><span class="line">  showDir: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> serveHTML = ecstatic(&#123;</span><br><span class="line">  root: staticRoot,</span><br><span class="line">  cache: <span class="string">'no-store'</span>,</span><br><span class="line">  showDir: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到一些常量。包括</span></span><br><span class="line"><span class="keyword">var</span> PORT = <span class="built_in">require</span>(<span class="string">'./apps/@beauty/constants/serverPort'</span>);</span><br><span class="line"><span class="keyword">var</span> getEInHost = <span class="built_in">require</span>(<span class="string">'./apps/@beauty/host/getEInHost'</span>);</span><br><span class="line"><span class="keyword">var</span> getEPassportHost = <span class="built_in">require</span>(<span class="string">'./apps/@beauty/host/getEPassportHost'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> APP_PATHS = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">'/app/index'</span>,             <span class="comment">// 首页</span></span><br><span class="line">  <span class="string">'/app/home'</span>,              <span class="comment">// 我的</span></span><br><span class="line">  <span class="string">'/app/profile'</span>,           <span class="comment">// 个人信息</span></span><br><span class="line">  <span class="string">'/app/i'</span>,                 <span class="comment">// 个人主页</span></span><br><span class="line">  <span class="string">'/app/i/:beautyId'</span>,       <span class="comment">// 个人主页</span></span><br><span class="line">  <span class="string">'/app/feedback'</span>,          <span class="comment">// 看评价</span></span><br><span class="line">  <span class="string">'/app/product'</span>,           <span class="comment">// 作品</span></span><br><span class="line">  <span class="string">'/app/product/create'</span>,    <span class="comment">// 作品添加</span></span><br><span class="line">  <span class="string">'/app/product/edit/:id'</span>,  <span class="comment">// 作品编辑</span></span><br><span class="line">  <span class="string">'/app/poi/search'</span>,        <span class="comment">// 门店选择</span></span><br><span class="line">  <span class="string">'/app/qrcode'</span>,            <span class="comment">// 用户晒图</span></span><br><span class="line">  <span class="string">'/app/message'</span>,           <span class="comment">// 消息</span></span><br><span class="line">  <span class="string">'/app/statistics'</span>,        <span class="comment">// 查人气</span></span><br><span class="line">  <span class="string">'/app/tell/people'</span>,       <span class="comment">// 告诉朋友</span></span><br><span class="line">  <span class="string">'/app/about'</span>,             <span class="comment">// 关于聚艺</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RELATION_PATHS = [</span><br><span class="line">  <span class="string">'/relation'</span>,              <span class="comment">// 关联</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock server 是 express</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// T，外部变量</span></span><br><span class="line">  <span class="keyword">var</span> data = mock.get(&#123;</span><br><span class="line">    uri: req.originalUrl,</span><br><span class="line">    method: req.method,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="literal">null</span>) <span class="keyword">return</span> next();</span><br><span class="line">  res.type(<span class="string">'json'</span>);</span><br><span class="line">  res.status(data.status);</span><br><span class="line">  res.send(data.body);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发环境使用 mock</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'monkeyjs'</span>);</span><br><span class="line">  <span class="comment">// 构造函数参数： 目录为 mock</span></span><br><span class="line">  <span class="keyword">var</span> mock = <span class="keyword">new</span> Mock(<span class="string">'mock'</span>);</span><br><span class="line"></span><br><span class="line">  app</span><br><span class="line">  .use(mockMiddleware)</span><br><span class="line">  <span class="comment">// .use(require('connect-slashes')(false));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">epassportMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果是 '/relation'，则验证 epassort</span></span><br><span class="line">  <span class="keyword">if</span> (req.path === <span class="string">'/relation'</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是开发环境，则 beauty-sid:test</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      log.info(<span class="string">'epassport'</span>, <span class="string">'测试环境 mock bsid'</span>);</span><br><span class="line">      res.cookie(<span class="string">'beauty-bsid'</span>, <span class="string">'test'</span>);</span><br><span class="line">      <span class="comment">// 直接 return，T 这个代码的圈复杂度</span></span><br><span class="line">      <span class="keyword">return</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> bsid = req.cookies[<span class="string">'beauty-bsid'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!bsid) <span class="keyword">return</span> login();</span><br><span class="line">    <span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line">    <span class="keyword">var</span> baRequest = <span class="built_in">require</span>(<span class="string">'@mtfe/basic-auth'</span>).wrapRequest(request, <span class="string">'mtsalon'</span>, <span class="string">'xoxoxo'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证 epassport epassport 的 host e-in.meituan.com</span></span><br><span class="line">    baRequest(<span class="string">'http://'</span> + getEInHost(req.get(<span class="string">'host'</span>)) + <span class="string">'/bizacct/ssobizacctinfo?bsid='</span> + bsid, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        log.error(<span class="string">'epassport'</span>, error.message);</span><br><span class="line">        <span class="comment">// 跳转到登录页面</span></span><br><span class="line">        <span class="keyword">return</span> login();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 解析访问 epassport 的 body</span></span><br><span class="line">      <span class="keyword">var</span> bodyJSON = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">      <span class="keyword">if</span> (bodyJSON.error) &#123;</span><br><span class="line">        log.error(<span class="string">'epassport'</span>, bodyJSON.error.message);</span><br><span class="line">        <span class="keyword">return</span> login();</span><br><span class="line">      &#125;</span><br><span class="line">      log.info(<span class="string">'epassport'</span>, <span class="string">'验证成功'</span>);</span><br><span class="line">      next();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.path === <span class="string">'/relation/token'</span>) &#123; <span class="comment">// 如果是 /relation/token，从 request 的 querystring BSID 中拿到值，给 beauty-sid</span></span><br><span class="line">    <span class="keyword">var</span> bsid = req.query.BSID;</span><br><span class="line">    <span class="keyword">if</span> (bsid != <span class="literal">null</span>) &#123;</span><br><span class="line">      res.cookie(<span class="string">'beauty-bsid'</span>, bsid);</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">'/relation'</span>);  <span class="comment">// 再跳转</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    res.redirect(url.format(&#123;</span><br><span class="line">      protocol: <span class="string">'http'</span>,</span><br><span class="line">      host: getEPassportHost(req.get(<span class="string">'host'</span>)),</span><br><span class="line">      pathname: <span class="string">'/account/login'</span>,</span><br><span class="line">      query: &#123;</span><br><span class="line">        service: <span class="string">'mtsalon'</span>,</span><br><span class="line">        loginsource: <span class="number">38</span>,</span><br><span class="line">        <span class="keyword">continue</span>: url.format(&#123;</span><br><span class="line">          protocol: req.protocol,</span><br><span class="line">          host: req.get(<span class="string">'host'</span>),</span><br><span class="line">          pathname: <span class="string">'/relation/token'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routeMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  log.info(<span class="string">'server'</span>, req.method, req.url);</span><br><span class="line">  <span class="keyword">var</span> hash = httpHash();</span><br><span class="line">  APP_PATHS.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">appPath</span>) </span>&#123;</span><br><span class="line">    hash.set(appPath, <span class="function"><span class="keyword">function</span>(<span class="params">req_, res_</span>) </span>&#123;</span><br><span class="line">      req_.url = <span class="string">'/app/entry'</span>;</span><br><span class="line">      <span class="keyword">return</span> serveHTML(req_, res_);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  RELATION_PATHS.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">appPath</span>) </span>&#123;</span><br><span class="line">    hash.set(appPath, <span class="function"><span class="keyword">function</span>(<span class="params">req_, res_</span>) </span>&#123;</span><br><span class="line">      req_.url = <span class="string">'/relation/entry'</span>;</span><br><span class="line">      <span class="keyword">return</span> serveHTML(req_, res_);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> route = hash.get(req.url);</span><br><span class="line">  <span class="keyword">if</span> (route.handler) <span class="keyword">return</span> route.handler(req, res);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">.use(cookieParser())</span><br><span class="line">.use(epassportMiddleware)</span><br><span class="line">.use(routeMiddleware)</span><br><span class="line">.use(serveStatic);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onerror</span>(<span class="params">req, res, err</span>) </span>&#123;</span><br><span class="line">  res.statusCode = <span class="number">500</span>;</span><br><span class="line">  res.write(err.message);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mainHandler</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> urlOpts = url.parse(req.url);</span><br><span class="line">  <span class="comment">// 简单处理，无应用检查，直接返回 OK</span></span><br><span class="line">  <span class="comment">// TODO 开 task 给 sre， 修改应用健康检查的 url</span></span><br><span class="line">  <span class="comment">// 健康检查</span></span><br><span class="line">  <span class="keyword">if</span> (urlOpts.pathname === <span class="string">'/api/monitor/alive'</span>) &#123;</span><br><span class="line">    res.setHeader(<span class="string">'content-type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line">    res.end(<span class="string">'OK\n'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (urlOpts.pathname === <span class="string">'/download'</span>) &#123;</span><br><span class="line">    <span class="comment">// 特殊路径，/download</span></span><br><span class="line">    fs.createReadStream(path.resolve(__dirname, <span class="string">'apps/app/download.html'</span>))</span><br><span class="line">    <span class="comment">// 使用 .bind 创建一个新的包装函数，和 new 类似了</span></span><br><span class="line">    .on(<span class="string">'error'</span>, onerror.bind(<span class="literal">null</span>, req, res))</span><br><span class="line">    .pipe(res)</span><br><span class="line">    .on(<span class="string">'error'</span>, onerror.bind(<span class="literal">null</span>, req, res))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// app 是这块代码最大的作用域外变量</span></span><br><span class="line">    app(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mainHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> server = http.createServer(mainHandler);</span><br><span class="line">  pingme(&#123;</span><br><span class="line">    server: server,</span><br><span class="line">    <span class="comment">// 简单处理，无应用检查，直接返回 OK</span></span><br><span class="line">    ping: <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123; cb(<span class="literal">null</span>); &#125;,</span><br><span class="line">    status: <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123; cb(<span class="literal">null</span>); &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  server.listen(PORT, <span class="string">'0.0.0.0'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    log.info(<span class="string">'server'</span>, <span class="keyword">this</span>.address());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发方便使用</span></span><br><span class="line">  <span class="comment">// cluster fork 模式下不需要</span></span><br><span class="line">  <span class="keyword">if</span> (!cluster.isWorker &amp;&amp; process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="comment">// @TODO 必须等到 build 完成? DEV 环境不需要吧</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./bin/build'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u4F9D_u8D56"><a href="#u4F9D_u8D56" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpHash = <span class="built_in">require</span>(<span class="string">'http-hash'</span>);</span><br><span class="line"><span class="keyword">var</span> ecstatic = <span class="built_in">require</span>(<span class="string">'ecstatic'</span>);</span><br><span class="line"><span class="keyword">var</span> pingme = <span class="built_in">require</span>(<span class="string">'pingme'</span>);</span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">'npmlog'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br></pre></td></tr></table></figure>
<p>以下是 Node.js 标准模块：</p>
<ul>
<li>fs</li>
<li>path</li>
<li>url</li>
<li>http</li>
<li>crypto</li>
<li>cluster Nodejs多核处理模块</li>
</ul>
<p>以下是第三方 npm 包：</p>
<ul>
<li>http-hash <a href="https://www.npmjs.com/package/http-hash" target="_blank" rel="external">npm</a> HTTP router based on a strict path tree structure</li>
<li>ecstatic <a href="https://www.npmjs.com/package/ecstatic" target="_blank" rel="external">npm</a> A simple static file server middleware that works with both Express and Flatiron</li>
<li>pingme <a href="https://www.npmjs.com/package/pingme" target="_blank" rel="external">npm</a> Super simple HTTP server that can be easily pinged so that Nagios et al can know your stuff’s healthy.</li>
<li>npmlog <a href="https://www.npmjs.com/package/npmlog" target="_blank" rel="external">npm</a> logger for npm</li>
<li>cookie-parser <a href="https://www.npmjs.com/package/cookie-parser" target="_blank" rel="external">npm</a> cookie parsing with signatures</li>
<li>monkeyjs <a href="https://github.com/meituan/monkey" target="_blank" rel="external">github</a> 来自美团 Data mapping system</li>
<li>request <a href="https://www.npmjs.com/package/request" target="_blank" rel="external">npm</a> Simplified HTTP request client.</li>
</ul>
<h2 id="ecstatic"><a href="#ecstatic" class="headerlink" title="ecstatic"></a>ecstatic</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> serveStatic = ecstatic(&#123;</span><br><span class="line">  root: staticRoot,</span><br><span class="line">  cache: process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'no-store'</span> : <span class="number">3600</span>,</span><br><span class="line">  showDir: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> serveHTML = ecstatic(&#123;</span><br><span class="line">  root: staticRoot,</span><br><span class="line">  cache: <span class="string">'no-store'</span>,</span><br><span class="line">  showDir: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>非常直白。感谢 Option 配置式的强大的语法。</p>
<h2 id="http-hash"><a href="#http-hash" class="headerlink" title="http-hash"></a>http-hash</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routeMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  log.info(<span class="string">'server'</span>, req.method, req.url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hash = httpHash();</span><br><span class="line"></span><br><span class="line">  APP_PATHS.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">appPath</span>) </span>&#123;</span><br><span class="line">    hash.set(appPath, <span class="function"><span class="keyword">function</span>(<span class="params">req_, res_</span>) </span>&#123; <span class="comment">// route.handler</span></span><br><span class="line">        <span class="comment">// 所有的 url 都是 /app/entry，and 不觉得这个有多好，过分抽象了，直接用 history 挺好</span></span><br><span class="line">      req_.url = <span class="string">'/app/entry'</span>;</span><br><span class="line">      <span class="keyword">return</span> serveHTML(req_, res_);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  RELATION_PATHS.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">appPath</span>) </span>&#123;</span><br><span class="line">    hash.set(appPath, <span class="function"><span class="keyword">function</span>(<span class="params">req_, res_</span>) </span>&#123;</span><br><span class="line">      req_.url = <span class="string">'/relation/entry'</span>;</span><br><span class="line">      <span class="keyword">return</span> serveHTML(req_, res_);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set 好后，get</span></span><br><span class="line">  <span class="keyword">var</span> route = hash.get(req.url);</span><br><span class="line">  <span class="keyword">if</span> (route.handler) <span class="keyword">return</span> route.handler(req, res);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个小 library，领域选择的很准确，职责单一。</p>
<h2 id="u4E00_u4E9B_u51B7_u95E8_u77E5_u8BC6"><a href="#u4E00_u4E9B_u51B7_u95E8_u77E5_u8BC6" class="headerlink" title="一些冷门知识"></a>一些冷门知识</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> server = http.createServer(mainHandler);</span><br><span class="line">  pingme(&#123;</span><br><span class="line">    server: server,</span><br><span class="line">    <span class="comment">// 简单处理，无应用检查，直接返回 OK</span></span><br><span class="line">    ping: <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123; cb(<span class="literal">null</span>); &#125;,</span><br><span class="line">    status: <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123; cb(<span class="literal">null</span>); &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  server.listen(PORT, <span class="string">'0.0.0.0'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    log.info(<span class="string">'server'</span>, <span class="keyword">this</span>.address());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发方便使用</span></span><br><span class="line">  <span class="comment">// cluster fork 模式下不需要</span></span><br><span class="line">  <span class="keyword">if</span> (!cluster.isWorker &amp;&amp; process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="comment">// @TODO 必须等到 build 完成? DEV 环境不需要吧</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./bin/build'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="http://stackoverflow.com/questions/6398196/node-js-detect-if-called-through-require-or-directly-by-command-line" target="_blank" rel="external">Node.JS: Detect if called through require or directly by command line</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">require</span>.main === <span class="built_in">module</span>) </span><br><span class="line">   &#123; <span class="built_in">console</span>.log(<span class="string">"called directly"</span>); &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   &#123; <span class="built_in">console</span>.log(<span class="string">"required as a module"</span>); &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutt]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学一个 shell 脚本]]></title>
    <link href="http://shane.hsi.rocks/2016/03/07/Let-s-Learn-a-Shell-Script/"/>
    <id>http://shane.hsi.rocks/2016/03/07/Let-s-Learn-a-Shell-Script/</id>
    <published>2016-03-07T07:45:44.000Z</published>
    <updated>2016-03-07T07:47:46.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;# ------------------&#10;# &#32447;&#19978;&#38745;&#24577;&#37096;&#32626;&#33050;&#26412;&#10;#&#10;# @history&#10;#&#10;# ------------------&#10;&#10;WORKSPACE=`pwd`&#10;DIRNAME=`dirname $0`    # &#36820;&#22238;&#36825;&#20010;&#33050;&#26412;&#25991;&#20214;&#25918;&#32622;&#30340;&#30446;&#24405;&#65292;&#28982;&#21518;&#21487;&#20197;&#26681;&#25454;&#36825;&#20010;&#30446;&#24405;&#23450;&#20301;&#35201;&#36816;&#34892;&#31243;&#24207;&#30340;&#30456;&#23545;&#20301;&#32622;&#10;&#10;STATIC_PATH=/opt/xoxo/static/&#10;TEST_STATIC_PATH=/opt/xoxo/static/test&#10;PROJECT_PATH=$WORKSPACE/xxyy-container&#10;DEPLOY_PATH=$PROJECT_PATH/src/main/webapp/deploy/&#10;&#10;pwd;&#10;echo $DIRNAME;  # &#25171;&#21360;&#24403;&#21069;&#30446;&#24405;&#10;&#10;chmod u+x $DIRNAME/color.sh &#38;&#38; source $DIRNAME/color.sh     # &#32473; color.sh &#22686;&#21152;&#25191;&#34892;&#26435;&#38480;&#65292;&#24182;&#20869;&#32852;&#10;if [ $? -eq 0 ]; then   # $? &#19978;&#20010;&#21629;&#20196;&#30340;&#36864;&#20986;&#29366;&#24577;&#65292;&#25110;&#20989;&#25968;&#30340;&#36820;&#22238;&#20540;&#12290;&#10;    echo -e &#34;$&#123;Gre&#125;&#25191;&#34892;color.sh&#25104;&#21151;$&#123;RCol&#125;&#34;&#10;else&#10;    echo &#34;&#25191;&#34892;color.sh&#20986;&#38169;&#20102;&#34;&#10;    exit 1&#10;fi&#10;&#10;cd $DIRNAME &#38;&#38; pwd&#10;&#10;npm install --registry=http://r.npm.xoxo.com     # npm install&#65292;&#24182;&#20351;&#29992; xoxo &#28304;&#65292;&#24403;&#28982;&#36825;&#37324;&#30340;&#20195;&#30721;&#19981;&#20381;&#36182; xoxo &#28304;&#65292;&#36825;&#21477;&#35805;&#21487;&#33021;&#20250;&#25302;&#24930;&#36895;&#24230;&#65288;&#27604;&#22914;&#28857;&#35780; CI &#26080;&#27861;&#35775;&#38382; xoxo &#28304;&#65289;&#10;&#10;if [ $? -eq 0 ]; then&#10;    echo -e &#34;$&#123;Gre&#125;npm&#20381;&#36182;&#21253;&#21152;&#36733;&#23436;&#25104;$&#123;RCol&#125;&#34;&#10;else&#10;    echo -e &#34;$&#123;On_Red&#125;npm&#20381;&#36182;&#21253;&#21152;&#36733;&#22833;&#36133;$&#123;RCol&#125;&#34;&#10;    exit 1;&#10;fi&#10;&#10;# &#20989;&#25968;&#65292;&#35843;&#29992; grunt deploy&#10;grunt_deploy () &#123;&#10;    # grunt task &#30340;&#21442;&#25968; --target&#65292;--project_path&#10;    grunt deploy --target=$1 --project_path=$PROJECT_PATH&#10;&#10;    if [ $? -eq 0 ]; then&#10;        echo -e &#34;$&#123;Gre&#125;$1&#21069;&#31471;&#32534;&#35793;&#25104;&#21151;$&#123;RCol&#125;&#34;&#10;    else&#10;        echo -e &#34;$&#123;On_Red&#125;&#25191;&#34892;&#22833;&#36133;&#12290;&#12290;&#12290;$&#123;RCol&#125;&#34;&#10;        echo &#34;&#23558;&#37325;&#26032;&#32534;&#35793;$1&#34;&#10;        echo -e &#34;\n\n\n\n&#34;;&#10;        # &#37325;&#26032;&#32534;&#35793;&#19968;&#27425;&#65292;&#24182; verbose &#25171;&#21360;&#10;        grunt deploy --target=$1 --project_path=$PROJECT_PATH --verbose&#10;        echo &#34;----------------------&#34;&#10;        echo &#34;$1&#34;&#10;        exit 1;&#10;    fi&#10;&#125;&#10;&#10;# &#20989;&#25968;&#35843;&#29992;&#65292;&#22312;&#20989;&#25968;&#23454;&#29616;&#20013;&#36890;&#36807; $1 $2 ... $9 &#26469;&#25509;&#21463;&#20989;&#25968;&#35843;&#29992;&#26102;&#30340;&#21464;&#37327;&#10;grunt_deploy xxyy&#10;&#10;echo -e &#39;$&#123;Gre&#125;&#25335;&#36125;&#38745;&#24577;&#36164;&#28304;&#21040;&#38745;&#24577;&#26381;&#21153;&#22120;$&#123;RCol&#125;&#39;&#10;&#10;rsync_static () &#123;&#10;    rsync -avi $DEPLOY_PATH xoxo@mobile-static0$1:$STATIC_PATH&#10;&#10;    if [ $? -eq 0 ]; then&#10;        echo -e &#34;$&#123;Gre&#125;rsync &#21040; mobile-static0$1 &#25104;&#21151;$&#123;RCol&#125;&#34;&#10;    else&#10;        echo -e &#34;$&#123;On_Red&#125;rsync &#21040; mobile-static0$1 &#22833;&#36133;$&#123;RCol&#125;&#34;&#10;        exit 1&#10;    fi&#10;&#125;&#10;&#10;rsync_yf_static () &#123;&#10;    # -a, --archive &#24402;&#26723;&#27169;&#24335;&#65292;&#34920;&#31034;&#20197;&#36882;&#24402;&#26041;&#24335;&#20256;&#36755;&#25991;&#20214;&#65292;&#24182;&#20445;&#25345;&#25152;&#26377;&#25991;&#20214;&#23646;&#24615;&#65292;&#31561;&#20110;-rlptgoD &#10;    # -a, --archive               archive mode; same as -rlptgoD (no -H)&#10;    # -v, --verbose &#35814;&#32454;&#27169;&#24335;&#36755;&#20986; &#10;    # -i, --itemize-changes       output a change-summary for all updates&#10;    # &#36825;&#26159; ssh &#36890;&#36947;&#20256;&#20837;&#65292;&#29992;&#25143;&#21517; xoxo &#22320;&#22336; yf-mobile-static0$1&#65288;&#21363;&#65292;yf-mobile-static0xxyy&#65289;&#10;    # &#20174; $DEPLOY_PATH -&#62; &#36828;&#31243;&#26426;&#22120;&#19978;&#30340; $STATIC_PATH&#10;    rsync -avi $DEPLOY_PATH xoxo@yf-mobile-static0$1:$STATIC_PATH&#10;&#10;    if [ $? -eq 0 ]; then&#10;        echo -e &#34;$&#123;Gre&#125;rsync &#21040; yf-mobile-static0$1 &#25104;&#21151;$&#123;RCol&#125;&#34;&#10;    else&#10;        echo -e &#34;$&#123;On_Red&#125;rsync &#21040; yf-mobile-static0$1 &#22833;&#36133;$&#123;RCol&#125;&#34;&#10;        exit 1&#10;    fi&#10;&#125;&#10;&#10;# rsync_static 1&#10;# rsync_static 2&#10;&#10;rsync_yf_static 1&#10;rsync_yf_static 2&#10;&#10;# &#28165;&#31354;&#21457;&#24067;&#21518;&#30340;&#38745;&#24577;&#25991;&#20214;&#10;rm -rf $DEPLOY_PATH</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="li]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring 3.1 M1: Unified Property Management]]></title>
    <link href="http://shane.hsi.rocks/2016/03/03/Spring-3-1-M1-Unified-Property-Management/"/>
    <id>http://shane.hsi.rocks/2016/03/03/Spring-3-1-M1-Unified-Property-Management/</id>
    <published>2016-03-03T11:10:21.000Z</published>
    <updated>2016-03-07T07:44:08.000Z</updated>
    <content type="html"><![CDATA[<p>参考链接：<a href="http://spring.io/blog/2011/02/15/spring-3-1-m1-unified-property-management/" target="_blank" rel="external">Spring 3.1 M1: Unified Property Management</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考链接：<a href="http://spring.io/blog/2011/02/15/spring-3-1-m1-unified-property-management/" target="_blank" rel="external">Spring 3.1 M1: ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manager Topic from ZhiHu]]></title>
    <link href="http://shane.hsi.rocks/2016/03/03/Manager-Topic-from-ZhiHu/"/>
    <id>http://shane.hsi.rocks/2016/03/03/Manager-Topic-from-ZhiHu/</id>
    <published>2016-03-03T05:57:37.000Z</published>
    <updated>2016-03-03T05:57:37.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Knowledage Points 2016-03-01]]></title>
    <link href="http://shane.hsi.rocks/2016/03/01/Java-Knowledage-Points-2016-03-01/"/>
    <id>http://shane.hsi.rocks/2016/03/01/Java-Knowledage-Points-2016-03-01/</id>
    <published>2016-03-01T03:56:17.000Z</published>
    <updated>2016-03-01T07:19:43.000Z</updated>
    <content type="html"><![CDATA[<p>在将两家公司的基础中间件合并时出现的错误。</p>
<p><a href="http://my.oschina.net/jasonultimate/blog/166932" target="_blank" rel="external">ClassNotFoundException和NoClassDefFoundError的区别</a>。</p>
<p>Java支持使用Class.forName方法来动态地加载类，任意一个类的类名如果被作为参数传递给这个方法都将导致该类被加载到JVM内存中，如果这个类在 <strong>类路径中没有被找到</strong> ，那么此时就会在运行时抛出ClassNotFoundException异常。</p>
<p>要解决这个问题很容易，唯一需要做的就是要确保所需的类连同它依赖的包存在于类路径中。当Class.forName被调用的时候，类加载器会查找类路径中的类，如果找到了那么这个类就会被成功加载，如果没找到，那么就会抛出ClassNotFountException，除了Class.forName，ClassLoader.loadClass、ClassLOader.findSystemClass在动态加载类到内存中的时候也可能会抛出这个异常。</p>
<p>另外还有一个导致ClassNotFoundException的原因就是：当一个类已经某个类加载器加载到内存中了，此时 <strong>另一个类加载器</strong> 又尝试着动态地从同一个包中加载这个类。</p>
<blockquote>
<p>两个类加载器动态加载冲突。</p>
</blockquote>
<p>NoClassDefFoundError产生的原因：</p>
<p>如果JVM或者ClassLoader实例尝试加载（可以通过正常的方法调用，也可能是使用new来创建新的对象）类的时候却找不到类的定义。要查找的类 <strong>在编译的时候是存在的，运行的时候却找不到了</strong>。这个错误往往是你使用new操作符来创建一个新的对象但却找不到该对象对应的类。这个时候就会导致NoClassDefFoundError.</p>
<p>由于NoClassDefFoundError是有JVM引起的，所以不应该尝试捕捉这个错误。</p>
<p>解决这个问题的办法就是：<strong>查找那些在开发期间存在于类路径下但在运行期间却不在类路径下的类</strong>。</p>
<ul>
<li>加载时从外存储器找不到需要的class就出现ClassNotFoundException </li>
<li>连接时从内存找不到需要的class就出现NoClassDefFoundError</li>
</ul>
<p><a href="http://blog.csdn.net/shendl/article/details/1050611" target="_blank" rel="external">出现java.lang.UnsupportedClassVersionError 错误的原因</a></p>
<p>出现java.lang.UnsupportedClassVersionError 错误的原因，是因为我们使用高版本的JDK编译的Java class文件试图在较低版本的JVM上运行，所报的错误。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在将两家公司的基础中间件合并时出现的错误。</p>
<p><a href="http://my.oschina.net/jasonultimate/blog/166932" target="_blank" rel="external">ClassNotFoundExcept]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[新部门，新角色，新目标]]></title>
    <link href="http://shane.hsi.rocks/2016/02/29/New-Department-New-Roles-New-Goals/"/>
    <id>http://shane.hsi.rocks/2016/02/29/New-Department-New-Roles-New-Goals/</id>
    <published>2016-02-29T12:05:48.000Z</published>
    <updated>2016-03-07T08:16:23.000Z</updated>
    <content type="html"><![CDATA[<p>今天正式转组。当前时间20:05，状态累。虽然现在有很多想法，由于状态不佳，所以想形成一篇博客，保留下自己的零碎想法。</p>
<ul>
<li>新组有很多新的业务领域知识需要摄入</li>
<li>Java 点评中间件需要熟悉，主要是 Cat</li>
<li>用户端 Java 的技术特点需要熟悉</li>
<li>这边技术团队的技术特点需要熟悉</li>
</ul>
<p>以上是近期，或者叫做直面的挑战。</p>
<blockquote>
<p>现在身体状况的确有些不好，很想睡觉。 然后过了5分钟左右，中间问了下妈妈外婆的身体状况。背景音乐从『IT 公论』换成中孝介的歌声。状态稍微恢复了点。</p>
</blockquote>
<p>不管挑战如何，都会有解决方案。有些自己参与即可，有些也急不来，需要和团队不断的沟通。</p>
<p>Cat 中间件的熟悉主要是自己。但是比较快速的方式是问他们看哪些指标？Cat 调试的方式也不多。Cat 的文档相对蛮多的。总结出一篇博客。这个基本上就可以标记为 done。</p>
<p>其他基本上通过沟通。要快速和团队融合。目标是2周，3月中旬找 Lead 沟通下年度目标。沟通的具体内容我需要找长辈和朋友商量下。</p>
<p>今天和一个同事聊天，他说一定要有目标。</p>
<p>所以，这才是我最大的挑战。</p>
<p>上周五在公司的目标管理课程上，讲师分享了一个例子。对一所学校的毕业生，30年后的现状进行了调查。</p>
<ul>
<li>依然坚持30年前定下的目标的极少部分人，成为了精英和上层人物</li>
<li>坚持了10年的，成为了专家</li>
<li>坚持了3年的，成为了中产</li>
<li>一直在更换目标的，成为了普通人</li>
</ul>
<p>除去其中的生搬硬造，道理却是出来了。</p>
<p>这才是我最大的挑战。</p>
<h2 id="u6211_u8981_u6362_u5DE5_u4F5C_u4E86"><a href="#u6211_u8981_u6362_u5DE5_u4F5C_u4E86" class="headerlink" title="我要换工作了"></a>我要换工作了</h2><p>变化的太快了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天正式转组。当前时间20:05，状态累。虽然现在有很多想法，由于状态不佳，所以想形成一篇博客，保留下自己的零碎想法。</p>
<ul>
<li>新组有很多新的业务领域知识需要摄入</li>
<li>Java 点评中间件需要熟悉，主要是 Cat</li>
<li>用户端 J]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[SSH Login with Saved Password]]></title>
    <link href="http://shane.hsi.rocks/2016/02/29/SSH-Login-with-Saved-Password/"/>
    <id>http://shane.hsi.rocks/2016/02/29/SSH-Login-with-Saved-Password/</id>
    <published>2016-02-29T11:30:41.000Z</published>
    <updated>2016-02-29T11:37:39.000Z</updated>
    <content type="html"><![CDATA[<p>参考文档：<a href="http://serverfault.com/questions/241588/how-to-automate-ssh-login-with-password" target="_blank" rel="external">How to automate SSH login with password?</a></p>
<p>参考文档：<a href="https://gist.github.com/arunoda/7790979" target="_blank" rel="external">Installing SSHPASS</a>。</p>
<p>之后可以编写脚本了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考文档：<a href="http://serverfault.com/questions/241588/how-to-automate-ssh-login-with-password" target="_blank" rel="external">How to auto]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 知识点 20160229]]></title>
    <link href="http://shane.hsi.rocks/2016/02/29/Java-Knowledge-Points-20160229/"/>
    <id>http://shane.hsi.rocks/2016/02/29/Java-Knowledge-Points-20160229/</id>
    <published>2016-02-29T08:30:04.000Z</published>
    <updated>2016-02-29T12:27:11.000Z</updated>
    <content type="html"><![CDATA[<p>注：未填充答案。</p>
<p>区分目录：</p>
<ul>
<li>src/main/resources/META-INF/</li>
<li>webapps下的那个META-INF</li>
</ul>
<p>错误：</p>
<p><code>java.lang.AbstractMethodError</code></p>
<p>这个问题是因为接口中定义的方法名和实现类的的方法名相同，但是参数的数据类型却不一致，而且实现类的方法没有 <code>@Override</code> 造成的。</p>
<p>所以在实现接口或覆写父类方法时，最好的实践是加上 <code>@Override</code>。</p>
<p>详细：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//www.google.com/search?q=java.lang.AbstractMethodError%3A+org.apache.xerces.dom.DocumentImpl.setXmlStandalone</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>注：未填充答案。</p>
<p>区分目录：</p>
<ul>
<li>src/main/resources/META-INF/</li>
<li>webapps下的那个META-INF</li>
</ul>
<p>错误：</p>
<p><code>java.lang.Abs]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[阅读 TypeScript Deep Dive]]></title>
    <link href="http://shane.hsi.rocks/2016/02/27/Read-TypeScript-Deep-Dive/"/>
    <id>http://shane.hsi.rocks/2016/02/27/Read-TypeScript-Deep-Dive/</id>
    <published>2016-02-27T01:28:10.000Z</published>
    <updated>2016-02-27T02:26:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="extends"><a href="#extends" class="headerlink" title="__extends"></a>__extends</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = <span class="keyword">this</span>.__extends || <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    __.prototype = b.prototype;</span><br><span class="line">    d.prototype = <span class="keyword">new</span> __();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>d - derived class<br>b - base class</p>
<p><strong>1.</strong> 将 static members 复制到 d。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br></pre></td></tr></table></figure>
<p><strong>2.</strong> 设置 d 的 class function 的 prototype 可选的查找 b 的 proto 的成员。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.prototype.__proto__ = b.prototype</span><br></pre></td></tr></table></figure>
<p>详细解释下 <strong>2</strong>。</p>
<p>首先解释为什么 <code>d.prototype.__proto__ = b.prototype</code> 和 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">__.prototype = b.prototype;</span><br><span class="line">d.prototype = <span class="keyword">new</span> __();</span><br></pre></td></tr></table></figure>
<p>等价。</p>
<p>然后解释这句话的重要性。</p>
<p>先了解这些概念：</p>
<ol>
<li><code>__proto__</code></li>
<li>prototype</li>
<li>effect of <code>new</code> on <code>this</code> inside the called function</li>
<li>effect of <code>new</code> on <code>prototype</code> and <code>__proto__</code></li>
</ol>
<p>每一个 JavaScript 对象都有 <code>__proto__</code>。其中一个目的是：当 <code>obj.property</code> 找不到，会找 <code>obj.__proto__.property</code>，然后 <code>obj.__proto__.__.proto__.property</code>。这就是原型继承。</p>
<p>另一个有用的信息是，所有的 JavaScript function 有一个 property 叫做 <code>prototype</code>。并且有一个 member 叫做 <code>constructor</code> 指向这个 function。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.constructor === Foo);</span><br></pre></td></tr></table></figure>
<p>现在再看下：<code>new</code> 对 <code>this</code> 的作用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newFoo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(newFoo.bar); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<p>大意是：<code>this</code> 会指向新创建的对象。原因是，<strong>在 Function 上使用 <code>new</code> 将 <code>prototype</code> 复制到新创建对象的 <code>__proto__</code></strong>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo.__proto__ === Foo.prototype); <span class="comment">// True</span></span><br></pre></td></tr></table></figure>
<p>以上。</p>
<p>现在看下： <code>__extends__</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">__.prototype = b.prototype;</span><br><span class="line">d.prototype = <span class="keyword">new</span> __();</span><br></pre></td></tr></table></figure>
<p>d.prototype.<strong>proto</strong> = __.prototype</p>
<p>-&gt; d.prototype = { <strong>proto</strong>: <strong>.prototype}<br>-&gt; d.prototype = { </strong>proto__: b.prototype }</p>
<p>等下，我们需要 d 的 prototype.constructor 保持原来的。</p>
<p>d.prototype.constructor = d;</p>
<p>注意：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || <span class="function"><span class="keyword">function</span>(<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b)</span><br><span class="line">        <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    d.prototype = b === <span class="literal">null</span> </span><br><span class="line">        ? <span class="built_in">Object</span>.create(b) </span><br><span class="line">        : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>多了一步判断。其中 <code>(__.prototype = b.prototype, new __())</code> 叫做逗号操作符，可以在一行运行多条语句。</p>
<p>其中，Object.create(null)：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个原型为null的空对象</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="literal">null</span>); <span class="comment">// o.__proto__ === undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);<span class="comment">// o.__proto__ === Object &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>弄懂上面的区别。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="extends"><a href="#extends" class="headerlink" title="__extends"></a>__extends</h2><figure class="highlight js"><table><tr><td class]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript Spec Version 1.8 - Other]]></title>
    <link href="http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Other/"/>
    <id>http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Other/</id>
    <published>2016-02-26T00:21:39.000Z</published>
    <updated>2016-02-26T00:27:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Type_Aliases"><a href="#Type_Aliases" class="headerlink" title="Type Aliases"></a><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#3.10" target="_blank" rel="external">Type Aliases</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type StringOrNumber = string | number;  </span><br><span class="line">type Text = string | &#123; text: string &#125;;  </span><br><span class="line">type NameLookup = Dictionary&lt;string, Person&gt;;  </span><br><span class="line">type ObjectStatics = <span class="keyword">typeof</span> <span class="built_in">Object</span>;  </span><br><span class="line">type Callback&lt;T&gt; = (data: T) =&gt; <span class="keyword">void</span>;  </span><br><span class="line">type Pair&lt;T&gt; = [T, T];  </span><br><span class="line">type Coordinates = Pair&lt;number&gt;;  </span><br><span class="line">type Tree&lt;T&gt; = T | &#123; left: Tree&lt;T&gt;, right: Tree&lt;T&gt; &#125;;</span><br></pre></td></tr></table></figure>
<p>Interface types have many similarities to type aliases for object type literals, but since interface types offer more capabilities they are generally preferred to type aliases. For example, the interface type</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Point &#123;  </span><br><span class="line">    x: number;  </span><br><span class="line">    y: number;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>could be written as the type alias</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Point = &#123;  </span><br><span class="line">    x: number;  </span><br><span class="line">    y: number;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>However, doing so means the following capabilities are lost:</p>
<ul>
<li>An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot. 可以用在 extend 和 implements 子句中</li>
<li>An interface can have multiple merged declarations, but a type alias for an object type literal cannot. interface 是 open-end，同名的会被 merge。 </li>
</ul>
<h2 id="Excess_Properties"><a href="#Excess_Properties" class="headerlink" title="Excess Properties"></a><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#3.11.5" target="_blank" rel="external"> Excess Properties</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface InputElement &#123;  </span><br><span class="line">    name: string;  </span><br><span class="line">    visible?: boolean;  </span><br><span class="line">    [x: string]: any;            <span class="comment">// Allow additional properties of any type  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> address: InputElement = &#123;  </span><br><span class="line">    name: <span class="string">"Address"</span>,  </span><br><span class="line">    visible: <span class="literal">true</span>,  </span><br><span class="line">    help: <span class="string">"Enter address here"</span>,  <span class="comment">// Allowed because of index signature  </span></span><br><span class="line">    shortcut: <span class="string">"Alt-A"</span>            <span class="comment">// Allowed because of index signature  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Type_Aliases"><a href="#Type_Aliases" class="headerlink" title="Type Aliases"></a><a href="https://github.com/Microsoft/TypeScript/b]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript Spec Version 1.8 - Classes]]></title>
    <link href="http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Classes/"/>
    <id>http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Classes/</id>
    <published>2016-02-25T23:54:14.000Z</published>
    <updated>2016-02-26T00:21:09.000Z</updated>
    <content type="html"><![CDATA[<p>本身，JavaScript practice has two very common design patterns: the module pattern and the class pattern.</p>
<p>简单来说，Roughly speaking, the module pattern uses closures to hide names and to encapsulate private data, while the class pattern uses prototype chains to implement many variations on object-oriented inheritance mechanisms. </p>
<p>module 模式是利用闭包。</p>
<p>class 模式用原型链来实现 OO 继承机制。</p>
<blockquote>
<p>但是注意，EC2015 引入了 module 机制和 module pattern 实现的原理不同，为了防止混淆，在 TypeScript 中，module pattern 对应的是 namespace。</p>
</blockquote>
<p><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#16-classes" target="_blank" rel="external">Classes</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    balance = <span class="number">0</span>;  </span><br><span class="line">    deposit(credit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的 JavaScript（TypeScript 的目标是生成 consistent，idiomatic 的 JavaScript 代码）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BankAccount = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">BankAccount</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    BankAccount.prototype.deposit = <span class="function"><span class="keyword">function</span>(<span class="params">credit</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="keyword">return</span> BankAccount;  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>OK，回过头看 <code>class BankAccount</code>，它做了：</p>
<ul>
<li>creates a variable named ‘BankAccount’</li>
<li>whose value is the constructor function for ‘BankAccount’ instances.</li>
<li>also creates an instance type of the same name. </li>
</ul>
<p>关于 instance type，如果用接口可以这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface BankAccount &#123;  </span><br><span class="line">    balance: number;  </span><br><span class="line">    deposit(credit: number): number;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we were to write out the function type declaration for the ‘BankAccount’ constructor variable, it would have the following form.</p>
<p>即，这是关于第一点，BankAccount 的值是一个 constructor 函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BankAccount: <span class="keyword">new</span>() =&gt; BankAccount;</span><br></pre></td></tr></table></figure>
<p>The function signature is prefixed with the keyword ‘new’ indicating that the ‘BankAccount’ function must be called as a constructor. It is possible for a function’s type to have both call and constructor signatures. For example, the type of the built-in JavaScript Date object includes both kinds of signatures.</p>
<p>在 constructor 里做些初始化：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    balance: number;  </span><br><span class="line">    constructor(initially: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance = initially;  </span><br><span class="line">    &#125;  </span><br><span class="line">    deposit(credit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简化版本：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    constructor(public balance: number) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    deposit(credit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The ‘public’ keyword denotes that the constructor parameter is to be retained as a field. </p>
<p>Public is the default accessibility for class members, but a programmer can also specify private or protected accessibility for a class member.</p>
<p>Section 8 provides additional information about classes.</p>
<p>继承。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckingAccount</span> <span class="keyword">extends</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    constructor(balance: number) &#123;  </span><br><span class="line">        <span class="keyword">super</span>(balance);  </span><br><span class="line">    &#125;  </span><br><span class="line">    writeCheck(debit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance -= debit;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的核心代码： In the emitted JavaScript code, the prototype of ‘CheckingAccount’ will chain to the prototype of ‘BankAccount’.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__extends(CheckingAccount, _super);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || <span class="function"><span class="keyword">function</span>(<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b)</span><br><span class="line">        <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>更多：</p>
<p>Since instance member variable initializers are equivalent to assignments to properties of this in the constructor, the example</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;  </span><br><span class="line">    public name: string;  </span><br><span class="line">    public address: string;  </span><br><span class="line">    public retired = <span class="literal">false</span>;  </span><br><span class="line">    public manager: Employee = <span class="literal">null</span>;  </span><br><span class="line">    public reports: Employee[] = [];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等价：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;  </span><br><span class="line">    public name: string;  </span><br><span class="line">    public address: string;  </span><br><span class="line">    public retired: boolean;  </span><br><span class="line">    public manager: Employee;  </span><br><span class="line">    public reports: Employee[];  </span><br><span class="line">    constructor() &#123;  </span><br><span class="line">        <span class="keyword">this</span>.retired = <span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">this</span>.manager = <span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">this</span>.reports = [];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多的见 <a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#8" target="_blank" rel="external">Classes</a></p>
<p>namespace：</p>
<h2 id="1-10_Namespaces"><a href="#1-10_Namespaces" class="headerlink" title="1.10 Namespaces"></a>1.10 Namespaces</h2><p>产生背景：</p>
<p>TypeScript enforces encapsulation of implementation in classes at design time (by restricting use of private and protected members), but cannot enforce encapsulation at runtime because all object properties are accessible at runtime. </p>
<p>JavaScript 怎么做到：</p>
<p>In JavaScript, a very common way to enforce encapsulation at runtime is to use the module pattern: encapsulate private fields and methods using closure variables.</p>
<p>其他好处：</p>
<p>The module pattern can also provide the ability to introduce namespaces, avoiding use of the global namespace for most software components.</p>
<p>在 JavaScript 是这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> key = generateSecretKey();  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">message</span>) </span>&#123;  </span><br><span class="line">        sendSecureMessage(message, key);  </span><br><span class="line">    &#125;  </span><br><span class="line">    exports.sendMessage = sendMessage;  </span><br><span class="line">&#125;)(MessageModule);</span><br></pre></td></tr></table></figure>
<p>在 TypeScript 这么做 </p>
<p>TypeScript namespaces provide a mechanism for succinctly expressing the module pattern. In TypeScript, programmers can combine the module pattern with the class pattern by nesting namespaces and classes within an outer namespace.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace M &#123;  </span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"hello"</span>;  </span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">M.f();  </span><br><span class="line">M.s;  <span class="comment">// Error, s is not exported</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>本身，JavaScript practice has two very common design patterns: the module pattern and the class pattern.</p>
<p>简单来说，Roughly speaking, the m]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript Spec Version 1.8 - Ambient Declarations (Object Types)]]></title>
    <link href="http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8/"/>
    <id>http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8/</id>
    <published>2016-02-25T23:32:36.000Z</published>
    <updated>2016-02-27T01:26:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Ambient_Declaration"><a href="#Ambient_Declaration" class="headerlink" title="Ambient Declaration"></a>Ambient Declaration</h2><p><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#11-ambient-declarations" target="_blank" rel="external">Ambient Declaration</a></p>
<p>An ambient declaration introduces a variable into a TypeScript scope, but has zero impact on the emitted JavaScript program. </p>
<p>引入一个变量，仅在 TypeScript 范围，不会生成 JavaScript 代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">var</span> <span class="built_in">document</span>;  </span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">"Hello"</span></span><br></pre></td></tr></table></figure>
<p>Section 1.3 provides a more extensive example of how a programmer can add type information for jQuery and other libraries.</p>
<h2 id="Object_Types"><a href="#Object_Types" class="headerlink" title="Object Types"></a>Object Types</h2><p><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#1.3" target="_blank" rel="external">1.3 Object Types</a></p>
<p>TypeScript programmers use object types to declare their expectations of object behavior. </p>
<p>适用 object types 声明对象的行为。</p>
<p>主要接着 ambient declaration，对 jQuery 的声明。</p>
<p>先了解下 object tyeps：</p>
<h3 id="object_type_literal"><a href="#object_type_literal" class="headerlink" title="object type literal"></a>object type literal</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MakePoint: () =&gt; &#123;  </span><br><span class="line">    x: number; y: number;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Friend &#123;  </span><br><span class="line">    name: string;  </span><br><span class="line">    favoriteColor?: string;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">friend: Friend</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> name = friend.name;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(&#123; name: <span class="string">"Fred"</span> &#125;);  <span class="comment">// Ok  </span></span><br><span class="line">add(&#123; favoriteColor: <span class="string">"blue"</span> &#125;);  <span class="comment">// Error, name required  </span></span><br><span class="line">add(&#123; name: <span class="string">"Jill"</span>, favoriteColor: <span class="string">"green"</span> &#125;);  <span class="comment">// Ok</span></span><br></pre></td></tr></table></figure>
<h3 id="jQuery_Ambient_Declaration"><a href="#jQuery_Ambient_Declaration" class="headerlink" title="jQuery Ambient Declaration"></a>jQuery Ambient Declaration</h3><p>结果：</p>
<ul>
<li><code>$</code> 有 methods，fields</li>
<li><code>$</code> 本身也是 function</li>
<li><code>$</code> 作为 function 还可以被 overload</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface JQuery &#123;  </span><br><span class="line">    text(content: string);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">interface JQueryStatic &#123;  </span><br><span class="line">    get(url: string, callback: (data: string) =&gt; any);     </span><br><span class="line">    (query: string): JQuery;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">var</span> $: JQueryStatic;</span><br><span class="line"></span><br><span class="line">$.get(<span class="string">"http://mysite.org/divContent"</span>,  </span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">data: string</span>) </span>&#123;  </span><br><span class="line">          $(<span class="string">"div"</span>).text(data);  </span><br><span class="line">      &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>The ‘JQueryStatic’ interface references another interface: ‘JQuery’. </p>
<p>Finally, the ‘JQueryStatic’ interface contains a bare function signature</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(query: string): JQuery;</span><br></pre></td></tr></table></figure>
<p>The bare signature indicates that instances of the interface are callable. 接口的实例是可以被调用的。</p>
<p>This example illustrates that TypeScript function types are just special cases of TypeScript object types. Specifically, function types are object types that contain one or more call signatures. Function types 是 object types 的一种，即包含一个以上的 call signature。</p>
<p>Function types 也可以用 literal 表示。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f: &#123; (): string; &#125;;  </span><br><span class="line"><span class="keyword">var</span> sameType: () =&gt; string = f;     <span class="comment">// Ok  </span></span><br><span class="line"><span class="keyword">var</span> nope: () =&gt; number = sameType;  <span class="comment">// Error: type mismatch</span></span><br></pre></td></tr></table></figure>
<p>重载。To specify multiple behaviors, TypeScript supports overloading of function signatures in object types. </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface JQueryStatic &#123;  </span><br><span class="line">    get(url: string, callback: (data: string) =&gt; any);     </span><br><span class="line">    (query: string): JQuery;</span><br><span class="line">    (ready: () =&gt; any): any; <span class="comment">// overload</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Ambient_Declaration"><a href="#Ambient_Declaration" class="headerlink" title="Ambient Declaration"></a>Ambient Declaration</h2><p><a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Alternative to iFrames with HTML5]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Alternative-to-iFrames-with-HTML5/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Alternative-to-iFrames-with-HTML5/</id>
    <published>2016-02-25T11:31:54.000Z</published>
    <updated>2016-02-25T11:33:26.000Z</updated>
    <content type="html"><![CDATA[<p>不知道 Facebook 一个页面是怎么放多个团队的页面的。</p>
<p>可以找时间思考下。</p>
<p>参考下：<a href="http://stackoverflow.com/questions/8702704/alternative-to-iframes-with-html5" target="_blank" rel="external">Alternative to iFrames with HTML5</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不知道 Facebook 一个页面是怎么放多个团队的页面的。</p>
<p>可以找时间思考下。</p>
<p>参考下：<a href="http://stackoverflow.com/questions/8702704/alternative-to-iframes-wit]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[再读 TypeScript Handbook 2016年02月25日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Read-Again-The-TypeScript-Handbook-2016-02-25/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Read-Again-The-TypeScript-Handbook-2016-02-25/</id>
    <published>2016-02-25T09:30:23.000Z</published>
    <updated>2016-02-26T00:21:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Basic_Types"><a href="#Basic_Types" class="headerlink" title="Basic Types"></a>Basic Types</h2><p>Array</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list:number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list:<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>Function Types</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">  (source: string, subString: string): boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Array Types - Array types have an ‘index’ type that describes the types allowed to index the object, along with the corresponding return type for accessing the index.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface StringArray &#123;</span><br><span class="line">  [index: number]: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br></pre></td></tr></table></figure>
<p>There are two types of supported index types: string and number. It is possible to support both types of index, with the restriction that the type returned from the numeric index must be a subtype of the type returned from the string index.</p>
<p>While index signatures are a powerful way to describe the array and ‘dictionary’ pattern, they also enforce that all properties match their return type. In this example, the property does not match the more general index, and the type-checker gives an error:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Dictionary &#123;</span><br><span class="line">  [index: string]: string;</span><br><span class="line">  length: number;    <span class="comment">// error, the type of 'length' is not a subtype of the indexer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Class Types - Implementing an interface</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span>  </span>&#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor(h: number, m: number) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    private name:string;</span><br><span class="line">    constructor(theName: string) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    move(meters: number) &#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">" moved "</span> + meters + <span class="string">"m."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Parameter properties - 对上的简化写法，The properties let you can create and initialize a member in one step.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    constructor(private name: string) &#123; &#125;</span><br><span class="line">    move(meters: number) &#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">" moved "</span> + meters + <span class="string">"m."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Accessors - TypeScript supports getters/setters as a way of intercepting accesses to a member of an object.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passcode = <span class="string">"secret passcode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    private _fullName: string;</span><br><span class="line"></span><br><span class="line">    get fullName(): string &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    set fullName(newName: string) &#123;</span><br><span class="line">        <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"secret passcode"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Basic_Types"><a href="#Basic_Types" class="headerlink" title="Basic Types"></a>Basic Types</h2><p>Array</p>
<figure class="highlight]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 的一些高级语法和使用场景]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Some-Advanced-Syntax-in-TypeScript/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Some-Advanced-Syntax-in-TypeScript/</id>
    <published>2016-02-25T08:49:34.000Z</published>
    <updated>2016-02-25T09:29:31.000Z</updated>
    <content type="html"><![CDATA[<p>直接从 <a href="https://github.com/Microsoft/TypeScript/" target="_blank" rel="external">Microsoft/TypeScript</a> 和 <a href="https://github.com/angular/angular" target="_blank" rel="external">angular</a> 找。也会从 RxJS 中找。</p>
<h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namespace ts.formatting &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface TextRange &#123;</span><br><span class="line">    pos: number;</span><br><span class="line">    end: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface TextRangeWithKind extends TextRange &#123;</span><br><span class="line">    kind: SyntaxKind;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="generics__u548C_u58F0_u660E"><a href="#generics__u548C_u58F0_u660E" class="headerlink" title="generics 和声明"></a>generics 和声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="built_in">Map</span>&lt;T&gt; &#123;</span><br><span class="line">    [index: string]: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<code>[index: string]</code> 这种声明 Dictionary 的方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface SymbolTable &#123;</span><br><span class="line">    [index: string]: <span class="built_in">Symbol</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u9AD8_u7EA7_u7C7B_u578B"><a href="#u9AD8_u7EA7_u7C7B_u578B" class="headerlink" title="高级类型"></a>高级类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type Path = string &amp; &#123; __pathBrand: any &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="enums"><a href="#enums" class="headerlink" title="enums"></a>enums</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum NodeFlags &#123;</span><br><span class="line">    None =               <span class="number">0</span>,</span><br><span class="line">    Export =             <span class="number">1</span> &lt;&lt; <span class="number">0</span>,  <span class="comment">// Declarations</span></span><br><span class="line">    Ambient =            <span class="number">1</span> &lt;&lt; <span class="number">1</span>,  <span class="comment">// Declarations</span></span><br><span class="line">    Public =             <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// Property/Method</span></span><br><span class="line">    Private =            <span class="number">1</span> &lt;&lt; <span class="number">3</span>,  <span class="comment">// Property/Method</span></span><br><span class="line">    Protected =          <span class="number">1</span> &lt;&lt; <span class="number">4</span>,  <span class="comment">// Property/Method</span></span><br><span class="line"></span><br><span class="line">    Modifier = Export | Ambient | Public | Private | Protected | Static | Abstract | Default | Async,</span><br><span class="line">    AccessibilityModifier = Public | Private | Protected,</span><br><span class="line">    BlockScoped = Let | Const,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和不加 <code>const</code> 的区别：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> enum ExitStatus &#123;</span><br><span class="line">    Success = <span class="number">0</span>,</span><br><span class="line">    DiagnosticsPresent_OutputsSkipped = <span class="number">1</span>,</span><br><span class="line">    DiagnosticsPresent_OutputsGenerated = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type EntityName = Identifier | QualifiedName;</span><br></pre></td></tr></table></figure>
<h2 id="u7B2C_u4E00_u770B_u5230_toString"><a href="#u7B2C_u4E00_u770B_u5230_toString" class="headerlink" title="第一看到 toString"></a>第一看到 toString</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path='references.ts' /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @internal */</span></span><br><span class="line">namespace ts.formatting &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule</span> </span>&#123;</span><br><span class="line">        constructor(</span><br><span class="line">            public Descriptor: RuleDescriptor,</span><br><span class="line">            public Operation: RuleOperation,</span><br><span class="line">            public Flag: RuleFlags = RuleFlags.None) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public toString() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"[desc="</span> + <span class="keyword">this</span>.Descriptor + <span class="string">","</span> +</span><br><span class="line">                <span class="string">"operation="</span> + <span class="keyword">this</span>.Operation + <span class="string">","</span> +</span><br><span class="line">                <span class="string">"flag="</span> + <span class="keyword">this</span>.Flag + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">CoreOperators</span>&lt;<span class="title">T</span>&gt;  </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>直接从 <a href="https://github.com/Microsoft/TypeScript/" target="_blank" rel="external">Microsoft/TypeScript</a> 和 <a href="https://github.]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[准备学习 TypeScript 语法帮助理解 React 接口]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Prepare-to-Know-TypeScript-and-React-Interface/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Prepare-to-Know-TypeScript-and-React-Interface/</id>
    <published>2016-02-25T00:16:20.000Z</published>
    <updated>2016-02-25T00:26:23.000Z</updated>
    <content type="html"><![CDATA[<p>题外话，或者说是引子。因为 React 我对前端和程序产生了扩散性的兴趣，具体不在此言。尝试阅读 React 源码也有 2 次，从不同的角度。效率和方法上都不会完美，不过每次都有收获，不断扩充对前端的认识。</p>
<p>这次我希望了解 React 的 interface。ES6 才引入 class 的概念，让我一个从 C#/Java 后台开发者开发 JavaScript 开始有设计感（沿用后台语言开发的思维）。</p>
<blockquote>
<p>当然，ES5 以及去年函数式编程的推广也让我摄入了些非 OO 的知识。不过，我对 lambda 表达式肯定没有 OO 熟练。所以函数式上，我目前只会编写些 utility 来处理 Collection。让可读性增强。</p>
</blockquote>
<p>这次我是第 3 次尝试阅读 React 源码。并使用 TypeScript 写 interface，第一步不具体实现。</p>
<p>我希望能够学习 TypeScript 的语法和摸清 React 的设计架构。</p>
<p>TypeScript 语法我准备参照目前最火的 TypeScript 开源项目：<a href="https://github.com/Microsoft/TypeScript/" target="_blank" rel="external">Microsoft/TypeScript</a> 和 <a href="https://github.com/angular/angular" target="_blank" rel="external">angular</a>。前者历时更长，后者更新。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>题外话，或者说是引子。因为 React 我对前端和程序产生了扩散性的兴趣，具体不在此言。尝试阅读 React 源码也有 2 次，从不同的角度。效率和方法上都不会完美，不过每次都有收获，不断扩充对前端的认识。</p>
<p>这次我希望了解 React 的 interface。]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 知识点 2016年02月24日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/24/Java-Knowledge-Points-20160224/"/>
    <id>http://shane.hsi.rocks/2016/02/24/Java-Knowledge-Points-20160224/</id>
    <published>2016-02-24T03:30:33.000Z</published>
    <updated>2016-02-24T06:29:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="MethodInvokingFactoryBean"><a href="#MethodInvokingFactoryBean" class="headerlink" title="MethodInvokingFactoryBean"></a>MethodInvokingFactoryBean</h2><p>从配置文件开始看。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mnsInvokerBean"</span> <span class="attribute">class</span>=<span class="value">"com.*.*.MnsInvoker"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span> <span class="attribute">ref</span>=<span class="value">"mnsInvokerBean"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>registerHttpService<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"arguments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;tesla_appkey&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;jetty.port&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>主要是这个 <code>MethodInvokingFactoryBean</code>。</p>
<p>参考：<a href="http://blog.csdn.net/kongxx/article/details/6011441" target="_blank" rel="external">Spring实战之org.springframework.beans.factory.config.MethodInvokingFactoryBean</a>。</p>
<p>讲解的很直观。</p>
<p>在用spring管理我们的类的时候有时候希望有些属性值是</p>
<ul>
<li>来源于一些配置文件，</li>
<li>系统属性，</li>
<li>或者一些方法调用的结果</li>
</ul>
<p>对于前两种使用方式可以使用spring的PropertyPlaceholderConfigurer类来注入，对于后一种则可以使用org.springframework.beans.factory.config.MethodInvokingFactoryBean类来生成需要注入的bean的属性。</p>
<p>通过MethodInvokingFactory Bean类，可注入方法返回值。 MethodInvokingFactoryBean用来 <strong>获得某个方法的返回值</strong>，该方法既可以是静态方法，也可以是实例方法。该方法的返回值 <strong>可以注入bean实例属性</strong>，<strong>也可以直接定义成bean实例</strong>。</p>
<p>另参考：<a href="http://blog.sina.com.cn/s/blog_72ef7bea0102wa0v.html" target="_blank" rel="external">Spring Boot Hello MethodInvokingFactoryBean and MethodInvokingBean</a>。</p>
<h2 id="bean__u914D_u7F6E_u4E4B_init-method__u548C_lazy-init_u3002"><a href="#bean__u914D_u7F6E_u4E4B_init-method__u548C_lazy-init_u3002" class="headerlink" title="bean 配置之 init-method 和 lazy-init。"></a>bean 配置之 init-method 和 lazy-init。</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mtConfigClient"</span> <span class="attribute">class</span>=<span class="value">"com.*.*.config.MtConfigClient"</span> <span class="attribute">init-method</span>=<span class="value">"init"</span> <span class="attribute">lazy-init</span>=<span class="value">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关于 <code>init-method</code> 和 <code>lazy-init</code>。</p>
<p>其中关于 <code>init-method</code>，涉及到的概念是 <a href="http://sexycoding.iteye.com/blog/1046775" target="_blank" rel="external">Spring bean 的生命周期</a>。Spring 允许 Bean 在初始化完成后以及销毁前执行特定的操作。</p>
<p>常用的三种指定特定操作的方法：</p>
<ul>
<li>通过实现InitializingBean/DisposableBean 接口来定制初始化之后/销毁之前的操作方法；</li>
<li>通过 <bean> 元素的 init-method/destroy-method属性指定初始化之后 /销毁之前调用的操作方法；</bean></li>
<li>在指定方法上加上@PostConstruct或@PreDestroy注解来制定该方法是在初始化之后还是销毁之前调用。</li>
</ul>
<p>这几种方法的先后顺序为（参考：<a href="http://blog.csdn.net/caihaijiang/article/details/8629725" target="_blank" rel="external">Spring容器中的Bean几种初始化方法和销毁方法的先后顺序</a>)：</p>
<p><strong>Bean在实例化的过程中：Constructor &gt; @PostConstruct &gt;InitializingBean &gt; init-method</strong></p>
<p><strong>Bean在销毁的过程中：@PreDestroy &gt; DisposableBean &gt; destroy-method</strong></p>
<p>其中关于 <code>lazy-init</code>，默认是 false。可以在 applicationContext.xml 里配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span> &gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span> =<span class="value">"org.xxxx.bean"</span> &gt;</span>   </span><br><span class="line">      ......</span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个应该只在开发环境中可以使用。</p>
<blockquote>
<p>ApplicationContext实现的默认行为就是在启动时将所有singleton bean提前进行实例化。提前实例化意味着作为初始化过程的一部分，ApplicationContext实例会创建并配置所有的singleton bean。通常情况下这是件好事，因为这样在配置中的任何错误就会即刻被发现（否则的话可能要花几个小时甚至几天）。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="MethodInvokingFactoryBean"><a href="#MethodInvokingFactoryBean" class="headerlink" title="MethodInvokingFactoryBean"></a>MethodInvok]]>
    </summary>
    
  </entry>
  
</feed>
