<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-06-08T03:10:35.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Building command line tools with Node.js]]></title>
    <link href="http://shane.hsi.rocks/2016/06/08/Building-command-line-tools-with-Node-js/"/>
    <id>http://shane.hsi.rocks/2016/06/08/Building-command-line-tools-with-Node-js/</id>
    <published>2016-06-08T02:43:56.000Z</published>
    <updated>2016-06-08T03:10:35.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>packaging new shell commands with npm</li>
<li>parsing command line options</li>
<li>reading text and passwords from stdin</li>
<li>dodging callbacks with ES6 generators</li>
<li>error output and codes</li>
<li>coloring terminal output</li>
<li>rendering an ASCII progress bar</li>
</ul>
<h2 id="Packaging_shell_commands"><a href="#Packaging_shell_commands" class="headerlink" title="Packaging shell commands"></a>Packaging shell commands</h2><p>初始化一个 node 项目：</p>
<p><code>npm init</code></p>
<p>index.js：</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ #!/usr/bin/env node</span></span><br><span class="line"><span class="addition">+ console.log('Hello, world!');</span></span><br></pre></td></tr></table></figure>
<p>package.json</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  "author": "Tim Pettersen",</span><br><span class="line">  "license": "Apache-2.0",</span><br><span class="line"><span class="addition">+ "bin": &#123;</span></span><br><span class="line"><span class="addition">+   "snippet": "./index.js"</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>安装项目到全局，可以测试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g&#10;$ snippet&#10;Hello, world!</span><br></pre></td></tr></table></figure>
<p>查看命令的路径：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ which snippet&#10;/usr/local/bin/snippet&#10;$ readlink /usr/local/bin/snippet&#10;../lib/node_modules/bitbucket-snippet/index.js</span><br></pre></td></tr></table></figure>
<p>方便开发：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm link&#10;/usr/local/bin/snippet -&#62; /usr/local/lib/node_modules/bitbucket-snippet/index.js&#10;/usr/local/lib/node_modules/bitbucket-snippet -&#62; /Users/kannonboy/src/bitbucket-snippet</span><br></pre></td></tr></table></figure>
<p>最后 publish</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<h2 id="Parsing_command_line_options"><a href="#Parsing_command_line_options" class="headerlink" title="Parsing command line options"></a>Parsing command line options</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save commander</span><br></pre></td></tr></table></figure>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line"><span class="deletion">- console.log('Hello, world!');</span></span><br><span class="line"><span class="addition">+ var program = require('commander');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ program</span></span><br><span class="line"><span class="addition">+  .arguments('&lt;file&gt;')</span></span><br><span class="line"><span class="addition">+  .option('-u, --username &lt;username&gt;', 'The user to authenticate as')</span></span><br><span class="line"><span class="addition">+  .option('-p, --password &lt;password&gt;', 'The user\'s password')</span></span><br><span class="line"><span class="addition">+  .action(function(file) &#123;</span></span><br><span class="line"><span class="addition">+    console.log('user: %s pass: %s file: %s',</span></span><br><span class="line"><span class="addition">+        program.username, program.password, file);</span></span><br><span class="line"><span class="addition">+  &#125;)</span></span><br><span class="line"><span class="addition">+  .parse(process.argv);</span></span><br></pre></td></tr></table></figure>
<p>quick test：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ snippet -u kannonboy -p correcthorsebatterystaple my_awesome_file&#10;user: kannonboy pass: correcthorsebatterystaple file: my_awesome_file</span><br></pre></td></tr></table></figure>
<p>自动生成一些 help 信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ snippet --help&#10;&#10;  Usage: snippet [options] &#60;file&#62;&#10;&#10;  Options:&#10;&#10;    -h, --help                 output usage information&#10;    -u, --username &#60;username&#62;  The user to authenticate as&#10;    -p, --password &#60;password&#62;  The user\&#39;s password</span><br></pre></td></tr></table></figure>
<h2 id="Prompting_for_user_input"><a href="#Prompting_for_user_input" class="headerlink" title="Prompting for user input"></a>Prompting for user input</h2><p>安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save co co-prompt</span><br></pre></td></tr></table></figure>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ var co = require('co');</span></span><br><span class="line"><span class="addition">+ var prompt = require('co-prompt');</span></span><br><span class="line">  var program = require('commander');</span><br><span class="line">...</span><br><span class="line">  .option('-u, --username &lt;username&gt;', 'The user to authenticate as')</span><br><span class="line">  .option('-p, --password &lt;password&gt;', 'The user\'s password')</span><br><span class="line">  .action(function(file) &#123;</span><br><span class="line"><span class="addition">+    co(function *() &#123;</span></span><br><span class="line"><span class="addition">+      var username = yield prompt('username: ');</span></span><br><span class="line"><span class="addition">+      var password = yield prompt.password('password: ');</span></span><br><span class="line">       console.log('user: %s pass: %s file: %s',</span><br><span class="line"><span class="deletion">-          program.username, program.password, file);</span></span><br><span class="line"><span class="addition">+          username, password, file);</span></span><br><span class="line"><span class="addition">+    &#125;);</span></span><br><span class="line">  &#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>quick test：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ snippet my_awesome_file&#10;username: kannonboy&#10;password: *************************&#10;user: kannonboy pass: correcthorsebatterystaple file: my_awesome_file</span><br></pre></td></tr></table></figure>
<h2 id="POSTing_the_snippet"><a href="#POSTing_the_snippet" class="headerlink" title="POSTing the snippet"></a>POSTing the snippet</h2><h2 id="Handling_error_cases"><a href="#Handling_error_cases" class="headerlink" title="Handling error cases"></a>Handling error cases</h2><p>So we’re handling the happy case OK, but what if the upload fails or the user enters the wrong credentials? The UNIX-y way to handle it would be to write an message to standard error and exit with a non-zero code, so let’s do that.</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  request</span><br><span class="line">    .post('https://api.bitbucket.org/2.0/snippets/')</span><br><span class="line">    .auth(username, password)</span><br><span class="line">    .attach('file', filename, file)</span><br><span class="line">    .set('Accept', 'application/json')</span><br><span class="line">    .end(function (err, res) &#123;</span><br><span class="line"><span class="addition">+     if (!err &amp;&amp; res.ok) &#123;</span></span><br><span class="line">        var link = res.body.links.html.href;</span><br><span class="line">        console.log('Snippet created: %s', link);</span><br><span class="line"><span class="addition">+       process.exit(0);</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+     var errorMessage;</span></span><br><span class="line"><span class="addition">+     if (res &amp;&amp; res.status === 401) &#123;</span></span><br><span class="line"><span class="addition">+       errorMessage = "Authentication failed! Bad username/password?";</span></span><br><span class="line"><span class="addition">+     &#125; else if (err) &#123;</span></span><br><span class="line"><span class="addition">+       errorMessage = err;</span></span><br><span class="line"><span class="addition">+     &#125; else &#123;</span></span><br><span class="line"><span class="addition">+       errorMessage = res.text;</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+     console.error(errorMessage);</span></span><br><span class="line"><span class="addition">+     process.exit(1);</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Adding_a_progress_bar"><a href="#Adding_a_progress_bar" class="headerlink" title="Adding a progress bar"></a>Adding a progress bar</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save progress</span><br></pre></td></tr></table></figure>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ var fs = require('fs');</span></span><br><span class="line"><span class="addition">+ var ProgressBar = require('progress');</span></span><br><span class="line">  var chalk = require('chalk');</span><br><span class="line">  var request = require('superagent');</span><br><span class="line">...</span><br><span class="line">  var username = yield prompt('username: ');</span><br><span class="line">  var password = yield prompt.password('password: ');</span><br><span class="line"></span><br><span class="line"><span class="addition">+ var fileSize = fs.statSync(file).size;</span></span><br><span class="line"><span class="addition">+ var fileStream = fs.createReadStream(file);</span></span><br><span class="line"><span class="addition">+ var barOpts = &#123;</span></span><br><span class="line"><span class="addition">+   width: 20,</span></span><br><span class="line"><span class="addition">+   total: fileSize,</span></span><br><span class="line"><span class="addition">+   clear: true</span></span><br><span class="line"><span class="addition">+ &#125;;</span></span><br><span class="line"><span class="addition">+ var bar = new ProgressBar(' uploading [:bar] :percent :etas', barOpts);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ fileStream.on('data', function (chunk) &#123;</span></span><br><span class="line"><span class="addition">+   bar.tick(chunk.length);</span></span><br><span class="line"><span class="addition">+ &#125;);</span></span><br><span class="line"></span><br><span class="line">  request</span><br><span class="line">    .post('https://api.bitbucket.org/2.0/snippets/')</span><br><span class="line">    .auth(username, password)</span><br><span class="line"><span class="deletion">-   .attach('file', file)</span></span><br><span class="line"><span class="addition">+   .attach('file', fileStream)</span></span><br><span class="line">    .set('Accept', 'application/json')</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We’ve barely scraped the surface of what’s possible with command line tooling in node. As per Atwood’s Law, there are npm packages for elegantly handling standard input, managing parallel tasks, watching files, globbing, compressing, ssh, git, and almost everything else you did with Bash. Plus, there are nice APIs for forking child processes if you need to fall back on another shell script or command that you can’t find a decent JavaScript implementation of.<br>The source code for the example we built above is liberally licensed and available on Bitbucket and, of course, published to npm. I’ve also implemented a couple of features that aren’t shown here, like OAuth, so you don’t have to keep typing in your username and password. You can start using it yourself with a simple:</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>packaging new shell commands with npm</li>
<li>parsing command line options</li>
<li>reading text and passwords from stdin</li>
<li]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Communications between Objects]]></title>
    <link href="http://shane.hsi.rocks/2016/06/02/Communications-between-Objects/"/>
    <id>http://shane.hsi.rocks/2016/06/02/Communications-between-Objects/</id>
    <published>2016-06-02T09:41:43.000Z</published>
    <updated>2016-06-02T09:58:04.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cnblogs.com/netfocus/archive/2012/02/12/2347895.html" target="_blank" rel="external">http://www.cnblogs.com/netfocus/archive/2012/02/12/2347895.html</a></p>
<p>经典的DDD</p>
<p>如果一个领域概念是一个跨多个聚合的动作，比如转帐，那么就应该用领域服务来实现这样的业务概念。</p>
<p>领域服务的输入和输出参数都是聚合根，领域服务内部按照业务逻辑规定的执行顺序，按照面向过程的方式，逐个调用相关聚合根的相关方法完成整个业务操作。</p>
<p>这种方式的优点是：1）清晰的表达和封装了业务逻辑；2）代码清晰，容易理解，代码可读性强；</p>
<p>缺点：1）基本的OO思想告诉我们，对象与对象之间应该是通过发送消息和接收消息的方式来通信的。</p>
<p>第一种：是被动的被一个第三方协调者服务对象来统一协调，这其实是一种面向过程的思维，而非基于消息通信的面向对象思维；</p>
<p>2）这种通过领域服务的方式只强调了对象的个体行为（即对象只有改变自己状态的行为），而没有注重对象之间的交互行为，对象应该还有能力发送消息给其他对象或者响应其他对象发送的消息；</p>
<p>那么为了能让对象之间有交互行为，能相互发送消息和接受消息，该如何做呢？一般来说有两种方法：1）方法调用，A对象调用B对象的方法，这种方法最常用最直接，但是缺点是会导致A依赖于B。这个问题我们往往会通过面向接口编程在一定程度上消除这种依赖关系；2）事件消息模式，生产者-消费者模式，即采用触发事件响应事件的模式；通过这种方式，A对象就不是直接调用B对象的方法了，而是触发一个事件，然后B对象去响应这个事件，或者如果采用消息总线的方式的话，就是A对象通知消息总线发布某个事件，然后消息总线发布这个事件，然后B对象响应这个事件。通过这样的通信方式，巧妙的将A，B两个对象的关系进行了解耦，本来A直接依赖B（A-&gt;B）的情况变成了A与B相互独立，变成了这种方式：A-&gt;消息&lt;-B。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://www.cnblogs.com/netfocus/archive/2012/02/12/2347895.html" target="_blank" rel="external">http://www.cnblogs.com/netfoc]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Locally test your npm modules without publishing them to npmjs.org
]]></title>
    <link href="http://shane.hsi.rocks/2016/05/31/Locally-test-your-npm-modules-without-publishing-them-to-npmjs-org/"/>
    <id>http://shane.hsi.rocks/2016/05/31/Locally-test-your-npm-modules-without-publishing-them-to-npmjs-org/</id>
    <published>2016-05-31T10:22:53.000Z</published>
    <updated>2016-05-31T10:23:46.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://podefr.tumblr.com/post/30488475488/locally-test-your-npm-modules-without-publishing" target="_blank" rel="external">link</a></p>
<p><code>npm pack</code></p>
<p><code>npm install ../path/to/your/npm/packagename-version.tgz</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://podefr.tumblr.com/post/30488475488/locally-test-your-npm-modules-without-publishing" target="_blank" rel="external">link<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Neos CMS Goes for a Full UI Rewrite with React and Redux]]></title>
    <link href="http://shane.hsi.rocks/2016/05/27/Neos-CMS-Goes-for-a-Full-UI-Rewrite-with-React-and-Redux/"/>
    <id>http://shane.hsi.rocks/2016/05/27/Neos-CMS-Goes-for-a-Full-UI-Rewrite-with-React-and-Redux/</id>
    <published>2016-05-27T08:42:39.000Z</published>
    <updated>2016-05-27T09:41:24.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://dimaip.github.io/2016/03/13/neos-react-redux-rewrite/" target="_blank" rel="external">http://dimaip.github.io/2016/03/13/neos-react-redux-rewrite/</a></p>

<p>The AddNodeModal dialog that we are going to implement</p>
<p>通过这个功能，我们来看下它们是怎么组织代码。</p>
<p>Our task would be to create a dialog for creating nodes</p>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>The main reason for the switch to this new stack was the desire to give more predictability and integrity to the UI. You see, our case is slightly complicated by the fact that we have the same data distributed across multiple places: the navigation tree, inline editing etc. Before we did not have a unified data model, and all of this modules functioned independently, carefully glued together by some state syncing code. Yes, that was kind of a nightmare. That is why here from the start we for having all data clearly normalised and stored in the state. But that includes not only the content data, but also the state of the UI itself: all trees, panels, user preferences and so on now have a dedicated place in the application state.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://dimaip.github.io/2016/03/13/neos-react-redux-rewrite/" target="_blank" rel="external">http://dimaip.github.io/2016/03/]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Study MobX]]></title>
    <link href="http://shane.hsi.rocks/2016/05/26/Study-MobX/"/>
    <id>http://shane.hsi.rocks/2016/05/26/Study-MobX/</id>
    <published>2016-05-26T07:15:32.000Z</published>
    <updated>2016-05-27T08:18:45.000Z</updated>
    <content type="html"><![CDATA[<p>MobX 是一个新的框架，主打 mutable。哈哈。我是来调研 API 设计的。具体实现暂时不看。</p>
<blockquote>
<p>注：Redux 提供的功能是在是太简陋了。</p>
</blockquote>
<p>Everything that can be derived from the application state, should be derived. Automatically.</p>
<p>就是不要通过 props 传递，自动的</p>
<img src="/2016/05/26/Study-MobX/flow.png" alt="flow.png" title="">
<p>React renders the application state by providing mechanisms to translate it into a tree of renderable components.</p>
<p>MobX provides the mechanism to store and update the application state that React then uses.</p>
<p>上面一句话详细说是：</p>
<p>MobX provides mechanisms to optimally synchronize application state with your React components by using a reactive virtual dependency state graph that is only updated when strictly needed and is never stale.</p>
<p>使用一个 reactive 的虚拟 state graph 的机制来优化地同步应用状态和 React 组件。 只在严格需要的时候更新，并且不会 stale。</p>
<h2 id="Core_concepts"><a href="#Core_concepts" class="headerlink" title="Core concepts"></a>Core concepts</h2><h3 id="Observable_state"><a href="#Observable_state" class="headerlink" title="Observable state"></a>Observable state</h3><p>MobX adds observable capabilities to existing data structures like objects, arrays and class instances.</p>
<p>MobX 给存在的 data structures（比如 objects，arrays，和 class instances） 增加了 observable 的功能，</p>
<p><strong>API：</strong></p>
<p>This can simply be done by annotating your class properties with the <a href="http://mobxjs.github.io/mobx/refguide/observable-decorator.html" target="_blank" rel="external">@observable</a> decorator (ES.Next), or by invoking the <a href="http://mobxjs.github.io/mobx/refguide/observable.html" target="_blank" rel="external"><code>observable</code></a> or <a href="http://mobxjs.github.io/mobx/refguide/extend-observable.html" target="_blank" rel="external"><code>extendObservable</code></a> functions (ES5). See <a href="https://github.com/mobxjs/mobx/wiki/Language-Support" target="_blank" rel="external">Language support</a> for language-specific examples.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    id = <span class="built_in">Math</span>.random();</span><br><span class="line">    @observable title = <span class="string">""</span>;</span><br><span class="line">    @observable finished = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using <code>@observable</code> is like turning a value into a spreadsheet cell. But unlike spreadsheets, these values can be not just primitive values, but references, objects and arrays as well. You can even <a href="http://mobxjs.github.io/mobx/refguide/extending.html" target="_blank" rel="external">define your own</a> observable data sources.</p>
<p>speadsheets 就是 reactive 编程了。</p>
<p>我想到了一点，这个的确挺不清晰的啊。都是有东西来通知。自动通知。</p>
<h3 id="Computed_values"><a href="#Computed_values" class="headerlink" title="Computed values"></a>Computed values</h3><p>With MobX you can define values that will be derived automatically when relevant data is modified. By using the <a href="http://mobxjs.github.io/mobx/refguide/computed-decorator.html" target="_blank" rel="external"><code>@computed</code></a> decorator or by using parameterless functions as property values in <code>extendObservable</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> </span>&#123;</span><br><span class="line">    @observable todos = [];</span><br><span class="line">    @computed get unfinishedTodoCount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(todo =&gt; !todo.finished).length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Reactions"><a href="#Reactions" class="headerlink" title="Reactions"></a>Reactions</h3><p>Reactions are similar to a computed value, but instead of producing a new value, a reaction produces a side effect for things like printing to the console, making network requests, incrementally updating the React component tree to patch the DOM, etc.<br>In short, reactions bridge <a href="https://en.wikipedia.org/wiki/Reactive_programming" target="_blank" rel="external">reactive</a> and <a href="https://en.wikipedia.org/wiki/Imperative_programming" target="_blank" rel="external">imperative</a> programming.</p>
<p>和 computed value 类似，但是它不是为了生成一个新的值，而是产生一个 side effect，比如：打印到 console，请求网络，逐步更新 React Component tree 来 patch DOM。</p>
<p>简而言之，reactions 是来桥接 reactive 和 imperative。</p>
<p>If you are using React, you can turn your (stateless function) components into reactive components by simply adding the <a href="http://mobxjs.github.io/mobx/refguide/observer-component.html" target="_blank" rel="external"><code>@observer</code></a> decorator from the <code>mobx-react</code> package onto them.</p>
<p><code>observer</code> turns React (function) components into derivations of the data they render.</p>
<p><code>observer</code> 将 React 组件变成他们需要 render 的 data 的起源。</p>
<p>When using MobX there are no smart or dumb components.</p>
<p>All components render smartly but are defined in a dumb manner.</p>
<p>所有的组件都是 smartly 的 render 的，但是写法是 dumb 的。（因为都是通过 observable）。</p>
<p>MobX will simply make sure the components are always re-rendered whenever needed, but also no more than that. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MobX 是一个新的框架，主打 mutable。哈哈。我是来调研 API 设计的。具体实现暂时不看。</p>
<blockquote>
<p>注：Redux 提供的功能是在是太简陋了。</p>
</blockquote>
<p>Everything that can be ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Building Fast & Resilient Web Applications]]></title>
    <link href="http://shane.hsi.rocks/2016/05/21/Building-Fast-Resilient-Web-Applications/"/>
    <id>http://shane.hsi.rocks/2016/05/21/Building-Fast-Resilient-Web-Applications/</id>
    <published>2016-05-21T10:34:18.000Z</published>
    <updated>2016-05-21T10:44:31.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="https://www.igvita.com/2016/05/20/building-fast-and-resilient-web-applications/?" target="_blank" rel="external">Building Fast &amp; Resilient Web Applications</a></p>
<blockquote>
<p>以下是谷歌翻译，部分做了校正。</p>
</blockquote>
<h1 id="u6784_u5EFA_u5FEB_u901F_u4E0E_u5F39_u6027_u7684Web_u5E94_u7528_u7A0B_u5E8F"><a href="#u6784_u5EFA_u5FEB_u901F_u4E0E_u5F39_u6027_u7684Web_u5E94_u7528_u7A0B_u5E8F" class="headerlink" title="构建快速与弹性的Web应用程序"></a>构建快速与弹性的Web应用程序</h1><p>你已经应用了所有的最佳实践，建立审核和测试，以检测性能下降，发布了新的应用程序，……你瞧，在遥测显示，尽管你尽了最大努力，还是有很多用户 - 包括那些在“快速设备”和4G网络，被脱落的快速路径：janky动画和滚动，网页加载速度和API调用缓慢，等等。令人沮丧。一定有不对的地方在这些设备，网络或浏览器吗？</p>
<p>也许有。有的原因为何该应用程序可以脱落过去路径无限供应：过载的网络和服务器，瞬时网络路由的问题，装置由于能量或热量的限制而进行节流，与用户的设备上的其他进程竞争资源，不胜枚举。这是不可能预见所有边缘的情况下，可以敲我们的应用程序关闭的快速路径，但我们肯定知道一件事：他们会发生。问题是，你打算怎么处理呢？</p>
<blockquote>
<p>雕刻出快速路径是不够的。我们需要使我们的应用程序有弹性。</p>
</blockquote>
<p>弹性的应用程序提供了保护我们的用户不可避免的性能故障护栏。它们提前预料这些问题，有适当的机制来检测它们，知道如何在运行时适应他们，并且作为结果，能够尽管这些并发症提供可靠的用户体验</p>
<p>我不会在老调重弹视频的每一个点，但是让我们突出重点主题：</p>
<ol>
<li><p>（9m3s）看似少量的关键元器件的性能变化的迅速增加创造不到理想的条件。我们必须设计我们的系统检测和处理这类案件，如对所有请求设定明确的SLA和指定的前期违规将如何处理。</p>
</li>
<li><p>（16m28s）。“性能不平等”缺口越来越有两种市场力量在起作用：有对功能和性能比赛，并有较低价格的高需求。这些都不是完全相左，廉价的设备也越来越快，但旗舰以更快的速度向前赛车。</p>
</li>
<li><p>（19m45s）“快”的设备显示在基准壮观的峰值性能，但实际性能是比较复杂的：我们往往要权衡对能源成本和热量限制的原始性能，竞争与其他应用程序共享资源，等等。</p>
</li>
<li><p>（23m35s）移动网络提供了性能熵的无限供给 ​​，无论大陆，国家，和供应商的 -eg连接到4G网络中一些最大的欧洲国家的设备的机会实际上是一个硬币的翻转; 只是因为你“有信号”并不意味着连接将成功; 看到“ 弹性网络 ”。</p>
</li>
</ol>
<p>如果我们忽略，而仅仅优化的快速路径，当应用程序去出轨，我们不应该感到惊讶，我们的用户抱怨不可靠的性能。另一方面，如果我们接受上述作为“正常”的复杂系统的操作约束，我们可以设计我们的应用来预测这些挑战，检测它们，并在运行时适应它们（31m39s）：</p>
<ol>
<li>作为规范治疗下线。</li>
<li>所有请求必须有一个后备。</li>
<li>使用可用的API的检测设备及网络功能。</li>
<li>适应应用程序逻辑相匹配的设备和网络功能。</li>
</ol>
<p>伊利亚Grigorik是谷歌，在W3C Web性能工作组的联合主席，以及高性能网络浏览器（O’Reilly）一书的作者网络性能工程师-遵循的Twitter，Google+的。</p>
<ol>
<li>在运行时，观察真实世界中的性能（运行时，网络），转到（4）。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="https://www.igvita.com/2016/05/20/building-fast-and-resilient-web-applications/?" target="_blank" rel="external">Building Fas]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Top developers can have a life outside coding]]></title>
    <link href="http://shane.hsi.rocks/2016/05/21/Top-developers-can-have-a-life-outside-coding/"/>
    <id>http://shane.hsi.rocks/2016/05/21/Top-developers-can-have-a-life-outside-coding/</id>
    <published>2016-05-21T10:13:53.000Z</published>
    <updated>2016-05-21T10:44:28.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://www.belenalbeza.com/top-developers-can-have-a-life-outside-coding/" target="_blank" rel="external">Top developers can have a life outside coding</a></p>
<blockquote>
<p>以下是谷歌翻译，部分做了校正。</p>
</blockquote>
<p>我们，作为一个行业，正在步入一个危险的境地：我们不仅仅只是希望，而且要求人们下班后继续工作。</p>
<p>忽略了一个职位的候选人，因为他们不参与开源项目；选择谁被裁退，是根据他是否有一个 pet project；希望员工跟上新技术，框架或者自己搞出一套；等等。</p>
<h2 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h2><p>这是因为“只有谁下班后写程序（免费），谁才是充满激情，才是一个好的开发者”，已经（莫名其妙地）成为一个“真相”。</p>
<p>这里却有有更现实的真相：</p>
<ul>
<li>只有一个极少数人能够（负担的起）下班后免费工作。</li>
<li>希望员工不断学习，跟上潮流，这是在满足公司的利益。公司应提供要做到这一点资源。</li>
<li>存在优秀的开发者拥有工作以外的生活。</li>
<li>存在优秀的开发者，他们也有工作之外的职责。</li>
<li>存在优秀的开发者，他们没有在12岁自学编程。</li>
</ul>
<p>他们也有生活。和其他人见面，并成为合作伙伴。有孩子。开始建立家庭。开发者也是人。</p>
<p>有人可能会认为有孩子或建立一个家庭是一个选择。即使假设这是真的（真的不是），生活还是发生了。父变老，需要日常护理。你可能会开发一种心理疾病，抑郁症一样，并且具有零能耗在漫长的一天工作后，做更多的工作。你可能会遭遇交通事故，必须花费每天2小时修复了一年。</p>
<p>有人可能会认为有孩子或建立一个家庭是一个选择。即使假设这是真的（真的不是），生活还是发生了。父变老，需要日常护理。你可能会开发一种心理疾病，抑郁症一样，并且具有零能耗在漫长的一天工作后，做更多的工作。你可能会遭遇交通事故，必须花费每天2小时修复了一年。</p>
<p>谁能够负担得起，以保持编码编码的8小时工作一天后？谁不会在开源社区得到骚扰？20岁的白人球员，没有责任和/或足够的收入来“购买”更多的自由时间（即：保姆，清洁工，良好的卫生保健，一辆汽车上下班等）。</p>
<p>这导致的问题…</p>
<h2 id="u6211_u600E_u4E48_u80FD_u4E0D24/7_u7F16_u7A0B_u4E5F_u6210_u4E3A_u4E00_u4E2A_u597D_u7684_u5F00_u53D1_u8005_uFF1F"><a href="#u6211_u600E_u4E48_u80FD_u4E0D24/7_u7F16_u7A0B_u4E5F_u6210_u4E3A_u4E00_u4E2A_u597D_u7684_u5F00_u53D1_u8005_uFF1F" class="headerlink" title="我怎么能不24/7编程也成为一个好的开发者？"></a>我怎么能不24/7编程也成为一个好的开发者？</h2><p>首先，我们必须认识到，我们执行我们最好在工作的时候，我们很高兴，而不是强调。</p>
<p>切断所需的睡眠时间，研究一本书吗？馊主意。睡眠是至关重要的，以你的健康（和性能！），没有足够的睡眠将受到惩罚。</p>
<p>忽略你的伴侣和孩子，以建立一个 pet project？真的吗？是一个 pet project 比看到你的孩子成长或你爱的人分享你的人生更有价值？</p>
<p>摧毁你的社交生活，放弃一切你的爱好，戒烟制定只是为了促进开源？这会让你在长期的幸福吗？</p>
<p>所以，我们能做些什么？</p>
<p>我到目前为止一直在做的事情就是充分利用我的工作时间：与同事结对编程，读别人的代码，问很多的问题，回答很多问题，代码审查等。</p>
<p>询问您的雇主支付的会议，给你公司的时间来参加。如果公司小，没有足够的资源，你可以要求参加本地研讨会，聚会的，等等。就像我说的，这是符合他们的利益，他们的雇主是最新的。如果他们不允许这样的事情发生，这意味着他们认为员工是一次性的，易于更换，所以你可能要开始寻找一个新的演出。</p>
<p>您可以在午休或者上下班阅读技术书籍或博客文章。如果你需要开发一个小工具来帮助你做的东西，或者一个原型，你可以尝试新的技术或语言。不要害怕尝试新的东西！</p>
<p>不要感到内疚有其他的爱好，除了编码。做其他活动，或工作了，会改善你的情绪，你的能量水平，你的创造力-in总之，它会让你成为一个更好的开发者。</p>
<p>如果你能设法有一点空闲时间虔诚编码，尽量做到量化。什么我发现最有用的是把花在 pet project 做到小时硬性限制。它可以是一个游戏果酱周末，也可以是你的东西强加给自己：“我会花20小时这个”。通过让一个最后期限，你将有一些成品：这是一个巨大的道德提升，它可以让你在网上还是在商店发布它，它会在你的简历更加令人印象深刻。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://www.belenalbeza.com/top-developers-can-have-a-life-outside-coding/" target="_blank" rel="external">Top developers can ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Learn Implementing Domain-Driven Design]]></title>
    <link href="http://shane.hsi.rocks/2016/05/21/Learn-Implementing-Domain-Driven-Design/"/>
    <id>http://shane.hsi.rocks/2016/05/21/Learn-Implementing-Domain-Driven-Design/</id>
    <published>2016-05-21T00:54:16.000Z</published>
    <updated>2016-05-21T00:54:27.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Intellij Live Templates ]]></title>
    <link href="http://shane.hsi.rocks/2016/05/13/Intellij-Live-Templates/"/>
    <id>http://shane.hsi.rocks/2016/05/13/Intellij-Live-Templates/</id>
    <published>2016-05-13T08:07:18.000Z</published>
    <updated>2016-05-13T08:08:17.000Z</updated>
    <content type="html"><![CDATA[<p>改变变量的光标书序:</p>
<p><a href="http://stackoverflow.com/questions/17216536/putting-the-cursor-in-a-specific-place-in-a-live-template" target="_blank" rel="external">http://stackoverflow.com/questions/17216536/putting-the-cursor-in-a-specific-place-in-a-live-template</a></p>
<p>官方文档:</p>
<p><a href="https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-template-variables.html?origin=old_help" target="_blank" rel="external">https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-template-variables.html?origin=old_help</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-live-templates.html?origin=old_help" target="_blank" rel="external">https://www.jetbrains.com/help/idea/2016.1/creating-and-editing-live-templates.html?origin=old_help</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.1/simple-parameterized-and-surround-live-templates.html?origin=old_help" target="_blank" rel="external">https://www.jetbrains.com/help/idea/2016.1/simple-parameterized-and-surround-live-templates.html?origin=old_help</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>改变变量的光标书序:</p>
<p><a href="http://stackoverflow.com/questions/17216536/putting-the-cursor-in-a-specific-place-in-a-live-template" target=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Learn API of react redux form]]></title>
    <link href="http://shane.hsi.rocks/2016/05/13/Learn-API-of-react-redux-form/"/>
    <id>http://shane.hsi.rocks/2016/05/13/Learn-API-of-react-redux-form/</id>
    <published>2016-05-13T07:33:28.000Z</published>
    <updated>2016-05-13T07:49:34.000Z</updated>
    <content type="html"><![CDATA[<p>Filed 组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Field &#125; <span class="keyword">from</span> <span class="string">'react-redux-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in your component's render() method</span></span><br><span class="line">&lt;Field model=<span class="string">"user.name"</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="title">Field</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><code>Field</code> 其实是一个 connect.</p>
<p>提供的功能:</p>
<ul>
<li><p>handles control updates, such as focus, blur, pristine, etc. 可以控制 focus blur 这些</p>
</li>
<li><p>keeps track of validity on any part of your model</p>
</li>
</ul>
<p>看下 example, 我着重想知道的, 是如何将值从 model -&gt; form 的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; modelReducer, formReducer &#125; <span class="keyword">from</span> <span class="string">'react-redux-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LoginForm <span class="keyword">from</span> <span class="string">'./forms/login-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(combineReducers(&#123;</span><br><span class="line">  user: modelReducer(<span class="string">'user'</span>),</span><br><span class="line">  userForm: formReducer(<span class="string">'user'</span>)</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">Provider</span> <span class="attribute">store</span>=<span class="value">&#123;</span> <span class="attribute">store</span> &#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">LoginForm</span> /&gt;</span> /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forms/login-form.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Field &#125; <span class="keyword">from</span> <span class="string">'react-redux-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; user &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Field</span> <span class="attribute">model</span>=<span class="value">"user.username"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span> /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Field</span> <span class="attribute">model</span>=<span class="value">"user.password"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> /&gt;</span> /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">          Log in as &#123; user.username &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selector = (state) =&gt; (&#123; user: state.user &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(selector)(LoginForm);</span><br></pre></td></tr></table></figure>
<h2 id="u5982_u4F55_u8BBE_u7F6E"><a href="#u5982_u4F55_u8BBE_u7F6E" class="headerlink" title="如何设置"></a>如何设置</h2><ol>
<li>Setup your store.</li>
</ol>
<ul>
<li>modelReducer(model, initialState) will create a model reducer, and</li>
<li>formReducer(model, initialState) will create a form reducer.</li>
</ul>
<p>他这里的 form reducer 是可选的, 主要功能是:</p>
<p>Form reducers are always optional. If you are not concerned with field states such as focus, blur, pristine, valid, etc., you can omit it (especially for performance purposes).</p>
<h1 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h1><p>Model reducer 是响应 <code>change()</code> action 的</p>
<p>Form reducer 是响应 filed actions 的.</p>
<h1 id="u6821_u9A8C"><a href="#u6821_u9A8C" class="headerlink" title="校验"></a>校验</h1><p>这个待会再看</p>
<h1 id="u8DDF_u8E2A_collections"><a href="#u8DDF_u8E2A_collections" class="headerlink" title="跟踪 collections"></a>跟踪 collections</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>Filed 组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redux Helper Design]]></title>
    <link href="http://shane.hsi.rocks/2016/05/13/Redux-Helper-Design/"/>
    <id>http://shane.hsi.rocks/2016/05/13/Redux-Helper-Design/</id>
    <published>2016-05-13T06:03:57.000Z</published>
    <updated>2016-05-13T08:29:04.000Z</updated>
    <content type="html"><![CDATA[<p>目前的设计, actions: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionFactory</span> </span>&#123;</span><br><span class="line">  protected namespace: any</span><br><span class="line">  protected defaultActions: any</span><br><span class="line"></span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    <span class="keyword">this</span>.namespace = ns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createAction(type, payload?) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      type: <span class="string">`<span class="subst">$&#123;this.namespace&#125;</span>/<span class="subst">$&#123;type&#125;</span>`</span>,</span><br><span class="line">      payload,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  actions() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.defaultActions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是调用了 createAction 这个方法. </p>
<p>现在有一个问题是, OO 的设计模式如何体现.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> ActionFactory <span class="keyword">from</span> <span class="string">'./ActionFactory'</span></span><br><span class="line"></span><br><span class="line">export default class CommonActionFactory extends ActionFactory &#123;</span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    super(ns)</span><br><span class="line">    this.defaultActions = &#123;</span><br><span class="line">      set: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'set'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      openModal: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'openModal'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      closeModal: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'closeModal'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      start: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'start'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      end: (key) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'end'</span>, &#123;key&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static isShow = function (state, key) &#123;</span><br><span class="line">    return _.get(state, [<span class="string">'view'</span>, <span class="string">'showModal'</span>, key])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static isPending = function (state, key) &#123;</span><br><span class="line">    return _.get(state, [<span class="string">'view'</span>, <span class="string">'pending'</span>, key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 Form</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ActionFactory <span class="keyword">from</span> <span class="string">'./ActionFactory'</span></span><br><span class="line"></span><br><span class="line">export default class FormActionFactory extends ActionFactory &#123;</span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    super(ns)</span><br><span class="line">    this.defaultActions = &#123;</span><br><span class="line">      setField: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'setField'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      reset: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'reset'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      resetError: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'resetError'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      setError: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'setError'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      setPending: (path, value) =&gt; &#123;</span><br><span class="line">        return this.createAction(<span class="string">'setPending'</span>, &#123;path, value&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 ReducerFactory:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line">export default class ReducerFactory &#123;</span><br><span class="line">  protected namespace: any</span><br><span class="line">  protected defaultHandlers: any = &#123;&#125;</span><br><span class="line">  protected handlers: any = &#123;&#125;</span><br><span class="line">  protected initialState: any = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    this.namespace = ns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setInitialState(initialState) &#123;</span><br><span class="line">    this.initialState = _.merge(&#123;&#125;, this.initialState, initialState)</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHandlers(handlers) &#123;</span><br><span class="line">    this.handlers = handlers</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getReducer() &#123;</span><br><span class="line">    const finalHandlers = _.merge(&#123;&#125;, this.defaultHandlers, this.handlers)</span><br><span class="line"></span><br><span class="line">    return (state, action) =&gt; &#123;</span><br><span class="line">      if (!Boolean(state)) &#123;</span><br><span class="line">        state = this.initialState</span><br><span class="line">      &#125;</span><br><span class="line">      if (finalHandlers.hasOwnProperty(action.type)) &#123;</span><br><span class="line">        return finalHandlers[action.type](state, action)</span><br><span class="line">      &#125;</span><br><span class="line">      return state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后子类:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> ReducerFactory <span class="keyword">from</span> <span class="string">'./ReducerFactory'</span></span><br><span class="line">const update = require(<span class="string">'./update'</span>)</span><br><span class="line"></span><br><span class="line">export default class FormReducerFactory extends ReducerFactory &#123;</span><br><span class="line">  constructor(ns) &#123;</span><br><span class="line">    super(ns)</span><br><span class="line"></span><br><span class="line">    this.setInitialState(&#123;</span><br><span class="line">      view: &#123;&#125;,</span><br><span class="line">      form: &#123;&#125;,</span><br><span class="line">      model: &#123;&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    this.defaultHandlers = &#123;</span><br><span class="line">      [`$&#123;<span class="keyword">this</span>.namespace&#125;/setField<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return _.set(_.merge(&#123;&#125;, state), ['form'].concat(action.payload.path), action.payload.value)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/reset<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return update(state, &#123;</span><br><span class="line">          form: &#123;$set: state.model&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/resetError<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return update(state, &#123;</span><br><span class="line">          validate: &#123;$set: &#123;&#125;&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/setError<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return _.set(_.merge(&#123;&#125;, state), `</span>validate.$&#123;action.payload.path&#125;<span class="string">`, action.payload.value)</span><br><span class="line">      &#125;,</span><br><span class="line">      [`</span>$&#123;<span class="keyword">this</span>.namespace&#125;/setPending<span class="string">`]: (state, action) =&gt; &#123;</span><br><span class="line">        return _.set(_.merge(&#123;&#125;, state), `</span>field.$&#123;action.payload.path&#125;.pending<span class="string">`, action.payload.value)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>先来看下 Alt 的设计, 来获取下如何设计 API 的想法.</p>
<h2 id="u4E00_u4E9B_u57FA_u672C_u7684_u60F3_u6CD5"><a href="#u4E00_u4E9B_u57FA_u672C_u7684_u60F3_u6CD5" class="headerlink" title="一些基本的想法"></a>一些基本的想法</h2><p>Redux 的 atom store, Redux 的生态( HMR, 一些 dev tools)是必须利用的.</p>
<p>Redux 的本质也很简单, 一个回调函数的注册. </p>
<p>我想要做的, 只是让写法能更模块化.<br>这个底层暂时也不要改. 改了也不影响上层. </p>
<h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><p>Actions 暂时还是做吧. 但是 Actions 可以封装起来. 如何传给 Component 还是问题. 用 HOC ?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.actions.doSomething</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generateActions() <span class="comment">// 快速生成 actions</span></span><br></pre></td></tr></table></figure>
<p>还有一点, Actions 要能够对异步请求做一层封装, 不要每次都这么多代码.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions.async</span><br><span class="line">.setPendingKey(<span class="string">'loadBasicInfo'</span>)</span><br><span class="line">(<span class="keyword">async</span>.loadBasicInfo))</span><br><span class="line">.end()</span><br><span class="line">.fail()</span><br><span class="line"></span><br><span class="line">actins.isPending(<span class="string">'loadBasicInfo'</span>)</span><br></pre></td></tr></table></figure>
<p>而且要思考下, 什么情况下会 cancel 一个请求.</p>
<p>action 有一个 id.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action.id</span><br></pre></td></tr></table></figure>
<h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>也就是我想给 Reducer 加的</p>
<p>这里面就有一个神奇的(pull way)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bindAction(MyActions.FOO, <span class="keyword">this</span>.handleFoo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleFoo(data) &#123;</span><br><span class="line">    <span class="comment">// do something with data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bindActions(MyActions);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onFoo(data) &#123;</span><br><span class="line">    <span class="comment">// do something with data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它还能反过来(push way):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bindListeners(&#123;</span><br><span class="line">      handleFoo: MyActions.FOO,</span><br><span class="line">      handleBar: [MyActions.BAR, OtherActions.BAR]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleFoo(data) &#123;</span><br><span class="line">    <span class="comment">// will only be called by MyActions.foo()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleBar(data) &#123;</span><br><span class="line">    <span class="comment">// will be called by MyActions.bar() and OtherActions.bar()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且它也封装了 <code>update</code>, 当然它在 alt 中, 主要作用是 emit change</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStore</span> </span>&#123;</span><br><span class="line">  handleFoo() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; foo: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      <span class="comment">// set foo to 1 and emit a change.</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        foo: <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// supress emitting a change.</span></span><br><span class="line">    <span class="keyword">this</span>.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看下 Alt 对 Data Sources 的处理:</p>
<p>它的 API 设计:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我觉得要给值做一个 box:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.xxx.isLoading</span><br><span class="line"></span><br><span class="line">value([xx,xx,xx])</span><br><span class="line">get([<span class="string">'xx'</span>,xx,xx]).value</span><br><span class="line">get([<span class="string">'xx'</span>,xx,xx]).loading</span><br><span class="line"></span><br><span class="line">&#123;$loading, $error, $expire, value: xx&#125;</span><br></pre></td></tr></table></figure>
<p>这个我们可以设置几个 box, 只有 box 才有 meta data. 比如缓存, 只有在这个级别可以做 $expire.</p>
<p>首次加载, 首次加载的时机, 可以在 route 时候做. 或者监听 quick click 事件 之类的. 这个时候感觉必须用 observable 做, 或者 event emitter.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.model.firstLoad()</span><br></pre></td></tr></table></figure>
<p> 其他的异步:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> actions.async</span><br><span class="line">.setPendingKey(<span class="string">'loadBasicInfo'</span>)</span><br><span class="line">.setAction(<span class="keyword">async</span>.loadBasicInfo))</span><br><span class="line">.end()</span><br><span class="line">.fail()</span><br></pre></td></tr></table></figure>
<p> 大概打开了一些思路, 准备看看 react-redux-form</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 其中 alt 自动绑定了 store</span></span><br><span class="line"></span><br><span class="line">@alt.createActions()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormActions</span> <span class="keyword">extends</span> <span class="title">Actions</span> </span>&#123;</span><br><span class="line">    constuctor() &#123;</span><br><span class="line">        <span class="keyword">this</span>.generateActions([<span class="string">'xx'</span>, <span class="string">'xx'</span>, <span class="string">'xx'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateTodo(id, text) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, text &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FormActions.get(<span class="string">'xx'</span>) <span class="comment">// 不依赖动态特性</span></span><br><span class="line">FormActions.updateTodo()</span><br></pre></td></tr></table></figure>
<p>需要研究下 RelayContainer 是如何处理异步的.</p>
<p>可能一个思路:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@alt.createActions()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormActions</span> <span class="keyword">extends</span> <span class="title">Actions</span> </span>&#123;</span><br><span class="line">    constuctor() &#123;</span><br><span class="line">        <span class="keyword">this</span>.generateActions([<span class="string">'xx'</span>, <span class="string">'xx'</span>, <span class="string">'xx'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateTodo(id, text) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, text &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@formActions(<span class="string">'xx'</span>)</span><br><span class="line"></span><br><span class="line">@compose(connect(state =&gt; state.xx), [commonActions, formActions])</span><br></pre></td></tr></table></figure>
<h2 id="u9996_u6B21_u52A0_u8F7D_u6570_u636E_u7684_u65B9_u5F0F"><a href="#u9996_u6B21_u52A0_u8F7D_u6570_u636E_u7684_u65B9_u5F0F" class="headerlink" title="首次加载数据的方式"></a>首次加载数据的方式</h2><p>暂时适用 componetDidMount 无所谓</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// box data</span></span><br><span class="line">basicInfo: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    $expire: <span class="literal">true</span>, <span class="comment">// -1 代表还没有初始化</span></span><br><span class="line">    $pending: <span class="literal">false</span>,</span><br><span class="line">    $showPending: 计算属性: 不需要 expire 就不显示, 否则就再判断下 $pending</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很想改写下 <code>get</code>, <code>set</code> 这些 property descriptor.</p>
<h2 id="u770B_u4E0B"><a href="#u770B_u4E0B" class="headerlink" title="看下"></a>看下</h2><h2 id="u7B80_u5355_u770B_u4E0B_OO_Design_Pattern"><a href="#u7B80_u5355_u770B_u4E0B_OO_Design_Pattern" class="headerlink" title="简单看下 OO Design Pattern"></a>简单看下 OO Design Pattern</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>目前的设计, actions: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Umbrella: Externalize the State Tree (or alternatives) ]]></title>
    <link href="http://shane.hsi.rocks/2016/05/06/Umbrella-Externalize-the-State-Tree-or-alternatives/"/>
    <id>http://shane.hsi.rocks/2016/05/06/Umbrella-Externalize-the-State-Tree-or-alternatives/</id>
    <published>2016-05-06T15:37:40.000Z</published>
    <updated>2016-05-07T00:59:56.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>React provides the notion of implicitly allowing a child component to store state (using the setState functionality). However, it is not just used for business logic state. It is also used to remember DOM state, or tiny ephemeral state such as scroll position, text selection etc. It is also used for temporary state such as memoization.</p>
</blockquote>
<p>子组件可以 store 状态</p>
<p>作用：</p>
<ul>
<li>业务逻辑状态</li>
<li>DOM 状态</li>
<li>小的瞬间状态（比如滚动位置，文字选择）</li>
<li>临时存储，比如记忆</li>
</ul>
<blockquote>
<p>This is kind of a magic black box in React and the implementation details are largely hidden. People tend to reinvent the wheel because of it, and invent their own state management systems. E.g. using Flux.</p>
</blockquote>
<p>黑盒子，细节被隐藏，人们倾向于重新造轮子（Flux）</p>
<blockquote>
<p>There is still plenty of use cases for Flux, but not all state belongs in Flux stores.</p>
</blockquote>
<p>当然不应该所有 state 交给 flux</p>
<blockquote>
<p>Manually managing the adding/removing of state nodes for all of this becomes a huge burden. So, regardless you’re not going to keep doing this manually, you’ll end up with your own system that does something similar. We need a convenient and standard way to handle this across components. This is not something that should be 100% in user space because then components won’t be able to integrate well with each other. Even if you think you’re not using it, because you’re not calling setState, you still are relying on the capability being there.</p>
<p>It undermines the ecosystem and eventually everyone will reconverge on a single external state library anyway. We should just make sure that gets baked into React.</p>
<p>We designed the state tree so that the state tree data structure would be opaque so that we can optimize the internals in clever ways. It blocks many anti-patterns where external users breaks through the encapsulation boundaries to touch someone else’s state. That’s exactly the problem React’s programming model tries to address.</p>
</blockquote>
<p>state 要不透明,对内部进行优化,不能碰到其他的 state.</p>
<blockquote>
<p>However, unfortunately this state tree is opaque to end users. This means that there are a bunch of legitimate use cases are not available to external libraries. E.g. undo/redo, reclaiming memory, restoring state between sessions, debugging tools, hot reloading, moving state from server to the client and more.</p>
</blockquote>
<p>因为是不透明的, 就有不能做 undo/redo reclaiming memory,  restoring state between sessions, debugging tools, hot reloading, moving state from server to the client and more.</p>
<blockquote>
<p>We could provide a standard externalized state-tree. E.g. using an immutable-js data structure. However, that might make clever optimizations and future features more difficult to adopt. It also isn’t capable of fully encapsulating the true state of the tree which may include DOM state, it may be ok to treat this state differently as a heuristic but the API need to account for it. It also doesn’t allow us to enforce a certain level of encapsulation between components.</p>
<p>Another approach is to try to add support for more use cases to React, one-by-one until the external state tree doesn’t become useful anymore. I’ve created separate issues for the ones we we’re already planning on supporting:</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>React provides the notion of implicitly allowing a child component to store state (using the setState functionality). Howeve]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[redux-loop]]></title>
    <link href="http://shane.hsi.rocks/2016/04/28/redux-loop/"/>
    <id>http://shane.hsi.rocks/2016/04/28/redux-loop/</id>
    <published>2016-04-28T08:00:50.000Z</published>
    <updated>2016-04-28T08:33:48.000Z</updated>
    <content type="html"><![CDATA[<p>sequence your effects naturally and purely by returning them from your reducers.</p>
<blockquote>
<p>Doesn’t redux-loop put side-effects in the reducer?</p>
</blockquote>
<p>It doesn’t. The values returned from the reducer when <strong>scheduling an effect</strong> with redux-loop only <strong>describe</strong> the effect. Calling the reducer will <strong>not cause the effect to run</strong>. The value returned by the reducer is just an object that the store knows how to interpret when it is enhanced by redux-loop. You can safely call a reducer in your tests <strong>without worrying about waiting for effects to finish</strong> and what they will do to your environment.</p>
<p>只是一个形容，一个占位。</p>
<h2 id="quick_example"><a href="#quick_example" class="headerlink" title="quick example"></a>quick example</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//... 略去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstAction = &#123;</span><br><span class="line">  type: <span class="string">'FIRST_ACTION'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doSecondAction = (value) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        type: <span class="string">'SECOND_ACTION'</span>,</span><br><span class="line">        payload: value,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thirdAction = &#123;</span><br><span class="line">  type: <span class="string">'THIRD_ACTION'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个还是蛮牛逼的</span></span><br><span class="line"><span class="comment">// immutable store state allowed by default, but not required</span></span><br><span class="line"><span class="keyword">const</span> initialState = fromJS(&#123;</span><br><span class="line">  firstRun: <span class="literal">false</span>,</span><br><span class="line">  secondRun: <span class="literal">false</span>,</span><br><span class="line">  thirdRun: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'FIRST_ACTION'</span>:</span><br><span class="line">    <span class="comment">// 序列是： 首先是 first 然后是 batch 到一个 promise，一个 constant </span></span><br><span class="line">    <span class="comment">// Enter a sequence at FIRST_ACTION, SECOND_ACTION and THIRD_ACTION will be</span></span><br><span class="line">    <span class="comment">// dispatched in the order they are passed to batch</span></span><br><span class="line">    <span class="keyword">return</span> loop(</span><br><span class="line">      state.set(<span class="string">'firstRun'</span>, <span class="literal">true</span>),</span><br><span class="line">      Effects.batch([</span><br><span class="line">        Effects.promise(doSecondAction, <span class="string">'hello'</span>),</span><br><span class="line">        Effects.constant(thirdAction)</span><br><span class="line">      ])</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'SECOND_ACTION'</span>:</span><br><span class="line">    <span class="keyword">return</span> state.set(<span class="string">'secondRun'</span>, action.payload);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'THIRD_ACTION'</span>:</span><br><span class="line">    <span class="keyword">return</span> state.set(<span class="string">'thirdRun'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: passing enhancer as the last argument to createStore requires redux@&gt;=3.1.0</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, initialState, install());</span><br><span class="line"></span><br><span class="line">store</span><br><span class="line">  .dispatch(firstAction)</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    <span class="comment">// dispatch returns a promise for when the current sequence is complete</span></span><br><span class="line">    <span class="comment">// &#123; firstRun: true, secondRun: 'hello', thirdRun: true &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(store.getState().toJS());</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Why_use_this_3F"><a href="#Why_use_this_3F" class="headerlink" title="Why use this?"></a>Why use this?</h2><p>Having used and followed the progression of Redux and the Elm Architecture, and after trying other effect patterns for Redux, we came to the following conclusion:</p>
<blockquote>
<p>Synchronous state transitions caused by returning a new state from the reducer in response to an action are just one of all possible effects an action can have on application state.<br>同步的状态变化一般是 reducer 响应 action，这只是其中 action 能给到 application state 的 effects 的一种。</p>
</blockquote>
<p>Many other methods for handling effects in Redux, especially those implemented with action-creators, incorrectly teach the user that asynchronous effects are fundamentally different from synchronous state transitions. </p>
<p>很多 redux 处理 effects 的方法，特别是通过 actionCreators 实现的，错误的教给了用户，异步 effects 和同步是本质不同的。</p>
<p>This separation encourages divergent and increasingly specific means of processing particular types effects. </p>
<p>Instead, we should focus on making our reducers powerful enough to handle asynchronous effects as well as synchronous state transitions. </p>
<p>相反的，我们应该让 reduer 能处理异步，就像处理同步一样。</p>
<p>With redux-loop, the reducer doesn’t just decide what happens now due to a particular action, it decides what happens next. All of the behavior of your application can be traced through one place, and that behavior can be easily broken apart and composed back together. This is one of the most powerful features of the Elm architecture, and with redux-loop it is a feature of Redux as well.</p>
<p>这样，redcuer 除了响应 action，也能决定下一步做什么。</p>
<p>这些都是 behaviror，都能在一处 traced。这些 behavior 都可以被轻松的 分解和组合。这就是 redux 的强度特性之一。</p>
<h3 id="Write_a_reducer_with_some_effects"><a href="#Write_a_reducer_with_some_effects" class="headerlink" title="Write a reducer with some effects"></a>Write a reducer with some effects</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Effects, loop &#125; <span class="keyword">from</span> <span class="string">'redux-loop'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loadingStart, loadingSuccess, loadingFailure &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchDetails</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">`/api/details/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">    .then((r) =&gt; r.json())</span><br><span class="line">    .then(loadingSuccess)</span><br><span class="line">    .catch(loadingFailure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'LOADING_START'</span>:</span><br><span class="line">      <span class="keyword">return</span> loop(</span><br><span class="line">        &#123; ...state, loading: <span class="literal">true</span> &#125;,</span><br><span class="line">        Effects.promise(fetchDetails, action.payload.id)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'LOADING_SUCCESS'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        details: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'LOADING_FAILURE'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        error: action.payload.message</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的是 <code>loop</code>。</p>
<p>A loop joins an updated model state with an effect for the store to process</p>
<p>组合了一个被更新过的 model state，和一个 effect。store 会之后处理。</p>
<p>Effects are declarative specifications of the next behavior of the store.</p>
<h2 id="Avoid_circular_loops_21"><a href="#Avoid_circular_loops_21" class="headerlink" title="Avoid circular loops!"></a>Avoid circular loops!</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'FIRST'</span>:</span><br><span class="line">      <span class="keyword">return</span> loop(</span><br><span class="line">        state,</span><br><span class="line">        Effects.constant(second())</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SECOND'</span>:</span><br><span class="line">      <span class="keyword">return</span> loop(</span><br><span class="line">        state,</span><br><span class="line">        Effects.constant(first())</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This minimal example will cause perpetual dispatching! While it is also possible to make this mistake with large, complicated networks of redux-thunk action creators, it is much easier to spot the mistake before it is made. It helps to keep your reducers small and focused, and use combineReducers or manually compose reducers so that the number of actions you deal with at one time is small. </p>
<p>A small set of actions which initiate a loop will help reduce the likelihood of causing circular dispatches.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>sequence your effects naturally and purely by returning them from your reducers.</p>
<blockquote>
<p>Doesn’t redux-loop put side-effects ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[elm architecture]]></title>
    <link href="http://shane.hsi.rocks/2016/04/28/elm-architecture/"/>
    <id>http://shane.hsi.rocks/2016/04/28/elm-architecture/</id>
    <published>2016-04-28T07:14:46.000Z</published>
    <updated>2016-04-28T07:30:10.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>model</li>
<li>update</li>
<li>view </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- MODEL</span><br><span class="line"></span><br><span class="line">type alias Model = &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- UPDATE</span><br><span class="line"></span><br><span class="line">type Action = Reset | ...</span><br><span class="line"></span><br><span class="line">update : Action -&gt; Model -&gt; Model</span><br><span class="line">update action model =</span><br><span class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></span><br><span class="line">    Reset -&gt; ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- VIEW</span><br><span class="line"></span><br><span class="line">view : Model -&gt; Html</span><br><span class="line">view =</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<h2 id="Example_1_3A_A_Counter"><a href="#Example_1_3A_A_Counter" class="headerlink" title="Example 1: A Counter"></a>Example 1: A Counter</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type alias Model = Int</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看到了吗？使用 union type， TypeScript 也有。然后通过 namespace</span></span><br><span class="line">type Action = Increment | Decrement</span><br><span class="line"></span><br><span class="line">update : Action -&gt; Model -&gt; Model</span><br><span class="line">update action model =</span><br><span class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></span><br><span class="line">    Increment -&gt; model + <span class="number">1</span></span><br><span class="line">    Decrement -&gt; model - <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>view</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">view : Signal.Address Action -&gt; Model -&gt; Html</span><br><span class="line">view address model =</span><br><span class="line">  div []</span><br><span class="line">    [ button [ onClick address Decrement ] [ text <span class="string">"-"</span> ]</span><br><span class="line">    , div [ countStyle ] [ text (toString model) ]</span><br><span class="line">    , button [ onClick address Increment ] [ text <span class="string">"+"</span> ]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">countStyle : Attribute</span><br><span class="line">countStyle =</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>注意理解下 <code>Address</code> 函数，后面在讲解到。</p>
<h2 id="Example_2_3A_A_Pair_of_Counters"><a href="#Example_2_3A_A_Pair_of_Counters" class="headerlink" title="Example 2: A Pair of Counters"></a>Example 2: A Pair of Counters</h2><p>我们看这个 Fractal 的架构如何组合？如何重用？</p>
<p>我们封装了一个模块，它的接口是统一的：</p>
<p><code>Model init Action update view</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> Counter (Model, init, Action, update, view) where</span><br><span class="line"></span><br><span class="line">type Model</span><br><span class="line"></span><br><span class="line">init : Int -&gt; Model</span><br><span class="line"></span><br><span class="line">type Action</span><br><span class="line"></span><br><span class="line">update : Action -&gt; Model -&gt; Model</span><br><span class="line"></span><br><span class="line">view : Signal.Address Action -&gt; Model -&gt; Html</span><br></pre></td></tr></table></figure>
<p>我们期待的是提供合适的函数接口，但是隐藏具体执行过程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>model</li>
<li>update</li>
<li>view </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[单向 UI 架构]]></title>
    <link href="http://shane.hsi.rocks/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/"/>
    <id>http://shane.hsi.rocks/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/</id>
    <published>2016-04-28T06:12:43.000Z</published>
    <updated>2016-04-28T07:12:04.000Z</updated>
    <content type="html"><![CDATA[<p>这里有一篇<a href="http://adoyle.me/blog/unidirectional-user-interface-architectures.html" target="_blank" rel="external">翻译</a></p>
<ul>
<li><strong>User events</strong></li>
<li><strong>User interface rendering</strong> 在屏幕上的图形输出，通常表示为HTML或一些可比高级别声明性代码如JSX。</li>
<li><strong>UI</strong> 它接受用户事件作为输入，并输出渲染，一个持续的过程，而不是一次性的变换。</li>
</ul>
<blockquote>
<p>A unidirectional architecture is said to be <strong>fractal</strong> if subcomponents are structured in the same way as the whole is.</p>
</blockquote>
<p>单向被认为是 fractal（分形），如果子组件的组织方式是统一的。</p>
<p>In fractal architectures, the whole can be naively packaged as a component to be used in some larger application.</p>
<p>In non-fractal architectures, the non-repeatable parts are said to be orchestrators over the parts that have hierarchical composition.</p>
<p>非分形架构中，非重复模块和其他模块需要特定的协调器。</p>
<h2 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h2><ul>
<li><p>Dispatcher 是 singleton。</p>
</li>
<li><p>Only View has composable components.</p>
<p>  A React component is a UI program, and is usually not written as a Flux architecture internally. Hence Flux is not fractal, where the <strong>orchestrators</strong> are the <strong>Dispatcher</strong> and the <strong>Stores</strong>.</p>
</li>
<li><p>User event handlers are declared in the rendering. event 在 rendering 里声明</p>
<p>  <code>onClick={this.clickHandler}</code></p>
</li>
</ul>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux is a variation of Flux where the <strong>singleton Dispatcher</strong> was adapted to become <strong>a singleton Store</strong>. </p>
<ul>
<li>Singleton Store</li>
<li>Provider</li>
<li>Provider</li>
<li>Reducers</li>
</ul>
<h3 id="Peculiarities"><a href="#Peculiarities" class="headerlink" title="Peculiarities"></a>Peculiarities</h3><p>Like Flux, Redux is not (by design) fractal and the <strong>Store</strong> is an <strong>orchestrator</strong>.</p>
<h2 id="Elm"><a href="#Elm" class="headerlink" title="Elm"></a>Elm</h2><ul>
<li>Model: a type defining the structure of state data 定义 data 的结构</li>
<li>View: a pure function transforming state into rendering 将 state 转换成rendering</li>
<li>Actions: a type defining user events sent through mailboxes 就是 type</li>
<li>Update: a pure function from previous state and an action to new state 就是 reducer</li>
</ul>
<p>和 redux 相比，他没有一个 store。</p>
<hr>
<p>关于 reactive ？</p>
<img src="/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/passive.png" alt="passive.png" title="">
<p>Bar is <strong>passive</strong>: it allows other modules to change its state. Foo is proactive: it is responsible for making Bar’s state function correctly. The passive module is unaware of the existence of the arrow which affects it.</p>
<p>被调用方（passive）不知道调用方（proactive）的存在。Bar 允许其他 modules，比如 Foo 来改变 Bar 本身的状态。</p>
<img src="/2016/04/28/UNIDIRECTIONAL-USER-INTERFACE-ARCHITECTURES/reactive.png" alt="reactive.png" title="">
<p>Bar is <strong>reactive</strong>: it is fully responsible for managing its own state by reacting to external events. Foo, on the other hand, is unaware of the existence of the arrow originating from its network request event.</p>
<p>Bar 完全控制自己的状态。Foo 不知道 Bar 的存在。</p>
<blockquote>
<p>What is the benefit of this approach? Inversion of Control, mainly because Bar is responsible for itself. Plus, we can hide Bar’s incrementCounter() as a private function. In the passive case, it was required to have incrementCounter() public, which means we are exposing Bar’s internal state management outwards. It also means if we want to discover how Bar’s counter works, we need to find all usages of incrementCounter() in the codebase. In this regard, Reactive and Passive seem to be duals of each other.</p>
</blockquote>
<p>IoC，可以隐藏 Bar 的 incrementCounter() 作为私有方法。<strong>如果要知道 Bar incrementCounter() 的工作机制，我们要找到所有 incrementCounter() 被调用的地方</strong></p>
<blockquote>
<p>这个我觉得是重点，public/private 的本身含义很简单，关键就是 private 之后会带来的倾向性。Bar 只相应唯一一个 event 的 payload。Bar 的最终吐出的 state，外界对它的影响要最低。state，主要在 Bar，而不是把 Bar 当做一个改变 state 的操作。</p>
</blockquote>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里有一篇<a href="http://adoyle.me/blog/unidirectional-user-interface-architectures.html" target="_blank" rel="external">翻译</a></p>
<ul>
<li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[redux data flow]]></title>
    <link href="http://shane.hsi.rocks/2016/04/27/redux-data-flow/"/>
    <id>http://shane.hsi.rocks/2016/04/27/redux-data-flow/</id>
    <published>2016-04-27T10:22:48.000Z</published>
    <updated>2016-04-28T03:59:31.000Z</updated>
    <content type="html"><![CDATA[<p>原文 1：<a href="https://github.com/jarvisaoieong/redux-architecture" target="_blank" rel="external">jarvisaoieong/redux-architecture</a></p>
<p>In classical Redux, which side effect is handled by thunk middleware, is not fractal (a term that is nicely explained by @stalz)</p>
<p>传统的 redux 中，side effect 是通过 thunk 中间件来处理的，</p>
<p>它不是 <strong><a href="http://staltz.com/unidirectional-user-interface-architectures.html" target="_blank" rel="external">fractal</a></strong> 的</p>
<img src="/2016/04/27/redux-data-flow/redux-architecture.png" alt="redux-architecture.png" title="">
<p>Even with some new Redux additions, like redux-saga, are also not composable in a fractal way with the rest of architecture.</p>
<p>redux-saga 也无法用 fractal 的方式和其他模块进行组合。</p>
<p>I think <a href="https://github.com/evancz/elm-architecture-tutorial/" target="_blank" rel="external">elm architecture</a> has found the proper way to do it right. Beside composing Views, State and Reducers (which are already composed in classical Redux), Actions and Effects should be composed too. All that leads to composition of application pieces at the higher level.</p>
<p>Elm 架构找到了一种正确的解决方式。除了组合 Views，States 和 reducers（redux 已经 compose），Actions 和 Effects 也会被 compose。总体来说，就能将 application pieces 组合到一个高的层级。</p>
<img src="/2016/04/27/redux-data-flow/elm-architecture.png" alt="elm-architecture.png" title="">
<p><strong>注：</strong> 需要理解下 elm</p>
<p>Redux is awesome. In order to make redux architecture fractal. We only need two adjustment in our application.</p>
<ol>
<li><p>Use <a href="https://github.com/raisemarketplace/redux-loop" target="_blank" rel="external">redux-loop</a> as side effect solution. </p>
<p>It will make the effects composable and the reducers more domain centric. It give you elm architecture side effect like solutions. 可以让 effects 变的可以 compose。reducer 更加面向 domain。给了类似 elm 架构的解决方案。</p>
</li>
<li><p>Don’t use <code>bindActionCreators</code>, just pass <code>dispatch</code> as the parameter to the components.</p>
<p>What the component needed is model (the data) and dispatch (a way to communicate with the rest architecture). It doesnt need the action callback as the parameters.不要使用 <code>bindActionCreators</code>，只要将 dispatch 传入 components。component 需要 modal（就是 data 数据）和 dispatch（和应用的其他架构部分做交互的方式）。不需要 action callback。</p>
</li>
</ol>
<p>This repo is port of the elm architecture examples in redux with redux-loop to show the benefits of hierarchical composition everywhere. In this example, I used my fork of <a href="https://github.com/jarvisaoieong/redux-loop" target="_blank" rel="external">redux-loop</a> and <a href="https://github.com/jarvisaoieong/redux-logger" target="_blank" rel="external">redux-logger</a> to demonstrate how to log the high order action and async action. (Please open the console in the <a href="http://jarvisaoieong.github.io/redux-architecture/" target="_blank" rel="external">live demo</a>.)</p>
<p><img src="http://i.imgur.com/33MQJvu.png" alt=""></p>
<img src="/2016/04/27/redux-data-flow/log.png" alt="log.png" title="">
<p>I hope we can make elm architecture to the mainstream to create a truly reusable and well encapsulated application.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文 1：<a href="https://github.com/jarvisaoieong/redux-architecture" target="_blank" rel="external">jarvisaoieong/redux-architecture</a></p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Read recompose API]]></title>
    <link href="http://shane.hsi.rocks/2016/04/23/Read-recompose-API/"/>
    <id>http://shane.hsi.rocks/2016/04/23/Read-recompose-API/</id>
    <published>2016-04-22T23:14:48.000Z</published>
    <updated>2016-04-22T23:19:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="u6570_u636E_u6D41"><a href="#u6570_u636E_u6D41" class="headerlink" title="数据流"></a>数据流</h2><p>这种方式不好用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = withState(</span><br><span class="line">  <span class="string">'counter'</span>, <span class="string">'setCounter'</span>, <span class="number">0</span></span><br><span class="line">)((&#123; counter, setCounter &#125;) =&gt; (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      Count: &#123;counter&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> setCounter(n =&gt; n + 1)&#125;&gt;Increment<span class="tag">&lt;/<span class="title">button</span>&gt;</span> /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> setCounter(n =&gt; n - 1)&#125;&gt;Decrement<span class="tag">&lt;/<span class="title">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>√ 这种方式符合 redux-style，目前够清晰。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counterReducer = (count, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> INCREMENT:</span><br><span class="line">    <span class="keyword">return</span> count + <span class="number">1</span></span><br><span class="line">  <span class="keyword">case</span> DECREMENT:</span><br><span class="line">    <span class="keyword">return</span> count - <span class="number">1</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = withReducer(</span><br><span class="line">  <span class="string">'counter'</span>, <span class="string">'dispatch'</span>, counterReducer, <span class="number">0</span></span><br><span class="line">)((&#123; counter, dispatch &#125;) =&gt; (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      Count: &#123;counter&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> dispatch(&#123; type: INCREMENT &#125;)&#125;&gt;Increment<span class="tag">&lt;/<span class="title">button</span>&gt;</span> /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;()</span> =&gt;</span> dispatch(&#123; type: DECREMENT &#125;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="u6027_u80FD"><a href="#u6027_u80FD" class="headerlink" title="性能"></a>性能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A component that is expensive to render</span></span><br><span class="line"><span class="keyword">const</span> ExpensiveComponent = (&#123; propA, propB &#125;) =&gt; &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optimized version of same component, using shallow comparison of props</span></span><br><span class="line"><span class="comment">// Same effect as React's PureRenderMixin</span></span><br><span class="line"><span class="keyword">const</span> OptimizedComponent = pure(ExpensiveComponent)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Even more optimized: only updates if specific prop keys have changed</span></span><br><span class="line"><span class="keyword">const</span> HyperOptimizedComponent = onlyUpdateForKeys([<span class="string">'propA'</span>, <span class="string">'propB'</span>])(ExpensiveComponent)</span><br></pre></td></tr></table></figure>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EnhancedComponent = hoc(BaseComponent)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composedHoc = compose(hoc1, hoc2, hoc3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same as</span></span><br><span class="line"><span class="keyword">const</span> composedHoc = BaseComponent =&gt; hoc1(hoc2(hoc3(BaseComponent)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same as</span></span><br><span class="line">@withState(<span class="comment">/*...args*/</span>)</span><br><span class="line">@mapProps(<span class="comment">/*...args*/</span>)</span><br><span class="line">@pure</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>## </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="u6570_u636E_u6D41"><a href="#u6570_u636E_u6D4]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECSS Reading Notes]]></title>
    <link href="http://shane.hsi.rocks/2016/04/18/ECSS-Reading-Notes/"/>
    <id>http://shane.hsi.rocks/2016/04/18/ECSS-Reading-Notes/</id>
    <published>2016-04-18T05:30:12.000Z</published>
    <updated>2016-04-18T06:39:07.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>会有一些可选的关于 tools 的 guidelines。</p>
<h1 id="u7B2C_u4E00_u7AE0"><a href="#u7B2C_u4E00_u7AE0" class="headerlink" title="第一章"></a>第一章</h1><p>定义下问题。</p>
<p>定义下基本需求：</p>
<ul>
<li>大型 css base，可维护</li>
<li>可安全删除某些 portion</li>
<li>能快速跟上新的设计</li>
<li>改变不影响其他</li>
<li>工具少，工作流简单</li>
<li>aria 来做 state change communication</li>
</ul>
<p>今晚阅读完毕。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>会有一些可选的关于 tools 的 guidelines。</p>
<h1 id="u7B2C_u4E0]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test mock terminology]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Test-mock-terminology/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Test-mock-terminology/</id>
    <published>2016-04-16T08:45:55.000Z</published>
    <updated>2016-04-16T09:00:29.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://sinonjs.org/#examples" target="_blank" rel="external">sinon examples</a> 非常的清晰。</p>
<p>找到一篇中文：<a href="http://www.tuicool.com/articles/iAz6fi" target="_blank" rel="external">置换测试: Mock, Stub 和其他</a></p>
<ul>
<li><p>double - 理解为置换，它是所有模拟测试对象的 <strong>统称</strong>，我们也可以称它为替身。</p>
</li>
<li><p>stub - 测试桩，它能实现当特定的方法被调用时，返回一个指定的模拟值（每次一致的模拟数据）。</p>
</li>
</ul>
<p>以 sinon.js 为例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stub = sinon.stub().returns(<span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>spy - 侦查，它负责汇报情况，持续追踪什么方法 <strong>被调用了</strong> ，以及调用过程中 <strong>传递了哪些参数</strong> 。比如一个特定的方法是否被调用或者是否使用正确的参数调用。当你需要测试两个对象间的 某些<strong>协议</strong> 或者关系时会非常有用。</li>
</ul>
<blockquote>
<p>关键是方法间的 <strong>协议</strong>。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">it(<span class="string">"calls the original function"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> spy = sinon.spy();</span><br><span class="line">    <span class="keyword">var</span> proxy = once(spy);</span><br><span class="line"></span><br><span class="line">    proxy();</span><br><span class="line"></span><br><span class="line">    assert(spy.called);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>mock - 与 spy 类似，有些许不同。 spy 追踪所有的方法调用，并在事后让你写断言，而 mock 通常需要你 <strong>事先设定期望</strong>。你告诉它你期望发生什么，然后执行测试代码并验证最后的结果与事先定义的期望是否一致。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">it(<span class="string">"returns the return value from the original function"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myAPI = &#123; method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br><span class="line">    <span class="keyword">var</span> mock = sinon.mock(myAPI);</span><br><span class="line">    mock.expects(<span class="string">"method"</span>).once().returns(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> proxy = once(myAPI.method);</span><br><span class="line"></span><br><span class="line">    assert.equals(proxy(), <span class="number">42</span>);</span><br><span class="line">    mock.verify();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>fake - <strong>具备完整</strong> 功能实现和行为的对象，行为上来说它和这个类型的真实对象上一样，但不同于它所模拟的类，它使测试变得更加容易。一个典型的例子是使用内存中的数据库来生成一个数据持久化对象，而不是去访问一个真正的生产环境的数据库。</li>
</ul>
<p>对细节有更多，参考 <a href="http://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="external">Mocks Aren’t Stubs</a></p>
<h2 id="u6A21_u62DF_u4E3B_u4E49_u8005__28Mockists_29_vs-__u7EDF_u8BA1_u4E3B_u4E49_u8005__28Statists_29"><a href="#u6A21_u62DF_u4E3B_u4E49_u8005__28Mockists_29_vs-__u7EDF_u8BA1_u4E3B_u4E49_u8005__28Statists_29" class="headerlink" title="模拟主义者 (Mockists) vs. 统计主义者 (Statists)"></a>模拟主义者 (Mockists) vs. 统计主义者 (Statists)</h2><p>总结下，模拟的是行为（内部的），统计的是最终状态。</p>
<p>许多关于模拟对象的讨论主要是衍生自 Fowler 的文章的，它们讨论了两种不同类型的程序员，模拟主义者和统计主义者，所写的测试。</p>
<p>模拟主意的方式是测试对象之间的交互。通过使用模拟对象，你可以更容易地验证被测对象是否遵循了它与其他类已建立的协议，使得在正确的时间发生正确的外部调用。对于那些使用行为驱动 (behavior-driven) 的开发者来说，这种测试可以驱动出更好的生产代码，因为你需要明确模拟出特定的方法，这可以帮你设计出在两个对象之间使用的更优雅的API，这种想法与模拟驱动紧密联系在一起。因此模拟主义的测试更偏向于单元级别的测试，而不是完全的端到端 (end-to-end) 测试。</p>
<p>统计主义的方式是不使用模拟对象。这种思路是测试时只测试状态而不是行为，因此这种类型的测试更加健壮。使用模拟测试时，如果你更新了实际类的行为，模拟类也需要同步更新；如果你忘了这么做，你可能会遇到测试可以通过但是代码却不能正确工作的情况。通过强调在测试环境中只使用那些真正的代码，统计主意的测试可以帮助你 <strong>减少测试代码和实现代码的耦合度，并降低出错率</strong>。这种类型的测试，您可能已经猜到，适合于更全面的端到端的测试。</p>
<p>当然，并不是说有两个对立的程序员学派；你不可能看到模拟主义和统计主义的当街对决。这种分歧是有用的，但是，得认识到 mock 在有些时候是你的工具箱里最好的工具，但是有时候又不是。不同类型的测试适用于不同的任务，并且最高效的测试套件往往是不同测试风格的集合体。仔细考虑你到底想要用单个测试来验证些什么，这能帮助你找到最合适的测试方式，而且能帮你决定对于当前工作来说，使用模拟测试对象是否是正确的工具。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://sinonjs.org/#examples" target="_blank" rel="external">sinon examples</a> 非常的清晰。</p>
<p>找到一篇中文：<a href="http://www.tuicool]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wallaby Summary]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-Summary/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-Summary/</id>
    <published>2016-04-16T08:38:36.000Z</published>
    <updated>2016-04-16T08:45:25.000Z</updated>
    <content type="html"><![CDATA[<p>测试基础：</p>
<p>Mocha + expect(assertion) + sinon</p>
<ul>
<li><p>Node + TypeScript</p>
</li>
<li><p>Browser + webpack + TypeScript(to ES6) + Babel(ES7，主要是 async/await)</p>
</li>
<li><p>React tsx</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试基础：</p>
<p>Mocha + expect(assertion) + sinon</p>
<ul>
<li><p>Node + TypeScript</p>
</li>
<li><p>Browser + webpack + TypeScript(to ES6) ]]>
    </summary>
    
  </entry>
  
</feed>
