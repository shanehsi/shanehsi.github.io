<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-02-24T06:29:41.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java 知识点 2016年02月24日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/24/Java-Knowledge-Points-20160224/"/>
    <id>http://shane.hsi.rocks/2016/02/24/Java-Knowledge-Points-20160224/</id>
    <published>2016-02-24T03:30:33.000Z</published>
    <updated>2016-02-24T06:29:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="MethodInvokingFactoryBean"><a href="#MethodInvokingFactoryBean" class="headerlink" title="MethodInvokingFactoryBean"></a>MethodInvokingFactoryBean</h2><p>从配置文件开始看。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mnsInvokerBean"</span> <span class="attribute">class</span>=<span class="value">"com.*.*.MnsInvoker"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span> <span class="attribute">ref</span>=<span class="value">"mnsInvokerBean"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>registerHttpService<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"arguments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;tesla_appkey&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;jetty.port&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>主要是这个 <code>MethodInvokingFactoryBean</code>。</p>
<p>参考：<a href="http://blog.csdn.net/kongxx/article/details/6011441" target="_blank" rel="external">Spring实战之org.springframework.beans.factory.config.MethodInvokingFactoryBean</a>。</p>
<p>讲解的很直观。</p>
<p>在用spring管理我们的类的时候有时候希望有些属性值是</p>
<ul>
<li>来源于一些配置文件，</li>
<li>系统属性，</li>
<li>或者一些方法调用的结果</li>
</ul>
<p>对于前两种使用方式可以使用spring的PropertyPlaceholderConfigurer类来注入，对于后一种则可以使用org.springframework.beans.factory.config.MethodInvokingFactoryBean类来生成需要注入的bean的属性。</p>
<p>通过MethodInvokingFactory Bean类，可注入方法返回值。 MethodInvokingFactoryBean用来 <strong>获得某个方法的返回值</strong>，该方法既可以是静态方法，也可以是实例方法。该方法的返回值 <strong>可以注入bean实例属性</strong>，<strong>也可以直接定义成bean实例</strong>。</p>
<p>另参考：<a href="http://blog.sina.com.cn/s/blog_72ef7bea0102wa0v.html" target="_blank" rel="external">Spring Boot Hello MethodInvokingFactoryBean and MethodInvokingBean</a>。</p>
<h2 id="bean__u914D_u7F6E_u4E4B_init-method__u548C_lazy-init_u3002"><a href="#bean__u914D_u7F6E_u4E4B_init-method__u548C_lazy-init_u3002" class="headerlink" title="bean 配置之 init-method 和 lazy-init。"></a>bean 配置之 init-method 和 lazy-init。</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mtConfigClient"</span> <span class="attribute">class</span>=<span class="value">"com.*.*.config.MtConfigClient"</span> <span class="attribute">init-method</span>=<span class="value">"init"</span> <span class="attribute">lazy-init</span>=<span class="value">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关于 <code>init-method</code> 和 <code>lazy-init</code>。</p>
<p>其中关于 <code>init-method</code>，涉及到的概念是 <a href="http://sexycoding.iteye.com/blog/1046775" target="_blank" rel="external">Spring bean 的生命周期</a>。Spring 允许 Bean 在初始化完成后以及销毁前执行特定的操作。</p>
<p>常用的三种指定特定操作的方法：</p>
<ul>
<li>通过实现InitializingBean/DisposableBean 接口来定制初始化之后/销毁之前的操作方法；</li>
<li>通过 <bean> 元素的 init-method/destroy-method属性指定初始化之后 /销毁之前调用的操作方法；</bean></li>
<li>在指定方法上加上@PostConstruct或@PreDestroy注解来制定该方法是在初始化之后还是销毁之前调用。</li>
</ul>
<p>这几种方法的先后顺序为（参考：<a href="http://blog.csdn.net/caihaijiang/article/details/8629725" target="_blank" rel="external">Spring容器中的Bean几种初始化方法和销毁方法的先后顺序</a>)：</p>
<p><strong>Bean在实例化的过程中：Constructor &gt; @PostConstruct &gt;InitializingBean &gt; init-method</strong></p>
<p><strong>Bean在销毁的过程中：@PreDestroy &gt; DisposableBean &gt; destroy-method</strong></p>
<p>其中关于 <code>lazy-init</code>，默认是 false。可以在 applicationContext.xml 里配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span> &gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span> =<span class="value">"org.xxxx.bean"</span> &gt;</span>   </span><br><span class="line">      ......</span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个应该只在开发环境中可以使用。</p>
<blockquote>
<p>ApplicationContext实现的默认行为就是在启动时将所有singleton bean提前进行实例化。提前实例化意味着作为初始化过程的一部分，ApplicationContext实例会创建并配置所有的singleton bean。通常情况下这是件好事，因为这样在配置中的任何错误就会即刻被发现（否则的话可能要花几个小时甚至几天）。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="MethodInvokingFactoryBean"><a href="#MethodInvokingFactoryBean" class="headerlink" title="MethodInvokingFactoryBean"></a>MethodInvok]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读一些 Tweet 2016年02月24日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/"/>
    <id>http://shane.hsi.rocks/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/</id>
    <published>2016-02-24T02:53:55.000Z</published>
    <updated>2016-02-24T03:24:27.000Z</updated>
    <content type="html"><![CDATA[<p>主要是 React Conf 2016 刚刚结束，视频还没有上传到 Youtube，先看看 Twitter 上的更新。</p>
<p>react-armor，virtual-dom 和 真是 dom 之间的一些同步保证。Utility。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_171.png" alt="Snip20160224_171.png" title="">
<hr>
<p>和之前在 Why I No Longer Use MVC Frameworks 看到的公式写法类似。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_173.png" alt="Snip20160224_173.png" title="">
<hr>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_174.png" alt="Snip20160224_174.png" title="">
<hr>
<p>Pete Hunt 对最近 MVC 的一个讨论。<a href="https://twitter.com/floydophone/status/702236018687086592" target="_blank" rel="external">View conversation</a>。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_176.png" alt="Snip20160224_176.png" title="">
<hr>
<p>gl-react，文档很全。<a href="https://projectseptemberinc.gitbooks.io/gl-react/content/index.html" target="_blank" rel="external">gl-react</a>。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_177.png" alt="Snip20160224_177.png" title="">
<hr>
<p>有一个 UI Shell 的概念。可以模拟 Service Worker 实现。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_178.png" alt="Snip20160224_178.png" title="">
]]></content>
    <summary type="html">
    <![CDATA[<p>主要是 React Conf 2016 刚刚结束，视频还没有上传到 Youtube，先看看 Twitter 上的更新。</p>
<p>react-armor，virtual-dom 和 真是 dom 之间的一些同步保证。Utility。</p>
<img src="/201]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[时间管理知乎话题下的问答的学习]]></title>
    <link href="http://shane.hsi.rocks/2016/02/23/Time-Management-Reading-from-Zhihu/"/>
    <id>http://shane.hsi.rocks/2016/02/23/Time-Management-Reading-from-Zhihu/</id>
    <published>2016-02-23T14:00:33.000Z</published>
    <updated>2016-02-24T01:44:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F"><a href="#u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F" class="headerlink" title="如何长时间高效学习？"></a><a href="https://www.zhihu.com/question/28358499" target="_blank" rel="external">如何长时间高效学习？</a></h1><p>题干：</p>
<p>需要长时间学习，但经常时间还有（才到下午六七点）但精力已经没了，感觉很疲惫，无法集中精力有效思考，不停走神。饮食还算健康，睡眠基本能保持7小时。现状是保持自己的生活（跑步，爬山，逛街，跟朋友玩等等）就必然完不成学习任务，要坚持完成任务生活就只剩下吃饭睡觉，因为效率很低。<br>很多朋友谈高考的学习方法，但作为成年人没法像高中生一样有纯粹的学习环境，没法一门心思只学习。很多杂事要处理，比如车，房子，找工作，签证，必要的社交等等。<br>另外，不带手机也不现实，在等 offer，随时会有电话打来不想漏接…谢谢大家！</p>
<blockquote>
<p>跑步 - 准备购买下运动时穿的衣服。</p>
</blockquote>
<h2 id="u56DE_u7B541_uFF1A"><a href="#u56DE_u7B541_uFF1A" class="headerlink" title="回答1："></a>回答1：</h2><p><a href="https://www.zhihu.com/question/28358499/answer/43002343" target="_blank" rel="external">https://www.zhihu.com/question/28358499/answer/43002343</a></p>
<p>首先不能通过高中的学习方式：</p>
<blockquote>
<p>高中的学习呢，简单地讲就是重复重复重复，就那么些知识点，反反复复练三年，其实收获甚微，而且，高中时外界干扰不多，可以专心学习。</p>
</blockquote>
<p>但是，至少表明，有些基础知识点，是需要不断反反复复联系很久（半年，一年）。</p>
<blockquote>
<p>对于题主所说的长时间，是不是可以理解成需要一些好的学习习惯，就把之前在Coursera看到的一些和大家分享，希望对看到的人有所帮助，并感谢vancexu</p>
</blockquote>
<p><a href="https://link.zhihu.com/?target=https%3A//www.coursera.org/learn/learning-how-to-learn/outline" target="_blank" rel="external">Learning How to Learn: Powerful mental tools to help you master tough subjects</a>是UCSD开的一门课。</p>
<p>1.1 专注模式和发散模式</p>
<p>大脑很复杂，了解一些关于大脑的工作原理可以让我们更好地学习，减少困惑。</p>
<p><strong>专注模式 (Focused mode) 和发散模式 (Diffuse mode)</strong>。</p>
<p><strong>专注模式</strong>，集中精力学习或理解某事，局部的神经链接激活状态，利于解决实际问题。</p>
<p>比方说你熟悉四则运算，那么解决算数题的时候就主要靠那部分神经出力。</p>
<p><strong>发散模式</strong>，人脑放松，神经信号脑内大面积移动，利于发挥创造性。</p>
<p>比方说你洗澡的时候突然想到一个久攻不破的问题的解决方案。</p>
<p>当你面对熟悉的事物时，一般处于专注模式，而当你需要新想法和办法时，或者你需要从宏观上把握某件事时就切换到发散模式，这两个模式是可以互相切换的，但不能同时进行。可以在紧张的学习新知识的时候通过洗澡、散步等让自己放松的事情主动进入发散模式来帮助加深理解。</p>
<p>大脑是一个昂贵的器官，需要消耗同等体重躯干部分10倍的能量。</p>
<p>1.2 拖延、记忆和睡眠</p>
<p>当你做一件你不想做的事情比如学习时，大脑中和痛苦相关的区域被激活 (insular cortex), 大脑就趋向于将注意力转移到其他不那么痛苦的事情。</p>
<img src="/2016/02/23/Time-Management-Reading-from-Zhihu/ec0707c02e63642b4f969f150e88f576_b.jpg" alt="ec0707c02e63642b4f969f150e88f576_b.jpg" title="">
<p>介绍一个应对拖延症的简单办法：番茄工作法 (Pomodoro)。番茄工作法由Francesco Cirillo发明，听上去很简单：</p>
<blockquote>
<p>个人实践过 番茄工作法，得出一个经验，只有当真正你会焦虑而可能会拖延的事情，才应该使用番茄工作法。否则，认为切断时间碎片反而不开心。</p>
</blockquote>
<p>记忆。</p>
<p>Practice makes permanent.</p>
<p>你需要不断的练习来增强大脑中的连接，形成比较深刻的记忆模式。</p>
<blockquote>
<p>记忆就是要重复，不断重复。</p>
</blockquote>
<p>记忆分为长期记忆 (Lone-term memory) 和工作记忆 (Working memory)。</p>
<p>工作记忆也就是短期记忆，一般认为可以存放4块。</p>
<p>长期记忆的容量很大。</p>
<p>从工作记忆转化到长期记忆需要时间以及不断的重复。</p>
<p>这里提到了一个小技巧：<strong>spaced repetition</strong>, 就是一晚上重复20遍的效果不如你每天重复几遍。</p>
<p><strong>睡眠对学习也十分重要。</strong></p>
<p>我们觉醒时大脑会产生有毒的物质，而睡觉时大脑细胞收缩，细胞间隙变大，脑脊液可以通过并且清理掉这些东西。睡眠的意义不止于此，它也是学习与记忆的重要的一部分。睡眠时大脑会整理你的想法和你学习的内容，不重要的记忆会被清理掉，而你想要记住的会得到加强。睡眠时大脑还可以重复你白天学习的复杂知识，对解决难题和理解知识都有帮助。在睡觉之前看的东西更容易进入你的梦境，而梦到它又有助于你对它的理解，关于睡觉对学习的作用具体可见我的另一个回答：<a href="http://www.zhihu.com/question/28714587/answer/41873436" target="_blank" rel="external">睡眠可以帮助大脑整理白天学过的知识吗？ - 知乎用户的回答</a>。</p>
<p>另外，<strong>锻炼身体</strong> 很重要。除了散步洗澡听音乐等让你放松的方式会帮助你进入发散模式，锻炼身体能让你从之前集中精力的地方解放出来，使得发散模式有机会呈现，锻炼身体对大脑生长新的神经元有益。</p>
<p><strong>隐喻和类比是强大的学习技巧。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F"><a href="#u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F" ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 知识点 2016年02月23日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/23/Java-Knowledge-Points-20160223/"/>
    <id>http://shane.hsi.rocks/2016/02/23/Java-Knowledge-Points-20160223/</id>
    <published>2016-02-23T03:14:01.000Z</published>
    <updated>2016-02-23T13:47:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Jetty__u542F_u52A8_u4EE3_u7801"><a href="#Jetty__u542F_u52A8_u4EE3_u7801" class="headerlink" title="Jetty 启动代码"></a>Jetty 启动代码</h2><h3 id="Bootstrap-java"><a href="#Bootstrap-java" class="headerlink" title="Bootstrap.java"></a>Bootstrap.java</h3><h4 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.*.cfg.Config;</span><br><span class="line"><span class="keyword">import</span> com.*.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bootstrap</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.info(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        initClasspath();</span><br><span class="line">        loadConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()&#123; 配置 logs 地址 &#125; -&gt; logs</span></span><br><span class="line">        String logs = Config.get(<span class="string">"jetty.logs"</span>);</span><br><span class="line">        <span class="keyword">if</span> (logs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> File(<span class="string">"/opt/logs/mobile"</span>).exists()) &#123;</span><br><span class="line">                logs = <span class="string">"/opt/logs/mobile"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logs = <span class="string">"./logs"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">new</span> File(logs).exists()) &#123;</span><br><span class="line">            <span class="keyword">new</span> File(logs).mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()&#123; 配置 webroot &#125; -&gt; void</span></span><br><span class="line">        String webroot = Config.get(<span class="string">"jetty.webroot"</span>);</span><br><span class="line">        <span class="keyword">if</span> (webroot == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> File(<span class="string">"webroot"</span>).exists()) &#123;</span><br><span class="line">                webroot = <span class="string">"./webroot"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span> File(<span class="string">"src/main/webapp"</span>).exists()) &#123;</span><br><span class="line">                webroot = <span class="string">"./src/main/webapp"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                webroot = <span class="string">"."</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Config.set(<span class="string">"jetty.webroot"</span>, webroot);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()&#123; 配置 context，并作 path normalize &#125; -&gt; void</span></span><br><span class="line">        String context = Config.get(<span class="string">"jetty.context"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((context == <span class="keyword">null</span>) || (context.isEmpty())) &#123;</span><br><span class="line">            context = <span class="string">"/"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context.charAt(<span class="number">0</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">            context = <span class="string">"/"</span> + context;</span><br><span class="line">        &#125;</span><br><span class="line">        Config.set(<span class="string">"jetty.context"</span>, context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ? System.getProperty</span></span><br><span class="line">        Log.info(<span class="string">"user.dir="</span> + System.getProperty(<span class="string">"user.dir"</span>));</span><br><span class="line">        Log.info(<span class="string">"jetty.webroot="</span> + webroot);</span><br><span class="line">        Log.info(<span class="string">"jetty.context="</span> + context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// () &#123; 加载 jetty.xml，或者使用 jetty8.xml &#125; -&gt; jettyConfig</span></span><br><span class="line">        InputStream input = Bootstrap.class.getResourceAsStream(<span class="string">"/jetty/jetty.xml"</span>);</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            input = Bootstrap.class.getResourceAsStream(<span class="string">"/jetty8.xml"</span>);</span><br><span class="line">            Log.info(<span class="string">"Booting with /jetty8.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.info(<span class="string">"Booting with /jetty/jetty.xml"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        XmlConfiguration jettyConfig = <span class="keyword">new</span> XmlConfiguration(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ? XmlConfiguration#configure()</span></span><br><span class="line">        Object server = jettyConfig.configure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ? Pattern.compile</span></span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">"jetty-[\\w]+.xml"</span>);</span><br><span class="line">        <span class="comment">// 数组 aggregate initialization 集初始化 [link](http://book.51cto.com/art/201304/388900.htm)</span></span><br><span class="line">        <span class="comment">// ? WEB-INF/classes/jetty 确认下 classes 目录的生成时间，内容</span></span><br><span class="line">        File[] paths = &#123; <span class="keyword">new</span> File(<span class="string">"src/main/resources/jetty"</span>), <span class="keyword">new</span> File(<span class="string">"src/test/resources/jetty"</span>), <span class="keyword">new</span> File(webroot, <span class="string">"WEB-INF/classes/jetty"</span>) &#125;;</span><br><span class="line">        <span class="keyword">for</span> (File path: paths) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((path.exists()) &amp;&amp; (path.isDirectory())) &#123;</span><br><span class="line">                File[] jettys = path.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// ? this 是什么？</span></span><br><span class="line">                        <span class="comment">// ? this.val$p</span></span><br><span class="line">                        <span class="comment">// ? val$p.matcher().matches()</span></span><br><span class="line">                        <span class="keyword">return</span> (file.isFile()) &amp;&amp; (<span class="keyword">this</span>.val$p.matcher(file.getName()).matches());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// ? 奇怪为什么是 break？不应该是 continue？继续看逻辑</span></span><br><span class="line">                <span class="keyword">if</span> (jettys == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (File jf: jettys) &#123;</span><br><span class="line">                    <span class="comment">// ? File#getName()</span></span><br><span class="line">                    Log.info(<span class="string">"Plusing "</span> + jf.getName());</span><br><span class="line">                    XmlConfiguration cfg = <span class="keyword">new</span> XmlConfiguration(<span class="keyword">new</span> FileInputStream(jf));</span><br><span class="line">                    <span class="comment">// XmlConfiguration.#configure(XmlConfiguration#configure())</span></span><br><span class="line">                    cfg.configure(server);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.info(<span class="string">"\n\n"</span>);</span><br><span class="line">        <span class="comment">// ? Object#getClass().getMethod()</span></span><br><span class="line">        <span class="comment">// ? new Class[0]</span></span><br><span class="line">        <span class="comment">// getMethod().invoke(Object, new Object[0])</span></span><br><span class="line">        server.getClass().getMethod(<span class="string">"start"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(server, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E1A_u52A1_u903B_u8F91"><a href="#u4E1A_u52A1_u903B_u8F91" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">() </span><span class="expression">&#123; </span><br><span class="line">    创建 <span class="variable">logs</span> 目录，</span><br><span class="line"></span><br><span class="line">    配置 <span class="variable">jetty.webroot</span>，<span class="variable">jetty.context</span> 到 <span class="variable">System.setProperty</span>，</span><br><span class="line"></span><br><span class="line">    加载 <span class="variable">jetty.xml</span>，并尝试在 <span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/resources</span><span class="end-block">/jetty</span>，<span class="variable">src</span><span class="end-block">/test</span><span class="end-block">/resources</span><span class="end-block">/jetty</span>，</span><br><span class="line">    $&#123;<span class="variable">webroot</span>&#125;</span><span class="xml">/"WEB-INF/classes/jetty 找 jetty-[\\w]+.xml 文件，</span><br><span class="line">    找到之后会 XmlConfiguration.#configure(server)，</span><br><span class="line">    其中 server 是 jettyConfig.configure()，</span><br><span class="line"></span><br><span class="line">    "start"</span><br><span class="line">&#125; -&gt; void</span></span><br></pre></td></tr></table></figure>
<h3 id="u5176_u4E2D_initClasspath_28_29_3A"><a href="#u5176_u4E2D_initClasspath_28_29_3A" class="headerlink" title="其中 initClasspath():"></a>其中 <code>initClasspath()</code>:</h3><p>注意，感觉这段代码并没有对应用状态产生系统。既没有返回值，也没有 Side Effects。</p>
<h4 id="u4EE3_u7801-1"><a href="#u4EE3_u7801-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ? System#getProperty</span></span><br><span class="line">    <span class="comment">// ? java.class.path</span></span><br><span class="line">    String projectClassPath = System.getProperty(<span class="string">"java.class.path"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// () &#123; 字符串去除 '/jre' &#125; -&gt; javaHome</span></span><br><span class="line">    <span class="comment">// ? java.home</span></span><br><span class="line">    String javaHome = System.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">    <span class="keyword">if</span> (javaHome.endsWith(<span class="string">"/jre"</span>)) &#123;</span><br><span class="line">        javaHome = javaHome.substring(<span class="number">0</span>, javaHome.length() - <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Log.info(<span class="string">"JAVA_HOME="</span> + javaHome);</span><br><span class="line">    Log.info(<span class="string">"CLASSPATH="</span> + projectClassPath);</span><br><span class="line">    <span class="comment">// ProjectClassLoader 是项目代码</span></span><br><span class="line">    List &lt; String &gt; classpaths = ProjectClassLoader.getClasspaths();</span><br><span class="line">    <span class="keyword">boolean</span> logger = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (projectClassPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">        StringBuffer excludedString = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// ? File.pathSeperatorChar</span></span><br><span class="line">        String[] tokens = projectClassPath.split(String.valueOf(File.pathSeparatorChar));</span><br><span class="line">        <span class="keyword">for</span> (String entry: tokens) &#123;</span><br><span class="line">            <span class="comment">// ? String 赋值是 clone？</span></span><br><span class="line">            String path = entry;</span><br><span class="line">            <span class="comment">// 删除 '-y-'，或 '-n-'</span></span><br><span class="line">            <span class="keyword">if</span> ((path.startsWith(<span class="string">"-y-"</span>)) || (path.startsWith(<span class="string">"-n-"</span>))) &#123;</span><br><span class="line">                path = path.substring(<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果开始于 '-n-' 或者 javaHome</span></span><br><span class="line">            <span class="keyword">if</span> ((entry.startsWith(<span class="string">"-n-"</span>)) || (entry.startsWith(javaHome))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger) &#123;</span><br><span class="line">                    excludedString.append((excludedString.length() &gt; <span class="number">0</span> ? <span class="string">"\n"</span> : <span class="string">""</span>) + <span class="string">"Excluded entry="</span> + path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger) &#123;</span><br><span class="line">                    Log.info(<span class="string">"ProjectClassLoader: entry="</span> + path);</span><br><span class="line">                &#125;</span><br><span class="line">                classpaths.add(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.info(excludedString.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E1A_u52A1_u903B_u8F91-1"><a href="#u4E1A_u52A1_u903B_u8F91-1" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">() &#123;</span><br><span class="line">    获得 java.<span class="keyword">class</span>.path -&gt; projectClassPath，和 java.home -&gt; javaHome，</span><br><span class="line">    然后 split projectClassPath，并根据 path 的开头来增加到 classpaths.add(path)</span><br><span class="line">&#125; -&gt; void</span><br></pre></td></tr></table></figure>
<h3 id="u5176_u4E2D_loadConfig__u4EE3_u7801_uFF1A"><a href="#u5176_u4E2D_loadConfig__u4EE3_u7801_uFF1A" class="headerlink" title="其中 loadConfig 代码："></a>其中 <code>loadConfig</code> 代码：</h3><h4 id="u4EE3_u7801-2"><a href="#u4EE3_u7801-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadConfig</span><span class="params">()</span></span><br><span class="line"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// System.getProperties.load()</span></span><br><span class="line">    InputStream input = Bootstrap.class.getResourceAsStream(<span class="string">"/jetty/boot.properties"</span>);</span><br><span class="line">    <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.getProperties().load(input);</span><br><span class="line">        Log.info(<span class="string">"Boot Loaded..."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.info(<span class="string">"No /jetty/boot.properties found to load..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 项目代码</span></span><br><span class="line">    Config.reload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E1A_u52A1_u903B_u8F91-2"><a href="#u4E1A_u52A1_u903B_u8F91-2" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">()</span> &#123;</span><br><span class="line">    拿到 /jetty/boot.properties，并 <span class="type">System</span>.getProperties<span class="literal">()</span>.load<span class="literal">()</span> 进来，</span><br><span class="line"></span><br><span class="line">    <span class="type">Config</span>.reload<span class="literal">()</span></span><br><span class="line">&#125; -&gt; void</span><br></pre></td></tr></table></figure>
<h3 id="u6574_u4F53_u4E1A_u52A1_u903B_u8F91"><a href="#u6574_u4F53_u4E1A_u52A1_u903B_u8F91" class="headerlink" title="整体业务逻辑"></a>整体业务逻辑</h3><ol>
<li>jetty 配置与启动</li>
<li>自定义的初始化 classpath 逻辑</li>
<li>加载 jetty 的 boot 属性配置</li>
</ol>
<h3 id="u6574_u4F53_u9700_u8981_u5B66_u4E60_u7684_u77E5_u8BC6_u70B9"><a href="#u6574_u4F53_u9700_u8981_u5B66_u4E60_u7684_u77E5_u8BC6_u70B9" class="headerlink" title="整体需要学习的知识点"></a>整体需要学习的知识点</h3><h4 id="System-getProperty_28_29"><a href="#System-getProperty_28_29" class="headerlink" title="System.getProperty()"></a><code>System.getProperty()</code></h4><p><code>System.getProperty()</code>，参考链接 <a href="http://www.cnblogs.com/sigh-differ/archive/2012/12/25/java-system-getproperty.html" target="_blank" rel="external">Java 中System里getProperty 方法获得系统参数</a></p>
<h4 id="org-eclipse-jetty-xml-XmlConfiguration"><a href="#org-eclipse-jetty-xml-XmlConfiguration" class="headerlink" title="org.eclipse.jetty.xml.XmlConfiguration"></a><code>org.eclipse.jetty.xml.XmlConfiguration</code></h4><p><code>configure()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object server = jettyConfig.configure();</span><br><span class="line"></span><br><span class="line">XmlConfiguration cfg = <span class="keyword">new</span> XmlConfiguration(<span class="keyword">new</span> FileInputStream(jf));</span><br><span class="line">cfg.configure(server);</span><br><span class="line"></span><br><span class="line">server.getClass().getMethod(<span class="string">"start"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(server, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="http://www.blogjava.net/DLevin/archive/2014/05/24/414061.html" target="_blank" rel="external">深入Jetty源码之XmlConfiguration实现</a></p>
<blockquote>
<p>XmlConfiguration可以使用一个XML文件初始化一个Object实例，它支持属性设置、方法调用、新建新实例等</p>
<p>可以使用带Object实例的参数或不带参数两种方式调用configure方法，带参数表示将XML中内容配置实例中的属性，不带参数则先在内部创建class属性指定的类实例，然后使用XML的内容配置该新创建的实例的属性。</p>
</blockquote>
<h4 id="System-getProperties_28_29-load_28_29"><a href="#System-getProperties_28_29-load_28_29" class="headerlink" title="System.getProperties().load()"></a><code>System.getProperties().load()</code></h4><p>使用Properties的load方法，将这个文件先加载进来，之后可以使用getProperty方法将对应键的值得到。</p>
<h2 id="u5176_u4ED6_u77E5_u8BC6_u70B9"><a href="#u5176_u4ED6_u77E5_u8BC6_u70B9" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="spring__u914D_u7F6E"><a href="#spring__u914D_u7F6E" class="headerlink" title="spring 配置"></a>spring 配置</h3><h4 id="PropertyPlaceholderConfigurer"><a href="#PropertyPlaceholderConfigurer" class="headerlink" title="PropertyPlaceholderConfigurer"></a>PropertyPlaceholderConfigurer</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"propertyConfigurer"</span> </span><br><span class="line">        <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath:*-common-config.properties<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath:*-custom-config.properties<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="http://blog.csdn.net/zh417/article/details/1728874" target="_blank" rel="external">浅析Spring框架下PropertyPlaceholderConfigurer类</a></p>
<blockquote>
<p>首先要弄清楚一个概念：bean factory post-processor。<br>A bean factory post-processor is a java class which implements the<br>org.springframework.beans.factory.config.BeanFactoryPostProcessor interface. It is executed manually  (in the case of the BeanFactory) or automatically (in the case of the ApplicationContext) to apply changes of some sort to an entire BeanFactory, after it has been constructed.</p>
<ol>
<li>首先bean factory post-processor实现了org.springframework.beans.factory.config.BeanFactoryPostProcessor接口。</li>
<li>在BeanFactory的情况下它被手动的执行。</li>
<li>在ApplicationContext的条件下它会自动的执行。</li>
<li>最关键的一点是，是在一个类的实例被构造出来之后，对整个BeanFactory进行修改。</li>
</ol>
</blockquote>
<p>那么PropertyPlaceholderConfigurer类就是bean factory post-processor的一种，它的作用是一个资源属性的配置器，能够将BeanFactory的里定义的内容放在一个以.propertis后缀的文件中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClassName"</span>&gt;</span><span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;driver&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span>&gt;</span><span class="tag">&lt;<span class="title">value</span>&gt;</span>jdbc:$&#123;dbname&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>而 jdbc.propertis：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=org.hsqldb.jdbcDriver</span><br><span class="line">jdbc.url=<span class="string">jdbc:</span><span class="string">hsqldb:</span><span class="string">hsql:</span><span class="comment">//production:9002</span></span><br><span class="line">jdbc.username=sa</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure>
<p>引用就是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"propertyConfigurer"</span>  <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">value</span>&gt;</span>/WEB-INF/jdbc.properties<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将上边一段配置注册在web.xml中就可以了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>/WEB-INF/spring-context.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，不要忘了spring的监听器注册：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。来源：<a href="http://blog.csdn.net/ysughw/article/details/8992322" target="_blank" rel="external">ContextLoaderListener作用详解</a>。</p>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><h4 id="WEB-INF"><a href="#WEB-INF" class="headerlink" title="WEB-INF"></a>WEB-INF</h4><p>WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。来源：<a href="http://baike.baidu.com/link?url=lXauen8uR9fVVAOBticfuWrBNz0s65cto_raI_B9ugUUB0uCuEENR3_rjApc2LeEcTkynqrphIEHOwN9e3xTlq" target="_blank" rel="external">web-inf</a>。</p>
<h4 id="web-xml__u8BE6_u89E3"><a href="#web-xml__u8BE6_u89E3" class="headerlink" title="web.xml 详解"></a>web.xml 详解</h4><h5 id="u52A0_u8F7D_u987A_u5E8F"><a href="#u52A0_u8F7D_u987A_u5E8F" class="headerlink" title="加载顺序"></a>加载顺序</h5><p>参考：<a href="http://www.cnblogs.com/hellojava/archive/2012/12/28/2835730.html" target="_blank" rel="external">web.xml文件详解</a></p>
<p>web.xml主要用来配置 Filter、Listener、Servlet 等。</p>
<p>WEB容器的加载顺序是： ServletContext -&gt; context-param -&gt; listener -&gt; filter -&gt; servlet。并且这些元素可以配置在文件中的任意位置。</p>
<p>加载过程顺序如下：</p>
<ol>
<li>启动一个 WEB 项目的时候，WEB 容器会去读取它的配置文件 web.xml，读取 <listener> 和 <context-param> 两个结点。 </context-param></listener></li>
<li>紧接着，容创建一个 ServletContext（servlet上下文），这个web项目的所有部分都将共享这个上下文。 </li>
<li>容器将 <context-param> 转换为键值对，并交给servletContext。 </context-param></li>
<li>容器创建 <listener> 中的类实例，创建监听器。 </listener></li>
</ol>
<blockquote>
<p>所以，是现有 ServletContext，然后将 context-param 交给 ServletContext，然后创建 listener 实例</p>
</blockquote>
<h5 id="u6587_u4EF6_u5143_u7D20_u8BE6_u89E3"><a href="#u6587_u4EF6_u5143_u7D20_u8BE6_u89E3" class="headerlink" title="文件元素详解"></a>文件元素详解</h5><p><strong>1.</strong> schema</p>
<p><strong>2.</strong> <display-name> Web应用名称</display-name></p>
<p>提供GUI工具可能会用来标记这个特定的Web应用的一个名称</p>
<p><strong>3.</strong> <context-param>上下文参数</context-param></p>
<p>声明应用范围内的初始化参数。它用于向 ServletContext提供键值对，即应用程序上下文信息。我们的listener, filter等在初始化时会用到这些上下文中的信息。在servlet里面可以通过getServletContext().getInitParameter(“context/param”)得到。</p>
<p><strong>4.</strong> <filter>过滤器</filter></p>
<p><strong>5.</strong> <listener>监听器</listener></p>
<p><strong>6.</strong> <servlet></servlet></p>
<p><servlet></servlet> 用来声明一个servlet的数据，主要有以下子元素：</p>
<ul>
<li><servlet-name></servlet-name> 指定servlet的名称</li>
<li><servlet-class></servlet-class> 指定servlet的类名称</li>
<li><init-param></init-param> 用来定义参数，可有多个init-param。在servlet类中通过getInitParamenter(String name)方法访问初始化参数</li>
<li><load-on-startup></load-on-startup>指定当Web应用启动时，装载Servlet的次序。当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet。当值为负或未定义：Servlet容器将在Web客户首次访问这个servlet时加载它。</li>
</ul>
<p><servlet-mapping></servlet-mapping> 用来定义servlet所对应的URL，包含两个子元素</p>
<ul>
<li><servlet-name></servlet-name> 指定servlet的名称</li>
<li><url-pattern></url-pattern> 指定servlet所对应的URL</li>
</ul>
<p>其他参考文章：<a href="http://zhxing.iteye.com/blog/399668" target="_blank" rel="external">web.xml 中的listener、 filter、servlet 加载顺序及其详解</a></p>
<h3 id="jetty__u914D_u7F6E"><a href="#jetty__u914D_u7F6E" class="headerlink" title="jetty 配置"></a>jetty 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>org.eclipse.jetty.servlet.SessionIdPathParameterName<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>none<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="http://ykgarfield.github.io/jetty-9.2.3.v20140905-zh/session-management.html" target="_blank" rel="external">Session 管理</a></p>
<blockquote>
<p>Session URL 参数名称.默认为 jsessionid,但是可以使用这个 context 参数为一个特定 webapp 进行设置. 设置为 “none” 禁用 URL 重写.</p>
</blockquote>
<h3 id="u81EA_u5DF1_u5199_listener"><a href="#u81EA_u5DF1_u5199_listener" class="headerlink" title="自己写 listener"></a>自己写 listener</h3><p>例子：</p>
<p>配置 xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>com.meituan.service.mobile.tesla.core.listener.ContextListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        WebApplicationContext webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());</span><br><span class="line">        <span class="comment">// 服务启动时，初始化context</span></span><br><span class="line">        LogService.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53E6_u5916_u4E00_u4E9B_u9AD8_u7EA7_u7528_u6CD5"><a href="#u53E6_u5916_u4E00_u4E9B_u9AD8_u7EA7_u7528_u6CD5" class="headerlink" title="另外一些高级用法"></a>另外一些高级用法</h3><h4 id="u53CD_u5C04"><a href="#u53CD_u5C04" class="headerlink" title="反射"></a>反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? Object#getClass().getMethod()</span></span><br><span class="line"><span class="comment">// ? new Class[0]</span></span><br><span class="line"><span class="comment">// getMethod().invoke(Object, new Object[0])</span></span><br><span class="line">server.getClass().getMethod(<span class="string">"start"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(server, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<h4 id="Pattern-compile"><a href="#Pattern-compile" class="headerlink" title="Pattern.compile"></a>Pattern.compile</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pattern p = Pattern.compile(<span class="string">"jetty-[\\w]+.xml"</span>);</span><br><span class="line"><span class="keyword">return</span> (file.isFile()) &amp;&amp; (<span class="keyword">this</span>.val$p.matcher(file.getName()).matches());</span><br></pre></td></tr></table></figure>
<p>完全没有遇见过 <code>this.val$p</code> 这种用法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Jetty__u542F_u52A8_u4EE3_u7801"><a href="#Jetty__u542F_u52A8_u4EE3_u7801" class="headerlink" title="Jetty 启动代码"></a>Jetty 启动代码</h2><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[知乎理财话题整理]]></title>
    <link href="http://shane.hsi.rocks/2016/02/22/Financing-Knownledge-from-Zhihu/"/>
    <id>http://shane.hsi.rocks/2016/02/22/Financing-Knownledge-from-Zhihu/</id>
    <published>2016-02-22T10:26:18.000Z</published>
    <updated>2016-02-23T13:59:56.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读 Why I No Longer Use MVC Frameworks]]></title>
    <link href="http://shane.hsi.rocks/2016/02/19/Reading-Why-I-No-Longer-Use-MVC-Frameworks/"/>
    <id>http://shane.hsi.rocks/2016/02/19/Reading-Why-I-No-Longer-Use-MVC-Frameworks/</id>
    <published>2016-02-19T02:40:25.000Z</published>
    <updated>2016-02-20T12:58:48.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.infoq.com/articles/no-more-mvc-frameworks" target="_blank" rel="external">Why I No Longer Use MVC Frameworks</a></p>
<p>HN 讨论链接：<a href="https://news.ycombinator.com/item?id=11104356" target="_blank" rel="external">https://news.ycombinator.com/item?id=11104356</a></p>
<p><strong>PS</strong>：这篇文章非常不直观地透露出民科和专科的区别。</p>
<blockquote>
<p>The worst part of my job these days is designing APIs for front-end developers. </p>
</blockquote>
<p>笑尿。前端程序员首先要是个程序员。程序员的专业素养需要有。</p>
<p>是的，作者直接答应了前端的没有设计的 API，然后项目完成后，就会有超级多的 API。</p>
<blockquote>
<p>and where I touched the sheer power of reactive and functional programming, a journey focused on simplicity and scraping the bloat that our industry is so good at producing.</p>
</blockquote>
<p>好吧，这篇文章是推销 Functional 和 Reactive 的。作者认为它们是专注于简洁性的。</p>
<blockquote>
<p>Facebook, so far, has resisted fixing that gap at the framework level.</p>
</blockquote>
<p>Facebook 拒绝在 React 的框架级别引入 MVC 这些解决数据（API）的特性。</p>
<blockquote>
<p>After using React and seeing what was coming in Angular2, I felt depressed: these frameworks systematically force me to use the BFF “Screen Scraping” pattern where every server-side API matches the dataset of a screen, in and out.</p>
</blockquote>
<p>作者又叹息了。每一个服务端的 API 对应屏幕上的一个 dataset。</p>
<blockquote>
<p>That’s when I had my “to hell with it” moment. I’ll just build a Web app without React, without Angular, no MVC framework whatsoever, to see if I could find a better articulation between the View and the underlying APIs.</p>
</blockquote>
<p>所以，这篇文章要探讨的就是，View 和底层 APIs 的关系。</p>
<blockquote>
<p>What I really liked about React was the relationship between the model and the view. The fact that React is not template based and that the view itself has no way to request data felt like a reasonable path to explore (you can only to pass data to the view).</p>
</blockquote>
<p>作者很喜欢 React 处理 Model 和 View 的方式，是传递，而不是请求。职责解耦。sole purpose。</p>
<blockquote>
<p>When you look long enough, you realize that the sole purpose of React is to decompose the view in a series of (pure) functions and the JSX syntax:</p>
<p><v params="{M}/"><br>is nothing different than:<br>V = f( M )</v></p>
</blockquote>
<p>非常精简的 <code>V=f(M)</code>。</p>
<blockquote>
<p> GraphQL is nothing more than a declarative way to create a view-model. Being forced to shape the model to match the view is the problem, not the solution. </p>
</blockquote>
<p>对作者的这个观点持保留态度。继续看。</p>
<blockquote>
<p>Unlike templates or “queries written by front-end engineers”, functions do not require the model to fit the view.<br>When the view is created from a function (as opposed to a template or a query) you can transform the model as needed to best represent the view without adding artificial constraints on the shape of the model.</p>
</blockquote>
<p>这是作者对上述观点的继续解答。因为 View 是 function，而不是 templates 或者 query。而 function 是不需要 model 来符合 view 的。因为你可以按需改变 model 的形状来符合 view。</p>
<blockquote>
<p>For instance, if the view displays a value v and a graphical indicator as to whether this value is great, good or bad, there is no reason to have the indicator’s value in your model: the function should simply compute the value of the indicator from the value v provided by the model.<br> V = f( vm(M) )</p>
</blockquote>
<p>根据作者举得这个例子，我理解了。作者认为根据一个 v，来计算 great，good，bad。这个 great，good，bad 不应该放在 model。</p>
<p>但是应该放在 view model 里啊。问题是，model -&gt; view model 的这层逻辑应该放在哪里？</p>
<p>其实很简单，以网络传输最小字节数为基准。我 view 只应该要我想要的。我不要有逻辑。给我什么就显示什么。逻辑意味着维护成本，浏览器端维护意味着可能的泄露。</p>
<blockquote>
<p>As a veteran MDE practitioner, I can assure you that you are infinitely better off writing code than metadata, be it as a template or a complex query language like GraphQL.</p>
</blockquote>
<p>那是因为 metadata 做的语义化的东西概念太多太杂。</p>
<blockquote>
<p>The natural interface they create allows you to “theme” your Web app or Website or render the view in different technologies (native for instance).</p>
</blockquote>
<p>theme 这个词很吸引我。</p>
<blockquote>
<p>The function implementations have the potential to enhance the way we implement responsive design as well.</p>
</blockquote>
<p>作者说，函数式实现也有利于增强响应式设计的实现方式。</p>
<blockquote>
<p>But most importantly, this approach allows the view to declare the minimum contract with the model and leaves the decision to the model as to what it the best way to bring this data to the view. Aspects like caching, lazy loading, orchestration, consistency are entirely under the control of the model. Unlike templates or GraphQL there is never a need to serve a direct request crafted from the view perspective.</p>
</blockquote>
<p>最重要的就是，view 可以对 model 声明尽可能少的 contract。model 来负责一些切面需求，比如缓存，延迟加载，组合，一致性。</p>
<p>注：model，不希望有 model 这个粒度，而是类似于 GraphQL 的，property 粒度的。这块的确会复杂，但是如果把数据结构图理清的话，会把这块完全抽象出去。</p>
<blockquote>
<p>The core issue here is, as Andre Medeiros so eloquently puts it, that the MVC pattern is “interactive” (as opposed to Reactive). In traditional MVC, the action (controller) would call an update method on the model and upon success (or error) decide how to update the view. As he points out, it does not have to be that way, there is another equally valid, Reactive, path if you consider that actions should merely pass values to the model, regardless of the outcome, rather than deciding how the model should be updated.</p>
</blockquote>
<p>MVC 模式是交互式的。在传统的 MVC 模式中，action (controller) 会调用 model 上的 update 方法。然后根据是 success 或者 error 来更新 view。Andre Medeiros 也指出，可以使用另一种同样有效的，响应式的方案，只要你把 action 只是传递值给 model，不用关心结果。</p>
<blockquote>
<p>The key question then becomes: how do you integrate actions in the reactive flow?</p>
</blockquote>
<p>这的确是很多人争论的，flux 中的 action 需不需要？</p>
<blockquote>
<p>If you want to understand a thing or two about Actions, you may want to take a look at TLA+. TLA stands for “Temporal Logic of Actions”, a formalism invented by Dr. Lamport, who got a Turing award for it.<br> In TLA+, actions are pure functions:<br>            data’ = A (data)</p>
<p>I really like the TLA+ prime notation because it reinforces the fact that functions are mere transformations on a given data set.</p>
</blockquote>
<p>作者首先引入了 TLA 的概念。Actions 是纯函数。并且强化了事实，函数只是所给数据集的转化。</p>
<blockquote>
<p>With that in mind, a reactive MVC would probably look like:<br>            V = f( M.present( A(data) ) ) </p>
<p>Actions, again, are pure functions, with no state and no side effect (with respect to the model, not counting logging for instance).</p>
</blockquote>
<p>Actions 是纯函数，没有状态和副作用。比如没有计数日志这些。</p>
<blockquote>
<p>This paragraph is very important, so please read carefully. We have seen that, in TLA+, the actions have no side effects and the resulting state is computed, once the model processed the action outputs and updated itself. That is a fundamental departure from the traditional state-machine semantics where the action specifies the resulting state, i.e. the resulting state is independent of the model. In TLA+, the actions that are enabled and therefore available to be triggered in the state representation (i.e. the view) are not linked directly to the action that triggered the state change. In other words, state machines should not be specified as tuples that connect two states (S1, A, S2) as they traditionally are, they are rather tuples of the form (Sk, Ak1, Ak2,…) that specify all the actions enabled, given a state Sk, with the resulting state being computed after an action has been applied to the system, and the model has processed the updates.</p>
</blockquote>
<p>这一段很重要，我也全段摘出解读。</p>
<p>在 TLA+ 中，actions 是没有副作用的，结果状态是计算出来的，有 model 来处理 actions outputs，自己更新自己。这和传统的状态机语法有本质的区别，在状态机中，结果状态是有 action 指定的，和 model 是独立的。</p>
<p>在 TLA+ 中，可以在 state representation（比如 view）被触发的 actions  不是用来触发 state change 的 action。</p>
<p>所以，状态机不能再表示为连接两种状态的管道（tuple），即 <code>(S1, A, S2)</code>，而是，给定一个状态，<code>Sk</code>，然后再给定所有的启用的 actions，即 <code>(Sk, Ak1, Ak2, ...)</code>。结果状态是在一个 action 被用于应用后计算出来的，由 model 来处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接：<a href="http://www.infoq.com/articles/no-more-mvc-frameworks" target="_blank" rel="external">Why I No Longer Use MVC Frameworks</a>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近在做的事情]]></title>
    <link href="http://shane.hsi.rocks/2016/02/19/Some-Recent-Doings/"/>
    <id>http://shane.hsi.rocks/2016/02/19/Some-Recent-Doings/</id>
    <published>2016-02-19T00:15:55.000Z</published>
    <updated>2016-02-20T13:43:49.000Z</updated>
    <content type="html"><![CDATA[<p>整理下最近在做的事情。</p>
<blockquote>
<p>不求快，也不求精美。这个博客，目前只是一种能方便记录的地方（这么说，电脑是我目前的主要生产力工具了）。<br>这是第一篇，整理最近在做的事情。我准备挑几个点，或者整理出依赖关系，找到一些目标。然后梳理下2016年的规划。</p>
</blockquote>
<p>一篇一篇的看下。</p>
<ul>
<li>2015 Annual Retro 记录了我2015年的努力。前端，JavaScript，CSS，甚至想涉足设计方面。以及简单的看了下 Webkit 导论。和一些 Functional，Reactive 的学习。</li>
<li><p>2015 Annual Retro 文学类书单和旅行。</p>
</li>
<li><p>2016 The Shawshank Redemption 我其实想说的是，要有理想，要有远见。远见这种东西，顾名思义，能见远。然而，一是，目力难及，二是我更倾向于做好当前事。所以，如果要有远见，必须在每天繁杂的事务中，节余出一些时间来，看书也好，其他方式也好，每天少量的积累。这就需要很好的规划性。</p>
</li>
<li><p>2016 The Shawshank Redemption 关于规划性和时间的利用上，希望再次探讨下娱乐的意义。娱乐对于我来说，主要就是看动漫，看知乎等等，能不能把这些从心态上规避掉。</p>
</li>
<li><p>ISP in Front-end Component Development 这是我的一个设想。我认为前端目前比较没有设计性，很多东西得不到积累。所谓的很多东西，如果前端能抽象出标准和实现来，可能就相对容易积累一点。只可惜由于动态语言的特性，大家都不喜欢抽象出细粒度的接口，仅仅提供最终的实现。我希望能找出，React.js 的 View 层的接口等等。</p>
</li>
<li><p>JavaScript new constructor this from zhihu 气宗。这块必须要修炼，难度也不大，概念相对来说是最少，只是坑坑洼洼的细节较多（相比于有用的细节）。再次强调，这块肯定是后面要积累的。也不要说，即使之后不做 JavaScript 了，不需要。即使之后学习 Java 了，这块也不能丢。练好了，夯实了，确保融入记忆里了，再说。不要一件事做一半。</p>
</li>
<li><p>Thoughts on Web Development (To Update) 这个是我去年到现在一直在思考的问题，越思考发现涉及到的细节越多，也就有了一系列的思考。这个话题比较大，基本涉及了我工作的领域前端所有需求。这块希望能根据区别分解下，然后找到每个点的依赖，联系。</p>
</li>
<li><p>Use Router5 自己写 Router，实际上是奔着 Navigator Stack 去的。</p>
</li>
<li><p>You don’t Know JS - this &amp; prototype note 气宗修炼最佳秘籍。必须看完，复习，复读。</p>
</li>
</ul>
<hr>
<p>2016年02月20日21:38:27 更新</p>
<p>由于读了这篇文章：<a href="http://www.infoq.com/articles/no-more-mvc-frameworks" target="_blank" rel="external">Why I No Longer Use MVC Frameworks</a> ，感觉有很多东西需要学习。</p>
<p>好多事情。写这一篇文章的原因 – 整理。</p>
<p>所以，今天明天花时间系统学习如何使用 Omni Focus，材料来自 <a href="https://www.zhihu.com/topic/19568532/top-answers" target="_blank" rel="external">知乎</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理下最近在做的事情。</p>
<blockquote>
<p>不求快，也不求精美。这个博客，目前只是一种能方便记录的地方（这么说，电脑是我目前的主要生产力工具了）。<br>这是第一篇，整理最近在做的事情。我准备挑几个点，或者整理出依赖关系，找到一些目标。然后梳理下2016]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CS 的数学要求]]></title>
    <link href="http://shane.hsi.rocks/2016/02/06/Math-Requirements-for-Computer-Science/"/>
    <id>http://shane.hsi.rocks/2016/02/06/Math-Requirements-for-Computer-Science/</id>
    <published>2016-02-06T07:53:23.000Z</published>
    <updated>2016-02-20T12:57:54.000Z</updated>
    <content type="html"><![CDATA[<p>有感于这篇回答（<a href="https://www.zhihu.com/question/19635359" target="_blank" rel="external">什么是 Monad (Functional Programming)？</a>）的这一句话：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不就是自函子范畴里的幺半群么</span><br></pre></td></tr></table></figure>
<p>对计算机所需要的数学或者就是纯粹的数学产生了一些兴趣。</p>
<p>学习数学一直是我心中的小小的欲望，奈何能力有限，资源不足。不过，数学的魅力的确深远，如果能够知道自己平日里做的很多工作、很多想法都可以有一种模式或是一种解释，真是一件幸事。</p>
<p>来自：<a href="http://www.guokr.com/question/146597/" target="_blank" rel="external">计算机专业的数学应学到什么水平？应该学习数学的那些分支？</a></p>
<p>应用比较广泛的基础课：</p>
<ul>
<li><p>微积分（计算机建立模型的时候常常会用到）</p>
</li>
<li><p>线性代数（像著名的 page rank 就是特征值理论的一个重要应用. 很多问题最终都能化为求解线性方程组问题(例如, 用有限差分法或有限元法解偏微分方程, 用最小二乘法求最佳逼近,等等). 线性代数知识还常在机器学习或数据挖掘中被用来降低数据的维度. 还有很多其他的应用.）</p>
</li>
<li><p>概率论，数理统计，随机过程（在最近的人工智能的各个领域则是非常重要的基础, 很多机器学习算法都是基于统计模型的, 像 Bayes 统计什么的应用极为广泛(例如垃圾邮件过滤.)）</p>
</li>
</ul>
<p>和计算机相关的：</p>
<ul>
<li>离散数学（离散数学不同的书选取的内容不大一样, 不过一般都有逻辑阿, 图论阿, 有的还有自动机什么的, 一看就和计算机关系紧密.）</li>
<li>数值分析（数学理论大多是抽象的, 想在计算机上用就离不开数值分析了; 用数值方法解一些无法求出解析解的方程也很有实用价值.）</li>
</ul>
<p>和不同专业相关的数学知识：</p>
<ul>
<li><p>像是信息安全, 编码方面的, <strong>数论</strong> 知识自然不可缺少, 建议多学一些代数知识, 也包括代数几何啊什么的. (<strong>复变函数</strong> 什么的都是基础啊….)</p>
</li>
<li><p>像是(离散)算法方面的, 可以学学 Knuth 的具体数学, 另外还得学些运筹学, 图论, 组合数学什么的.</p>
</li>
<li><p>像是图形处理方面, 恐怕就需要很多几何知识了, 学几何这玩意代数和分析都得好, 像解析几何, 射影几何, 微分几何, 黎曼几何, 代数几何, 拓扑学呀都在这个领域用的上. 还得熟悉样条理论, 曲线与曲面的表示啊等等.</p>
</li>
<li><p>图像处理, 也需要不少数学. 最近利用偏微分方程,反问题啊来研究图像处理的很热门. 还有傅立叶分析, 小波分析呀都很有用.</p>
</li>
<li><p>人工智能相关的话, 得把概率, 统计, 随机过程什么的学的更深入一些.</p>
</li>
</ul>
<hr>
<p>另外在维基百科里也有一些猎奇：</p>
<p>这些是由 monad（单子） 引出的？</p>
<ul>
<li>范畴论</li>
<li>抽象代数</li>
</ul>
<p>另外这一篇非常全面：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%AD%A6%E7%A7%91%E5%88%86%E7%B1%BB%E6%A0%87%E5%87%86" target="_blank" rel="external">数学学科分类标准</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有感于这篇回答（<a href="https://www.zhihu.com/question/19635359" target="_blank" rel="external">什么是 Monad (Functional Programming)？</a>）的这一句话：</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Execution in the Kingdom of Nouns 译]]></title>
    <link href="http://shane.hsi.rocks/2016/02/05/Execution-in-the-Kingdom-of-Nouns-zh-cn/"/>
    <id>http://shane.hsi.rocks/2016/02/05/Execution-in-the-Kingdom-of-Nouns-zh-cn/</id>
    <published>2016-02-05T08:35:12.000Z</published>
    <updated>2016-02-20T12:56:41.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://steve-yegge.blogspot.tw/2006/03/execution-in-kingdom-of-nouns.html" target="_blank" rel="external">Execution in the Kingdom of Nouns</a></p>
<blockquote>
<p>他们脾气火爆，某些人-特别是动词（verbs）：他们极度自负-可以用形容词（adjectives）来做任何事，但不能用动词-然而，我却能掌控所有！深不可测吧！我就把话放这了！<br>矮胖子</p>
</blockquote>
<p>你好，世界！今天我们来听一个故事，关于邪恶的国王 Java 和他对世界大同的动词（verb）邮票停运（stamp-outage）。</p>
<p>注意：故事不是好结局。不建议有心脏病和嘴炮的人士阅读。如果你易怒，或极可能在评论区无理取闹，请立刻停止阅读。</p>
<p>在开始这个故事前，先来些模糊的概念。</p>
<h2 id="u5783_u573E_u6EA2_u51FA_uFF08The_Garbage_Overfloweth_uFF09"><a href="#u5783_u573E_u6EA2_u51FA_uFF08The_Garbage_Overfloweth_uFF09" class="headerlink" title="垃圾溢出（The Garbage Overfloweth）"></a>垃圾溢出（The Garbage Overfloweth）</h2><p>Java 党喜欢 “使用案例（use cases）”，所以我们也从一个案例开始：即，快点倒垃圾。如：”囧尼，快倒垃圾！都溢出来了！”</p>
<p>如果你是正常的，日常的，打理各种花园的，说英语的人，现在你被要求形容倒垃圾这个行为，你也许这样粗略地描述：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span> <span class="operator">the</span> garbage bag <span class="built_in">from</span> under <span class="operator">the</span> sink</span><br><span class="line">carry <span class="keyword">it</span> out <span class="operator">of</span> <span class="operator">the</span> garage</span><br><span class="line">dump <span class="keyword">it</span> <span class="operator">in</span> <span class="operator">the</span> garbage can</span><br><span class="line">wakl back inside</span><br><span class="line">wash your hands</span><br><span class="line">plop back down <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">couch</span></span></span><br><span class="line">resume playing your video game (<span class="operator">or</span> whatever you were doing)</span><br></pre></td></tr></table></figure>
<p>即使你不说英语，大概也是这么想的，只不过换做你最爱的语言。暂且忽略语言，也不抠细节，倒垃圾就是一系列动作，先到摆在外面的垃圾桶，然后再进来，因为你还要做刚刚被迫停止的事情。</p>
<p>我们的思维充斥着勇敢、恐惧和激情：我们生活、呼吸、走路、交流、哭泣、祈祷、恐惧、进食、饮水、停止、行进，当然也包括倒垃圾。其他时间，我们是自由，想干什么就可以干什么。如果我们是阳光下的石头，也能凑合过日子，但却不是自由的。自由来源于，我们可以做事情。</p>
<p>当然，我们的思维也充斥着名词。我们吃名词，从商店里买名词，坐在名词上，睡在名词上。名词可以窜到你脑海里，在名词上再创建一个大名词。名词就是事物，如果没有事物，我们又将如何存在？但是，它们也就仅仅是事物，或者只是我们观察到的对象的名字而已。那里有建筑物，这里有石头。小孩子都能指认出名词。不过，名词身上发生的变化让它们变得值得玩味。</p>
<p>变化需要动作，动作催生变化。动作是生活的调味品。动作甚至可以给调味品的调味品。总之，只有你吃了才是好吃的。名词无处不在，生命却亘古变迁，原力源于动词。</p>
<p>当然，除了动词和名词，我们也有形容词，介词，代词，冠词，不可或缺的连接词，可口的感叹词，所有这些组合起来才能让我们思考或诉说有趣的事情。任何语音都扮演一个角色，个个都很重要，一个都不能少。</p>
<p>所以，如果我们突然决定不用动词了，是不是很奇怪？</p>
<p>就有一个地方是这样做的…</p>
<h2 id="u540D_u8BCD_u738B_u56FD_uFF08The_Kindom_of_Nouns_uFF09"><a href="#u540D_u8BCD_u738B_u56FD_uFF08The_Kindom_of_Nouns_uFF09" class="headerlink" title="名词王国（The Kindom of Nouns）"></a>名词王国（The Kindom of Nouns）</h2><p>在 Javaland 王国，国王 Java 施行硅（silicon）拳统治，人们不能有个人意识。在 Javaland，名词很重要，这是国王 Java 立下的规矩。名词是王国里的一等公民。他们穿着由形容词提供的华美服饰，生活地轻松愉快。形容词虽然不能进入高等级种群，但是他们也庆幸自己不是动词。</p>
<p>因为动词在王国里处境非常非常糟糕。</p>
<p>在 Javaland，国王 Java 国王法令中，动词是名词的所有之物。不仅仅是宠物，还做其他杂事，苦力。它们是王国的奴隶阶层，或者是农奴，签了卖身契的仆人。Javaland 的其他公民都满意它们的生活现状，基本上都认为这种生活是理所当然的。</p>
<p>动词要负责 Javaland 里所有的工作，但因为言论禁止，没有一个动词想过追求自由。如果你看到大街上有动词出没，它身边必须有名词监管。</p>
<p>既然要”陪同”名词，作为动词也要假装不是动词，它必须被授予 <code>VerbEscorter</code>的身份来行使这份工作。不过”被授予（procure）”，”行使(facilitate<br>)”也是动词啊？如果发生这种事情，就有”授予者(Procurer)”和”行使者(Facilitator)”来做这些低层次的事情（分别佳作 Procurement 和 Facilitation）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://steve-yegge.blogspot.tw/2006/03/execution-in-kingdom-of-nouns.html" target="_blank" rel="external">Execution in the Ki]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读一些知乎 2016-02-05]]></title>
    <link href="http://shane.hsi.rocks/2016/02/05/Read-some-Zhihu-2016-02-05/"/>
    <id>http://shane.hsi.rocks/2016/02/05/Read-some-Zhihu-2016-02-05/</id>
    <published>2016-02-05T07:21:46.000Z</published>
    <updated>2016-02-20T12:58:27.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="https://www.zhihu.com/question/19585576" target="_blank" rel="external">什么程序设计语言机制是处理异步 IO 最恰当的抽象？</a></p>
<p>题干：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Web服务器有两大编程模型：线程式的和事件驱动的</span><br></pre></td></tr></table></figure>
<p>回答：</p>
<p>不鳥萬Rio</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先声明一个基本假设：人的思维是线性的。程序员也是人，思维当然也是线性的。线性这里指的是事件发生顺序的前因后果关系。如果你不认同这个假设，下面讨论的几种风格的区别意义不是很大。</span><br></pre></td></tr></table></figure>
<p>线性，顺序，因果。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于回调的异步 I/O 风格（如 <span class="keyword">Node</span>.<span class="identifier"></span><span class="title">js</span> 和 Python Twisted）会导致控制流倒置（inverse of control flow），使得事件发生的先后顺序不清晰明了，从而造成代码的理解和调试困难。在 <span class="keyword">Node</span>.<span class="identifier"></span><span class="title">js</span> 出现之前，广泛使用的 Python Twisted 库大量使用了这样的风格。一般认为这样的代码可维护性很低。基于回调的异步 I/O 的优势在于其开销小、效率高。单线程的架构也避免的多线程修改可变状态的锁的问题（当然单线程也是个限制，能够有效利用多核的方式局限于多进程）。</span><br></pre></td></tr></table></figure>
<p>异步 I/O 风格，回调，导致控制流倒置（inverse of control flow)。</p>
<p>使得事件发生的先后顺序不清晰明了。难于理解代码，和调试。可维护性低。</p>
<p>优势，开销小，效率高。</p>
<p>单线程避免多线程修改可变状态的锁的问题。</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于线程的同步 <span class="keyword">I</span>/<span class="keyword">O</span> 风格则没有这个问题：每个线程相对独立，且线程内部的控制流是线性的。理解和维护基于线程式的代码相对容易（先不谈锁的问题，不是这里讨论的重点，这里只考虑用于 <span class="keyword">I</span>/<span class="keyword">O</span> 的场景）。基于线程的同步 <span class="keyword">I</span>/<span class="keyword">O</span> 的问题是它的可扩展性很低，因为每个线程的内存开销大，在线程间切换的开销也大。对于需要处理成千上万连接的网页服务器而言，这样的开销无法接受。</span><br></pre></td></tr></table></figure>
<p>基于线程的 I/O 风格，线程内部的控制流 线性。</p>
<p>除 <strong>锁</strong>，理解容易。</p>
<p>问题是，可扩展性低（内存开销大，切换开销也大），</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很多人于是尝试保留回调和线程风格的好处（低开销、线性控制流），但同时避免他们的缺点（高开销、倒置控制流）。协程（Coroutine）[<span class="number">1</span>] 可以比较好的解决这个问题。协程允许将某个子程（Subroutine）的运行状态保留下来以便将来重入（re-entry）。也就是说，协程可以随时暂停运行，将控制返回给调用者，等条件成熟时再从暂停点继续运行。基于协程的异步 <span class="keyword">I</span>/<span class="keyword">O</span> 和基于回调的异步 <span class="keyword">I</span>/<span class="keyword">O</span> 在性能上相当，但因为协程的内部逻辑顺序是线性的，不会导致控制流倒置。主流语言中，Python 的 Generator 和 Ruby 的 Fiber 都是协程的例子。在异步 <span class="keyword">I</span>/<span class="keyword">O</span> 的语境下，可以将协程理解为回调模式的语法糖（当然协程还有其他的好处）。基于协程的异步 <span class="keyword">I</span>/<span class="keyword">O</span> 风格主要难点在于要自己写调度器（scheduler）在多个协程间切换，而且每个协程要记得频繁让出控制避免其他协程僵死。这和回调风格一样。协程现在还不那么流行，被广泛理解和接受可能还需要一些时间。</span><br></pre></td></tr></table></figure>
<p>协程，回调模式的语法糖。</p>
<p>难点，需要自写调度器（scheduler）在多个协程间切换。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单一进程下，单纯基于回调或者协程都无法有效利用多核处理器。条件允许的情况下，一般采用运行多进程进行负载分流。基于线程的方式理论上可以利用多核，但在 Python 和 Ruby 这样有全局解释器锁（<span class="built_in">Global</span> Interpreter <span class="keyword">Lock</span>）的官方实现里，通常只能同时运行一个线程，多线程的优势也就局限在线性控制流，负载分流还是得通过运行多进程实现。Python 和 Ruby 的 JVM 实现由于没有全局解释器锁，不存在这个问题，多个线程可以同时运行。</span><br></pre></td></tr></table></figure>
<p>多线程做负载分流（要做到无状态性）。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程当然不是一无是处。问题描述中引用的文献认为线程不好，是在特定的情景下（系统瓶颈主要是 I/O），且当时（<span class="number">2005</span>年以前）多核处理器并非主流、内存相对有限。自从 Linux <span class="number">2.6</span> 内核开始搭载 NPTL [<span class="number">2</span>] 后，线程的开销（内存、切换）其实已经降低很多了。此外，现在的服务器多核已然是普遍现象，<span class="number">10</span>GB 以上内存也很常见，上万个线程的开销已经不是问题。线程模式可以不用对程序进行特别修改就能利用越来越多的处理器核心（另外一种形式的性能『免费午餐』）。为了优化使用事件驱动的模式而必须进行的状态切换等协调操作进化到最后会成为另外一种形式的线程调度器，某些场合下还不如直接用系统的更加成熟的线程调度器。</span><br></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">像 Erlang [<span class="number">3</span>] 这样采用定制化调度器+轻量级线程的模式也很有意思：Erlang 的线程并非系统线程，而是 Erlang 自己管理的、类似协程的机制。和 Python、Ruby 的协程不同，Erlang 的轻量级线程切换不需要手工管理让出控制。Erlang 的调度器会在某个线程执行一定步骤（Erlang 的语境下称为『缩减』，reduction）后自动切换。这一点更加类似系统线程：内部逻辑是连续的，可以使用同步 <span class="keyword">I</span>/<span class="keyword">O</span>，同时又没有系统线程高开销的弊病，可谓一石三鸟。唯一问题是，这个太小众了……</span><br></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">另外值得一题的还有通过多个进程/事件循环提高事件驱动 <span class="keyword">I</span>/<span class="keyword">O</span> 性能。比如 Nginx 的工人进程（worker process）。每个工人是单独的事件循环，和其他工人独立。每个工人使用轮询机制（如 poll/epoll）时只需要处理自己手上的套接字，效率相对要高些。多核处理器上，通常为每个核心分配一个工人，这样互相之间不会为抢系统资源打架。</span><br></pre></td></tr></table></figure>
<p>马天夫</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对javascript不懂；但是<span class="keyword">thread</span> model vs event model是计算工业由来已久的争论话题。你可以在网上搜索why <span class="keyword">thread</span> is evil或者why event is evil，都能找到业界顶尖专家的针锋相对的争论。</span><br><span class="line"></span><br><span class="line">从编程角度说，如果不考虑性能，如果开发环境提供<span class="keyword">thread</span>，那就一定要用<span class="keyword">thread</span>；用<span class="keyword">thread</span>写出的代码逻辑是连续的和内聚的，没有事件覆盖问题；当然它有死锁问题，而且数学上无法避免。</span><br></pre></td></tr></table></figure>
<p>thread，逻辑连续，内聚，没有事件覆盖问题。</p>
<p>当然有死锁，数学上无法避免。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果要使用<span class="keyword">Event</span> Model；系统不能太大，<span class="keyword">Event</span>路由机制、处理的优先顺序应该简单明了，否则程序的控制流将非常难以理解。在事件路由上挂钩子是应该极力避免的。对并发事件要充分展开，避免出现循环触发。在性能可以接受的情况下尽可能把逻辑正交化，把无关逻辑用periodical polling的机制来处理（包括延迟处理）。每个子系统应该遵循Reactive的设计原则，即当一个外部事件进入时（包括时钟事件），一定要在这个系统内部队列完成全部处理之后再抛出新的事件，采用缓冲延迟的方式。给每个子系统写一个内部事件队列是不错的做法，如果觉得麻烦，用Observer Pattern也是一个办法；抛向全局的事件队列是最后没办法的办法。</span><br></pre></td></tr></table></figure>
<p>事件模型，要注意：</p>
<ol>
<li>系统不能太大</li>
<li>Event 路由机制，处理的优先顺序应该简单明了，否则控制流难以理解</li>
<li>极力避免在事件路由上挂钩子（比如中间件）</li>
<li>对并发事件充分展开</li>
<li>避免出现循环触发</li>
<li>性能可接受前提下，尽可能把逻辑正交化，无关逻辑用 <a href="https://en.wikipedia.org/wiki/Periodic_poling" target="_blank" rel="external">periodical polling</a> 机制处理（包括延迟处理）。注：<a href="https://en.wikipedia.org/wiki/Multiple_asynchronous_periodic_polling" target="_blank" rel="external">MAPP</a></li>
<li>子系统遵循 Reactive 设计原则，即每个子系统写一个内部事件队列（不要全局事件队列）</li>
</ol>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事实上任何Event Model的逻辑都可以用从上层（粗粒度系统）到下层的顺序调用来完成，在处理的每个步骤，前一个子系统返回自己的<span class="keyword">state</span> change提供给后面的子系统使用，后面的子系统可以使用这个<span class="keyword">state</span> change和访问已经被处理过的前面的子系统的状态更新自己的状态，处理过的子系统的状态保证是consistent的，顺序处理完所有的子系统之后，整个系统的<span class="keyword">state</span>也是consistent的。你很容易用assertion来验证这一点。</span><br></pre></td></tr></table></figure>
<p>评论中提到：</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">冯东：<span class="keyword">Event</span> model的一个问题是会擦除<span class="keyword">call</span> stack。而<span class="keyword">call</span> stack是troubleshooting的重要线索。</span><br></pre></td></tr></table></figure>
<p>不过，可以手动维护 call stack（事件流向）。</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果一个子系统依赖于多个子系统的状态，这样的做法就会看到所有的并发和多重依赖关系，它体现在你会发现一些子系统的事件处理函数需要把外部事件、多个其他子系统的<span class="keyword">state</span> change，和另外一些子系统的引用都送进去，看起来有点儿怪？错！这是最美妙的时刻，因为这就是并发情况的显式定义，而且你必须在设计阶段去考虑这种情况，而且你必须在一个子程序内把它搞定（逻辑内聚）。</span><br></pre></td></tr></table></figure>
<p>一个子系统依赖多个子系统的状态（state change）。</p>
<p>并发情况的显式定义。设计阶段就得考虑，并在一个子程序内搞定（逻辑内聚）。</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这对处理并发问题是非常好的，它相当于在设计阶段人肉展开了程序的<span class="keyword">state</span> space。如果你在设计阶段展开了这个逻辑，定义了所有情况下的处理顺序，这个程序的<span class="keyword">state</span>就是被穷举的，它的测试工作将非常容易进行；而且系统没有未知的、似是而非的、应该会工作的状态存在。</span><br></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当然Event <span class="keyword">Model</span>也不是噩梦，它有特别美妙的一个地方就是你在程序逻辑发生翻天覆地的变化时，你会发现程序的框架竟然基本不需要改动，代码很容易线性增长；但是如果你是为了这个目的而使用Event <span class="keyword">Model</span>，我只能祝你好运了，兄弟！</span><br></pre></td></tr></table></figure>
<p>其他：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">众所周知，匿名函数带来的一个好处，就是不会因为要写一个短短的一次使用函数，而打断整个代码的流程和程序员的思路，做到了强逻辑内聚。</span><br><span class="line"></span><br><span class="line"><span class="bullet">...</span><br><span class="line"></span><br><span class="line"></span>那么回头看为什么只有Belleve的是本质，那是因为continuation就是程序流程抽象的本质，当这种本质被call/cc等类似手段直接暴露到用户层的时候，意味着我们拥有了控制代码流程的能力，自然也就在语言本身源代码层面上编织我们的代码。比如用来实现一个coroutine，或者lambda之类的。</span><br><span class="line"></span><br><span class="line"><span class="bullet">...</span><br><span class="line"></span><br><span class="line"></span>从功能角度而言，调度是使得我们程序能够并行或者异步执行的本质功能，但系统仅仅提供一个线程这个抢占式调度器给予用户，是完全不充分的，大大限制了程序员发挥其想象力的能力。所以人们才体会到corotine这种协作式调度器，还有erlang里的一些机制显得好用的时刻。</span><br></pre></td></tr></table></figure>
<p>原文：<a href="https://www.zhihu.com/question/19585581#" target="_blank" rel="external">JavaScript 这样的基于原型的、带闭包的、函数式语言如何进行大型程序设计？</a></p>
<p>不鳥萬Rio：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">强烈推荐所有头脑里 OOP 思想根深蒂固但又想适应 FP 的程序员们围观这篇 Steve Yegge 大牛的经典文章重新认识世界：Execution <span class="operator">in</span> Kingdom <span class="operator">of</span> Nouns <span class="keyword">http</span>://steve-yegge.blogspot.com/<span class="number">2006</span>/<span class="number">03</span>/execution-<span class="operator">in</span>-kingdom-<span class="operator">of</span>-nouns.html</span><br></pre></td></tr></table></figure>
<p>马天夫:</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">没写过javascript的人来胡乱发表意见了。</span><br><span class="line"></span><br><span class="line">你这里写的Pattern，或者说Javascript的Closure特性，就像C++的virtual或者Java的interface一样，是一个基础特性；它可以用于各种设计要求，bridge, adapter, <span class="keyword">state</span>, strategy, factory, visitor, decorator... etc。</span><br><span class="line"></span><br><span class="line">如果如你所说，程序中的所有场景都可以用env, request -&gt;response来建模，这就比较象domain-driven design或者<span class="keyword">state</span> machine逻辑。env当成context/<span class="keyword">state</span>，行为随着context/<span class="keyword">state</span>的变化而改变，在function里完成<span class="keyword">state</span> transition并返回新的event handler；it's fine。</span><br><span class="line"></span><br><span class="line">但反过来说，这也就像在说绝大多数软件逻辑都可以用ddd或者<span class="keyword">state</span> machine来搞定，这只是最泛化意义上的说法；软件真正的噩梦在于细节上，divide and conquer，即使软件能百分百满足设计的逻辑要求（这当然是很基本的事儿），也不意味着设计逻辑是正确的，也不意味着设计逻辑是最佳实践，尤其不意味着它能适应变化。</span><br><span class="line"></span><br><span class="line">So，Code Pattern并没有那么重要，还是要回到业务逻辑上去说事儿才行。</span><br><span class="line"></span><br><span class="line">My <span class="number">2</span> Cents.</span><br></pre></td></tr></table></figure>
<p>原文：<a href="https://www.zhihu.com/question/19582024/answer/12296918" target="_blank" rel="external">怎样理解或评价面向对象的编程技术？</a></p>
<p>题干</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">卡内基梅隆大学教授Robert Harper在博客上称，</span><br><span class="line">该校计算机科学系从大一新生课程中删除了面向对象编程。</span><br><span class="line">他说，面向对象编程从入门课程中完全取消了，</span><br><span class="line">因为<span class="keyword">O</span>-<span class="keyword">O</span>的性质是反模块化和反并行的，不适合进入现代计算机科学教学课程。 </span><br><span class="line">原文地址：http://existentialtype.wordpress.com/<span class="number">2011</span>/<span class="number">03</span>/<span class="number">15</span>/teaching-fp-to-freshmen/ </span><br><span class="line">所以，我想知道大家是怎么理解或评价面向对象编程技术的，</span><br><span class="line">还有怎么理解他说的<span class="keyword">O</span>-<span class="keyword">O</span>的性质是反模块化和反并行的。</span><br></pre></td></tr></table></figure>
<p>马天夫</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这个问题太复杂了。举个最小化的例子来说明问题：比如一个程序中有一个变量。这个变量代表的是什么含义？最宽泛的说，它是这个程序的输入的历史（时间变化看作外部事件），为什么要使用这个变量？因为他会影响未来的行为。如果不考虑计算能力的问题，假定计算能力都是无穷大，任何计算都可以瞬间完成，那么就可以忠实记录所有的输入历史，每次需要计算的时候完全的重新计算，这样，程序的变量（对象、态）之间就没有耦合，即逻辑都是独立的，也完全没有并发问题。爱怎么并发怎么并发，因为没有态存在。</span><br><span class="line"></span><br><span class="line"><span class="type">OO</span>模型定义了两个程序要素，行为（方法）和实体。行为实际上是态之间的dependency，而态和态之间的依赖性决定了行为的发生顺序需要符合一定规则。程序的错误发生在没有正确的处理态之间的依赖性，这虽然不能说定义态是错误的，但事实上它让程序容易发生错误，比如一个对象抛出的事件，从对象内部看就万事大吉了，但是你让框架怎么处理事件的顺序？是否要依赖对象内部的逻辑，对象和对象之间的依赖性？虽然去耦合是开发者常说的一句话，但是在一些业务逻辑上，对象之间的contract, dependency和constraint是客观存在。<span class="type">Side</span>-<span class="type">Effect</span>问题不是一个小问题。</span><br><span class="line"></span><br><span class="line">这个教授提倡的是functional programming；它在分布式计算中流行，尤其是实时和嵌入式的，比如通讯；从这些很抽象的层面——同时也是离实际创建的程序很远的角度说，它说基于<span class="type">State</span>的<span class="type">Programming</span> <span class="type">Paradigm</span>有<span class="type">Side</span> <span class="type">Effect</span>，反模块化反并行，都是成立的。但是在编程实践中，<span class="type">OO</span>直觉，开发效率高，工具、工业框架都成熟，并不能说它是有原罪的。</span><br><span class="line"></span><br><span class="line">对<span class="type">OO</span>来说，最好只是把它看作一种语言工具，而不是模型工具；事实上我们缺乏<span class="type">General</span> <span class="type">Purpose</span>，广泛适用各种开发需求，兼顾开发效率和逻辑正确性的模型开发工具；在目前阶段，可以多了解一些<span class="type">Design</span> <span class="type">Pattern</span>，状态机使用，<span class="type">Model</span>-<span class="type">Driven</span> <span class="type">Development</span>，<span class="type">Model</span> <span class="type">Checking</span>（比如<span class="type">SPIN</span>，或者B-<span class="keyword">method</span>），尤其是有限状态机和形式化方法的知识。设计阶段可以从粗粒度上考虑严格的逻辑，到细粒度的具体实现还是得依赖<span class="type">OO</span>语言。大多数情况下你不可能把程序代码都写成状态机，它将几十倍的增加代码量，而且非常不灵活，难以应对设计变更。</span><br><span class="line"></span><br><span class="line">但是说fp会替代oo语言我也觉得这是过于乐观的估计，个人觉得未来的开发应该是叠层的，最底层仍然是oo语言，之上是模型驱动的开发，代码生成技术，模型验证技术（很大程度上替代测试）。</span><br><span class="line"></span><br><span class="line"><span class="type">My</span> <span class="number">2</span> <span class="type">Cents</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="https://www.zhihu.com/question/19585576" target="_blank" rel="external">什么程序设计语言机制是处理异步 IO 最恰当的抽象？</a></p>
<p>题干：</p>
<figure]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[You don't Know JS - this & prototype 笔记]]></title>
    <link href="http://shane.hsi.rocks/2016/02/05/You-don-t-Know-JS-this-prototype-note/"/>
    <id>http://shane.hsi.rocks/2016/02/05/You-don-t-Know-JS-this-prototype-note/</id>
    <published>2016-02-05T02:35:27.000Z</published>
    <updated>2016-02-20T12:59:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-__u5173_u4E8E_this"><a href="#1-__u5173_u4E8E_this" class="headerlink" title="1. 关于 this"></a>1. 关于 <code>this</code></h1><p><code>this</code> 关键字是 JavaScript 最复杂的机制之一。</p>
<p>被自动定义在所有函数的作用域中。</p>
<p>很难说清它指向什么。</p>
<p>实际上 <code>this</code> 没有那么先进。但是开发者往往把理解过程复杂化。</p>
<h2 id="1-1__u4E3A_u4EC0_u4E48_u8981_u7528_this"><a href="#1-1__u4E3A_u4EC0_u4E48_u8981_u7528_this" class="headerlink" title="1.1 为什么要用 this"></a>1.1 为什么要用 <code>this</code></h2><p>不同的上下文对象。重复使用的函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    name: <span class="string">"Kyle"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">    name: <span class="string">"Reader"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">identify.call(me); <span class="comment">// KYLE</span></span><br><span class="line">identify.call(you); <span class="comment">// READER</span></span><br></pre></td></tr></table></figure>
<p>如果不是 <code>this</code>，就是显式传入。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identify</span><span class="params">(context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context.name.toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，<code>this</code> 提供了一种更优雅的方式来隐式『传递』一个对象引用。可以将API设计的更加简洁。</p>
<p>随着模式越来越复杂，显式传递上下文对象会让代码越来越混乱。</p>
<p>当介绍到对象和原型时，你会明白函数自动引用合适的上下文对象是多么的重要。</p>
<h2 id="1-2__u8BEF_u89E3"><a href="#1-2__u8BEF_u89E3" class="headerlink" title="1.2 误解"></a>1.2 误解</h2><p>之后解释 <code>this</code> 的具体用法，先消除误解。</p>
<p>不要拘泥于 <code>this</code> 的字面解释。以下是错误的。</p>
<h3 id="1-2-1__u6307_u5411_u81EA_u8EAB"><a href="#1-2-1__u6307_u5411_u81EA_u8EAB" class="headerlink" title="1.2.1 指向自身"></a>1.2.1 指向自身</h3><p><code>this</code> 不指向函数自身。</p>
<p>如果 <code>this</code> 要指向自身，什么场景？递归，调用函数内储存的状态（属性的值）。本书介绍的其他模式，有比函数对象更适合储存状态的地方。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo: "</span> + num);</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        foo(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo: 6</span></span><br><span class="line"><span class="comment">// foo: 7</span></span><br><span class="line"><span class="comment">// foo: 8</span></span><br><span class="line"><span class="comment">// foo: 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.count); <span class="comment">// 0 -- WFT?</span></span><br></pre></td></tr></table></figure>
<p><code>this.count</code> 无意间创建了一个全局变量。最终的值是 <code>NaN</code>。</p>
<p>当然，也可以使用词法作用域（舒适区）规避这个问题。不过不能放弃对 <code>this</code> 的学习。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo: "</span> + num);</span><br><span class="line">    data.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果要从函数内部引用自身，只用 <code>this</code> 是不够的。</p>
<p>一般来说要通过一个 <strong>指向函数对象的词法标识符（变量）</strong> 来引用它。</p>
<p>思考下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo.count = <span class="number">4</span>; <span class="comment">// foo 指向自身</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 匿名函数无法指向自身</span></span><br><span class="line">&#125;, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>第一个函数称为具名函数，在内部可以通过 <code>foo</code> 引用自身。</p>
<p>所以，还有一种解决方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo: "</span> + num);</span><br><span class="line">    foo.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>然而，这种方法还是回避了 <code>this</code>，完全依赖于变量 <code>foo</code> 的词法作用域。</p>
<p>另一种方法是强制 <code>this</code> 指向 <code>foo</code>（使用 <code>call</code>）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        foo.call(foo, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次我们接受了 <code>this</code>。后面会解释。</p>
<h3 id="1-2-2__u5B83_u7684_u4F5C_u7528_u57DF"><a href="#1-2-2__u5B83_u7684_u4F5C_u7528_u57DF" class="headerlink" title="1.2.2 它的作用域"></a>1.2.2 它的作用域</h3><p>第二种常见的误解是，<code>this</code> 指向函数的作用域。这个问题有点复杂，某些情况下正确，其他是错误的。</p>
<p>但是，需要明确，<code>this</code> 在任何情况下都不指向函数的作用域。</p>
<p>在 JavaScript 中，作用域确实和对象类似，可见标识符都是它的属性。但是作用域对象无法通过 JavaScript 代码访问。它存在于 JavaScript 引擎内部。</p>
<p>思考下这段代码，它试图（没有成功）跨越边界，使用 <code>this</code> 隐式引用函数的词法作用域：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();  <span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>
<p>这段代码的错误不止一个，非常完美（同时令人伤感地）展示了 <code>this</code> 多么容易误导人。</p>
<ul>
<li><p><code>this.bar()</code> 引用 <code>bar()</code> 是绝对不可能成功的。之后会解释原因。最自然的方法是略去 <code>this</code>，直接使用词法 <strong>引用标识符</strong>。</p>
</li>
<li><p>还试图使用 <code>this</code> 联通 <code>foo()</code> 和 <code>bar()</code> 的词法作用域。从而让 <code>bar()</code> 可以访问 <code>foo()</code> 作用域里的变量 <code>a</code>。这是不可能的。不能使用 <code>this</code> 来引用一个词法作用域内部的东西。</p>
</li>
</ul>
<p>每当你想把 <code>this</code> 和 <strong>词法作用域查找</strong> 混合使用的时候，一定要提醒自己，这是不可能实现的。</p>
<h2 id="1-3_this__u5230_u5E95_u662F_u4EC0_u4E48"><a href="#1-3_this__u5230_u5E95_u662F_u4EC0_u4E48" class="headerlink" title="1.3 this 到底是什么"></a>1.3 <code>this</code> 到底是什么</h2><p><code>this</code> 是在运行时绑定的，不是函数声明的位置。取决于函数调用时的各种条件。</p>
<p>当一个函数被调用时，会创建一个活动记录（有时候也成为执行上下文）。</p>
<p>这个记录会包含函数</p>
<ul>
<li>在哪里被调用（调用栈）</li>
<li>函数的调用方法</li>
<li>传入的参数</li>
<li>等</li>
</ul>
<p><code>this</code> 就是记录了其中一个属性，它会在执行过程中用到。</p>
<h2 id="1-4__u5C0F_u7ED3"><a href="#1-4__u5C0F_u7ED3" class="headerlink" title="1.4 小结"></a>1.4 小结</h2><p>要投入时间去理解。</p>
<p>第一步是消除两个误解，<code>this</code> 既不指向函数自身，也不指向函数的词法作用域。</p>
<p><code>this</code> 在函数被调用中发生时的绑定，取决于调用方式。</p>
<h1 id="2-_this__u5168_u9762_u89E3_u6790"><a href="#2-_this__u5168_u9762_u89E3_u6790" class="headerlink" title="2. this 全面解析"></a>2. <code>this</code> 全面解析</h1><h2 id="2-1__u8C03_u7528_u4F4D_u7F6E"><a href="#2-1__u8C03_u7528_u4F4D_u7F6E" class="headerlink" title="2.1 调用位置"></a>2.1 调用位置</h2><p>怎么找调用位置？似乎就是函数被调用的位置。但是不是那么简单，某些编程模式会隐藏真正的调用位置。</p>
<p>最重要的是分析 <strong>调用栈</strong> （即为了到达当前执行位置调用的所有函数，可以想象成一个函数调用链）。我们关心的调用位置就是当前执行函数的前一个调用。</p>
<p>使用浏览器的调试工具可以方便得查看调用栈。</p>
<h2 id="2-2__u7ED1_u5B9A_u89C4_u5219"><a href="#2-2__u7ED1_u5B9A_u89C4_u5219" class="headerlink" title="2.2 绑定规则"></a>2.2 绑定规则</h2><p>函数在执行过程中如何决定 <code>this</code> 的绑定对象。</p>
<p>找到调用位置，判断应用下面4条规则的哪一条。</p>
<h3 id="2-2-1__u9ED8_u8BA4_u7ED1_u5B9A"><a href="#2-2-1__u9ED8_u8BA4_u7ED1_u5B9A" class="headerlink" title="2.2.1 默认绑定"></a>2.2.1 默认绑定</h3><p>独立函数调用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p><code>a</code> 首先是全局对象。</p>
<p>但是，<code>this</code> 指向的也是全局对象。</p>
<p>但是，如果是 “strict mode”，全局对象无法使用默认绑定，则是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="pi">    "use strict"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">foo(); <span class="comment">// TypeError: this is undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>理解这层意思，但是规避这种写法。</p>
</blockquote>
<h3 id="2-2-2__u9690_u5F0F_u7ED1_u5B9A"><a href="#2-2-2__u9690_u5F0F_u7ED1_u5B9A" class="headerlink" title="2.2.2 隐式绑定"></a>2.2.2 隐式绑定</h3><p>调用位置是否有上下文对象，或者说是否被某个对象包含或拥有。严格说来，后面一句的说法不准确：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line">obj.foo(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>严格说来，<code>foo()</code> 不属于 <code>obj</code> 对象。</p>
<p>然而，调用位置，会使用 <code>obj</code> 上下文来引用函数。</p>
<p>对象属性引用链只有最顶层或者说最后一层会影响调用位置。举例来说：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">42</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    obj2: obj2</span><br><span class="line">&#125;;</span><br><span class="line">obj1.obj2.foo(); <span class="comment">//42</span></span><br></pre></td></tr></table></figure>
<p><strong>隐式丢失</strong>：</p>
<p>被隐式绑定的函数会丢失绑定对象，也就是说会应用默认绑定（取决于是否是 “strict mode”，决定 <code>this</code> 是绑定到全局对象还是 undefined）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo; <span class="comment">// 函数别名</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"opps, global"</span>; <span class="comment">// a 是全局对象的属性</span></span><br><span class="line">bar(); <span class="comment">//"oops, global"</span></span><br></pre></td></tr></table></figure>
<p>虽然，<code>bar</code> 和 <code>obj.foo</code> 是一个引用，但是实际上，它引用的确实 <code>foo</code> 函数本身。还是要看函数有没有修饰。</p>
<p>还有一种同样道理，但是较隐蔽，常在回调函数中出现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dooFoo</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// fn 其实引用的是 foo</span></span><br><span class="line">    fn(); <span class="comment">// &lt;-- 调用位置！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"opps, global"</span>; <span class="comment">// a 是全局对象的属性</span></span><br><span class="line">doFoo( obj.foo ); <span class="comment">//"oops, global"</span></span><br></pre></td></tr></table></figure>
<p>参数传递其实就是一种隐式传递（隐式赋值）。</p>
<p>内置函数也是一样的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(obj.foo ,<span class="number">100</span>); <span class="comment">//"opps, global"</span></span><br></pre></td></tr></table></figure>
<p>因为在 browser 端，<code>setTimeout</code> 大概伪代码是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimeout</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 等待delay毫秒</span></span><br><span class="line">    fn(); <span class="comment">// &lt;-- 调用位置！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，回调函数丢失 <code>this</code> 绑定是很常见的。</p>
<p>含有更出乎意料的，某些流行的 JavaScrit 库中事件处理器常会把回调函数的 <code>this</code> 强制绑定到触发时间的 DOM 元素中（郁闷）。</p>
<p>反正， <code>this</code> 的改变都是意想不到的。</p>
<p>之后我们会介绍如何通过固定 <code>this</code> 来修复。</p>
<h3 id="2-2-3__u663E_u5F0F_u7ED1_u5B9A"><a href="#2-2-3__u663E_u5F0F_u7ED1_u5B9A" class="headerlink" title="2.2.3 显式绑定"></a>2.2.3 显式绑定</h3><p>再回顾下 <strong>隐式绑定</strong>。</p>
<p>是将函数作为一个对象的属性引用，通过属性间接调用函数，从而把 <code>this</code> 间接（隐式）绑定到这个对象上。</p>
<p>现在显式，就是指，强制在某个对象上调用函数。</p>
<p>利用 JavaScript 的原型，使用 <code>call(..)</code> 和 <code>apply(..)</code> 方法。</p>
<p>它们的第一个参数，就是调用时，<code>this</code> 会指定绑定的对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.call(obj); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>如果是 primitive 类型的值，会被转换成它的对象形式（<code>new String(..)</code>、<code>new Boolean(..)</code>、<code>new Number(..)</code>。这通常被称为『装箱』。</p>
<p>可惜，显式绑定也并不能解决丢失绑定的问题。</p>
<p><strong>1. 硬绑定</strong></p>
<p>显式绑定的一种变种可以解决这个问题（通过创建一个包裹函数）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 包裹函数</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    foo.call(obj);</span><br><span class="line">&#125;</span><br><span class="line">bar(); <span class="comment">// 2</span></span><br><span class="line">setTimeout( bar, <span class="number">100</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 硬绑定的bar不可能再修改它的 this</span></span><br><span class="line">bar.call(<span class="built_in">window</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>参数形式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提取下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于硬绑定是一种常用的模式，在 ES5 里提供了内置的方式：<code>Function.prototype.bind</code>。</p>
<blockquote>
<p>所以，bind 返回的是一个硬编码的新函数</p>
</blockquote>
<p><strong>2. API 调用的『上下文』</strong></p>
<p>第三方库的许多函数，JavaScript 语言和宿主环境中的很多新的函数，都提供了一个可选参数，通常被称为『上下文』（context），作用和 <code>bind</code> 一样，确保回调使用的是指定的 <code>this</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach( foo, obj); <span class="comment">// obj 就是第二个可选参数</span></span><br></pre></td></tr></table></figure>
<p>内部实际上就是用 <code>bind</code> 或者 <code>apply</code> 实现了显式绑定，减少了些代码。</p>
<h3 id="2-2-4_new__u7ED1_u5B9A"><a href="#2-2-4_new__u7ED1_u5B9A" class="headerlink" title="2.2.4 new 绑定"></a>2.2.4 <code>new</code> 绑定</h3><p>最后一条，但在此之前，先澄清一个常见误解，关于 JavaScript 中函数和对象的误解。</p>
<p>在传统的面向类的语言中，『构造函数』是类中的一些特殊方法。使用 <code>new</code> 初始化类时会调用类中的构造函数，常如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sth = <span class="keyword">new</span> MyClz();</span><br></pre></td></tr></table></figure>
<p>JavaScript 也有 <code>new</code>，使用方式类似，然而机制真得完全不同。</p>
<p>首先，重定义下 JavaScript 中的『构造函数』:</p>
<p>JavaScript 中，构造函数只是使用 <code>new</code> 操作符时被调用的函数。它们并不属于某个类，也不会实例化一个类。实际上，你都不能把构造函数认为是一种特殊的函数类型（即可以不要这个名称），它们只是被 <code>new</code> 操作符调用的普通函数而已。</p>
<p>例，<code>Number(..)</code> 作为构造函数（指会通过 <code>new</code> 操作符调用时）时的行为。</p>
<blockquote>
<p>当 Number 在 new 表达式中被调用时，它是一个构造函数：它会初始化新创建的对象。</p>
</blockquote>
<p>所以，包括内置对象函数（比如 <code>Number</code>，详情见Ch3）在内的所有函数都可以用 <code>new</code> 来调用。这种函数通常被称为『构造函数调用』。</p>
<p>这里有一个重要但非常细微的区别：</p>
<p><strong>实际上并不存在所谓的『构造函数』，只有对于函数的『构造调用』</strong>。</p>
<p>使用 <code>new</code> 来调用函数，或者说发生构造函数调用时，会自动执行以下操作：</p>
<ol>
<li>创建（或者说构造）一个全新的对象</li>
<li>这个新对象会被执行[[原型]]链接</li>
<li>这个新对象会绑定到函数调用的 <code>this</code></li>
<li>如果函数没有返回其他对象，那么 <code>new</code> 表达式中的函数调用会自动返回这个新对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>总结下，这称为 <code>new</code> 绑定。</p>
<h2 id="2-3__u4F18_u5148_u7EA7"><a href="#2-3__u4F18_u5148_u7EA7" class="headerlink" title="2.3 优先级"></a>2.3 优先级</h2>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-__u5173_u4E8E_this"><a href="#1-__u5173_u4E8E_this" class="headerlink" title="1. 关于 this"></a>1. 关于 <code>this</code></h1><p><code]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[React performance 译]]></title>
    <link href="http://shane.hsi.rocks/2016/02/04/React-performance-zh-cn/"/>
    <id>http://shane.hsi.rocks/2016/02/04/React-performance-zh-cn/</id>
    <published>2016-02-04T07:31:26.000Z</published>
    <updated>2016-02-20T12:58:06.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/react-performance.html" target="_blank" rel="external">React performance</a></p>
<p>React is a JavaScript library for building user interfaces developed by Facebook. It has been designed from the ground up with performance in mind. In this article I will present how the diff algorithm and rendering work in React so you can optimize your own apps.</p>
<p>这里展示下 React 用的 diff 算法和 rendering。</p>
<h2 id="Diff_Algorithm"><a href="#Diff_Algorithm" class="headerlink" title="Diff Algorithm"></a>Diff Algorithm</h2><p>Before we go into the implementation details it is important to get an overview of how React works.</p>
<p>大致看下 React 的 overview。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.first) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>A Span<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"second"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>A Paragraph<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>At any point in time, you describe how you want your UI to look like. It is important to understand that the result of render is not an actual DOM node. Those are just lightweight JavaScript objects. We call them the virtual DOM.</p>
<p>首先先记住，render 返回的不是 DOM，是轻量级的 JavaScript 对象，也就是 Virtual DOM。</p>
<p>React is going to use this representation to try to find the minimum number of steps to go from the previous render to the next. For example, if we mount <mycomponent first="{true}">, replace it with <mycomponent first="{false}">, then unmount it, here are the DOM instructions that result:</mycomponent></mycomponent></p>
<p>React 尝试找到最小修改内容。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">None to first</span><br><span class="line">    - <span class="operator"><span class="keyword">Create</span> node: &lt;<span class="keyword">div</span> className=<span class="string">"first"</span>&gt;&lt;span&gt;A Span&lt;/span&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">First</span> <span class="keyword">to</span> <span class="keyword">second</span></span><br><span class="line">    - <span class="keyword">Replace</span> <span class="keyword">attribute</span>: className=<span class="string">"first"</span> <span class="keyword">by</span> className=<span class="string">"second"</span></span><br><span class="line">    - <span class="keyword">Replace</span> node: &lt;span&gt;A Span&lt;/span&gt; <span class="keyword">by</span> &lt;<span class="keyword">p</span>&gt;A Paragraph&lt;/<span class="keyword">p</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Second</span> <span class="keyword">to</span> <span class="keyword">none</span></span><br><span class="line">    - Remove node: &lt;<span class="keyword">div</span> className=<span class="string">"second"</span>&gt;&lt;<span class="keyword">p</span>&gt;A Paragraph&lt;/<span class="keyword">p</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Level_by_Level"><a href="#Level_by_Level" class="headerlink" title="Level by Level"></a>Level by Level</h4><p>Finding the minimal number of modifications between two arbitrary trees is a O(n4) problem. As you can imagine, this isn’t tractable for our use case. React uses simple and yet powerful heuristics to find a very good approximation in O(n).</p>
<p>在两颗 arbitrary trees 找到最小修改数量是 O(n4)。当然，React 使用的不是这种方案。而是使用了一个简单强大的启发算法，时间复杂度接近 O(n)。</p>
<p>React only tries to reconcile trees level by level. This drastically reduces the complexity and isn’t a big loss as it is very rare in web applications to have a component being moved to a different level in the tree. They usually only move laterally among children.</p>
<p>React 只会一层一层的合并 trees。这样就会大大减少复杂性，丢失的场景也不多，因为在 web 应用中，component 很少会移到其他的层级，只是在 children 间移动。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_diff.png" alt="React Diff Algorithm" title="React Diff Algorithm">
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>Let say that we have a component that on one iteration renders 5 components and the next inserts a new component in the middle of the list. This would be really hard with just this information to know how to do the mapping between the two lists of components.</p>
<p>假设这样一个场景：在一次迭代中，会渲染 5 个 components。然后再在中间插入一个新的 component。</p>
<p>By default, React associates the first component of the previous list with the first component of the next list, etc. You can provide a key attribute in order to help React figure out the mapping. In practice, this is usually easy to find out a unique key among the children.</p>
<p>默认，React 会结合前面一个 list 的第一个 component 和后面 list 的第一个 component。可以提供一个 <code>key</code> 属性，来帮助 React 解析映射。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_list.png" alt="List" title="List">
<h4 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h4><p>A React app is usually composed of many user defined components that eventually turns into a tree composed mainly of divs. This additional information is being taken into account by the diff algorithm as React will match only components with the same class.</p>
<p>React 只会匹配相同 class 的 components。就不会浪费时间匹配肯定不同的元素。</p>
<p>For example if a <header> is replaced by an <exampleblock>, React will remove the header and create an example block. We don’t need to spend precious time trying to match two components that are unlikely to have any resemblance.</exampleblock></header></p>
<img src="/2016/02/04/React-performance-zh-cn/react_components.png" alt="Components" title="Components">
<h2 id="Event_Delegation"><a href="#Event_Delegation" class="headerlink" title="Event Delegation"></a>Event Delegation</h2><p>Attaching event listeners to DOM nodes is painfully slow and memory-consuming. Instead, React implements a popular technique called “event delegation”. React goes even further and re-implements a W3C compliant event system. This means that Internet Explorer 8 event-handling bugs are a thing of the past and all the event names are consistent across browsers.</p>
<p>将 event listeners 附着到 DOM 节点是很慢的，也耗内存。React 实现了一种时髦的技术叫做 『事件委托』。React 走的更远，重新实现了一套 W3C 兼容的事件系统。也就是 IE8 的 event-handling bug 也解决了。</p>
<p>Let me explain how it’s implemented. A single event listener is attached to the root of the document. When an event is fired, the browser gives us the target DOM node. In order to propagate the event through the DOM hierarchy, React doesn’t iterate on the virtual DOM hierarchy.</p>
<p>解释下实现机制。一个单独的 event listener 会赋给 document 的 root。当一个 event 触发时，browser 会给出 target DOM node。为了能 propagate 这个 event 沿着 DOM 层级，React 并不会迭代 Virtual DOM 层级。</p>
<p>Instead we use the fact that every React component has a unique id that encodes the hierarchy. We can use simple string manipulation to get the id of all the parents. By storing the events in a hash map, we found that it performed better than attaching them to the virtual DOM. Here is an example of what happens when an event is dispatched through the virtual DOM.</p>
<p>而是，我们利用到 React component 有一个 id 来编码了层级。可以使用简单的 string 操作拿到所有 parents 的 ids。通过将 events 保存在一个 hash map 中，我们会发现要比附着到 Virtual DOM 中要快。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dispatchEvent('click', 'a.b.c', event)</span></span><br><span class="line">clickCaptureListeners[<span class="string">'a'</span>](event);</span><br><span class="line">clickCaptureListeners[<span class="string">'a.b'</span>](event);</span><br><span class="line">clickCaptureListeners[<span class="string">'a.b.c'</span>](event);</span><br><span class="line">clickBubbleListeners[<span class="string">'a.b.c'</span>](event);</span><br><span class="line">clickBubbleListeners[<span class="string">'a.b'</span>](event);</span><br><span class="line">clickBubbleListeners[<span class="string">'a'</span>](event);</span><br></pre></td></tr></table></figure>
<p>The browser creates a new event object for each event and each listener. This has the nice property that you can keep a reference of the event object or even modify it. However, this means doing a high number of memory allocations. React at startup allocates a pool of those objects. Whenever an event object is needed, it is reused from that pool. This dramatically reduces garbage collection.</p>
<p>browser 会为每一个 event 和每个 listener 创建一个 event object。React 为了减少内存使用，会在启动分配一个 pool。</p>
<h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2><h4 id="Batching"><a href="#Batching" class="headerlink" title="Batching"></a>Batching</h4><p>Whenever you call setState on a component, React will mark it as dirty. At the end of the event loop, React looks at all the dirty components and re-renders them.</p>
<p>当你调用 setState 时，React 会将该 component 标记为脏，在 event loop 的末尾，React 会找到这些 dirty component，重新渲染。</p>
<blockquote>
<p>event loop 找时间理解下</p>
</blockquote>
<p>This batching means that during an event loop, there is exactly one time when the DOM is being updated. This property is key to building a performant app and yet is extremely difficult to obtain using commonly written JavaScript. In a React application, you get it by default.</p>
<p>batching 也就意味着，一次 event loop 只会更新一次 DOM。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_batching.png" alt="Batching" title="Batching">
<h4 id="Sub-tree_Rendering"><a href="#Sub-tree_Rendering" class="headerlink" title="Sub-tree Rendering"></a>Sub-tree Rendering</h4><p>When setState is called, the component rebuilds the virtual DOM for its children. If you call setState on the root element, then the entire React app is re-rendered. All the components, even if they didn’t change, will have their render method called. This may sound scary and inefficient but in practice, this works fine because we’re not touching the actual DOM.</p>
<p>当调用 setState 时，会重新构建（rebuild）它 children 的 virtual DOM。如果你调用了 setState 在 root 元素，整个 React app 会 re-rendered。听起来很恐怖，但是 work fine，因为没碰到真正的 DOM。</p>
<p>First of all, we are talking about displaying the user interface. Because screen space is limited, you’re usually displaying on the orders of hundreds to thousands of elements at a time. JavaScript has gotten fast enough business logic for the whole interface is manageable.</p>
<p>首先，屏幕大小有限，JavaScript 处理这种量级的用户界面还是够快的。</p>
<p>Another important point is that when writing React code, you usually don’t call setState on the root node every time something changes. You call it on the component that received the change event or couple of components above. You very rarely go all the way to the top. This means that changes are localized to where the user interacts</p>
<p>另外就是，一般不会再 root 调用 setState（and Redux 就是这么做的，虽然做了很多判断）。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_re_render.png" alt="Sub-tree Rendering" title="Sub-tree Rendering">
<h4 id="Selective_Sub-tree_Rendering"><a href="#Selective_Sub-tree_Rendering" class="headerlink" title="Selective Sub-tree Rendering"></a>Selective Sub-tree Rendering</h4><p>Finally, you have the possibility to prevent some sub-trees to re-render. If you implement the following method on a component:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean shouldComponentUpdate(object nextProps, object nextState)</span><br></pre></td></tr></table></figure>
<p>The techniques that make React fast are not new. We’ve known for a long time that touching the DOM is expensive, you should batch write and read operations, event delegation is faster …</p>
<p>People still talk about them because in practice, they are very hard to implement in regular JavaScript code. What makes React stand out is that all those optimizations happen by default. This makes it hard to shoot yourself in the foot and make your app slow.</p>
<p>The performance cost model of React is also very simple to understand: every setState re-renders the whole sub-tree. If you want to squeeze out performance, call setState as low as possible and use shouldComponentUpdate to prevent re-rendering an large sub-tree.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The techniques that make React fast are not new. We’ve known for a long time that touching the DOM is expensive, you should batch write and read operations, event delegation is faster …</p>
<p>People still talk about them because in practice, they are very hard to implement in regular JavaScript code. What makes React stand out is that all those optimizations happen by default. This makes it hard to shoot yourself in the foot and make your app slow.</p>
<p>The performance cost model of React is also very simple to understand: every setState re-renders the whole sub-tree. If you want to squeeze out performance, call setState as low as possible and use shouldComponentUpdate to prevent re-rendering an large sub-tree.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/react-performance.html" target="_blank" rel="external">React performance</a></p>
<p>Rea]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scroll Position with React 译]]></title>
    <link href="http://shane.hsi.rocks/2016/02/04/Scroll-Position-with-React-zh-cn/"/>
    <id>http://shane.hsi.rocks/2016/02/04/Scroll-Position-with-React-zh-cn/</id>
    <published>2016-02-04T07:00:38.000Z</published>
    <updated>2016-02-20T12:59:08.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html" target="_blank" rel="external">Scroll Position with React</a></p>
<blockquote>
<p>通过阅读 vjeux 的博客来学习下 React 的设计理念</p>
</blockquote>
<p>Dealing with scroll position when you insert content is usually a difficult problem to solve. We’ll see how to use React life cycle methods to solve it elegantly.</p>
<p>当插入 content 时会改变 scroll position 一般来说是比较复杂的问题。我们来看下如何使用 React life cycle 方法来优雅解决。</p>
<h2 id="Insertion_at_the_bottom__u5728_u5E95_u90E8_u63D2_u5165"><a href="#Insertion_at_the_bottom__u5728_u5E95_u90E8_u63D2_u5165" class="headerlink" title="Insertion at the bottom 在底部插入"></a>Insertion at the bottom 在底部插入</h2><p>The first example is to maintain the scroll position at the bottom when an element is inserted at the bottom. A common use case is a chat application.</p>
<p>当插入新的元素到底部，继续保持在底部。比如聊天应用。</p>
<p>In order to scroll at the bottom, we can do that on componentDidUpdate. It happens every time the element is re-rendered.</p>
<p>为了滚动到底部，可以在 componentDidUpdate 来做。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.getDOMNode();</span><br><span class="line">  node.scrollTop = node.scrollHeight;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><code>Element.scrollTop</code> 指拿到 element 向上滑动的像素。关键这个操作有 side effect，scrollTop 修改之后，会触发一个动作。应该叫做 node.scrollTop(node.scrollHeight)</p>
<p><code>Element.scrollHeight</code> 只读属性，是指元素内容的高度，包括看不见的（滚动的）。</p>
<p>But this is going to always scroll to the bottom, which can be very annoying if you want to read what was above. Instead you want to scroll only if the user was already at the bottom. To do that, we can check the scroll position before the component has updated with componentWillUpdate and scroll if necessary at componentDidUpdate</p>
<p>但是这样做的话，会始终滚到底部（比如当你想滚动到上面看内容，来了条新的内容，就滚到下面）。现在的需求是，只有已经在底部，才滚动。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">componentWillUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.getDOMNode();</span><br><span class="line">  <span class="comment">// 搞了一个实例变量在保存状态</span></span><br><span class="line">  <span class="keyword">this</span>.shouldScrollBottom = node.scrollTop + node.offsetHeight === node.scrollHeight;</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">componentDidUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.shouldScrollBottom) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.getDOMNode();</span><br><span class="line">    node.scrollTop = node.scrollHeight</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>发现盒模型的各种 Height 概念挺多的<br>读一下文档</p>
</blockquote>
<h2 id="Conclusion__u7ED3_u8BBA"><a href="#Conclusion__u7ED3_u8BBA" class="headerlink" title="Conclusion 结论"></a>Conclusion 结论</h2><p>React has not been designed to handle scroll position natively. However, it provides escape hatches from the declarative paradigm in order to be able to implement them.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html" target="_blank" rel="external">Scroll Position with Re]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript new constructor this 来自知乎]]></title>
    <link href="http://shane.hsi.rocks/2016/02/04/JavaScript-new-constructor-this-from-zhihu/"/>
    <id>http://shane.hsi.rocks/2016/02/04/JavaScript-new-constructor-this-from-zhihu/</id>
    <published>2016-02-04T02:22:19.000Z</published>
    <updated>2016-02-20T12:57:23.000Z</updated>
    <content type="html"><![CDATA[<p>知乎链接：<a href="https://www.zhihu.com/question/19951896" target="_blank" rel="external">JavaScript 中对象的 constructor 属性的作用是什么？</a></p>
<p>主要解释：<code>constructor</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params">arg1,arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.b=<span class="number">2</span>; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  A.prototype.log = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  &#125;</span><br><span class="line">  a = <span class="keyword">new</span> A();</span><br><span class="line">  b = <span class="keyword">new</span> A();</span><br><span class="line">&#125;)()</span><br><span class="line">a.log();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">b.log();</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>a 是 A 的实例，a 的 constructor 就是 A</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; a.constructor</span><br><span class="line">&lt; <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">arg1,arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.b=<span class="number">2</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>所以，可以这样给『类A』增加新方法：</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.constructor.prototype 在chrome,firefox中可以通过 a.__proto__ 直接访问</span></span><br><span class="line"><span class="transposed_variable">a.</span><span class="transposed_variable">constructor.</span><span class="transposed_variable">prototype.</span><span class="built_in">log2</span> = <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="transposed_variable">console.</span>log(<span class="transposed_variable">this.</span>b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="transposed_variable">a.</span><span class="built_in">log2</span>();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="transposed_variable">b.</span><span class="built_in">log2</span>();</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>继续：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; a.constructor.prototype === a.__proto__</span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; a.constructor.prototype.constructor === a.constructor</span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>知乎链接：<a href="https://www.zhihu.com/question/19636194" target="_blank" rel="external">如何理解 JavaScript 中的 this 关键字？</a></p>
<p>详细：<a href="http://otakustay.com/object-lookup-in-javascript/" target="_blank" rel="external">JavaScript中的对象查找</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>知乎链接：<a href="https://www.zhihu.com/question/19951896" target="_blank" rel="external">JavaScript 中对象的 constructor 属性的作用是什么？</a></p>
<p>主要]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[阅读 React 代码结构]]></title>
    <link href="http://shane.hsi.rocks/2016/02/02/Read-React-Structure/"/>
    <id>http://shane.hsi.rocks/2016/02/02/Read-React-Structure/</id>
    <published>2016-02-02T10:00:25.000Z</published>
    <updated>2016-02-24T14:27:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u58F0_u660E"><a href="#u58F0_u660E" class="headerlink" title="声明"></a>声明</h2><ul>
<li>解读的是结构</li>
</ul>
<h2 id="u8BA1_u5212"><a href="#u8BA1_u5212" class="headerlink" title="计划"></a>计划</h2><ul>
<li>读下 react.d.ts，目的是会写复杂的 definition 文件。</li>
<li>会画结构图，这个优先级低了，初期用纸笔</li>
</ul>
<h2 id="u5F00_u59CB_u5427"><a href="#u5F00_u59CB_u5427" class="headerlink" title="开始吧"></a>开始吧</h2><h4 id="npm_dependencies"><a href="#npm_dependencies" class="headerlink" title="npm dependencies"></a>npm dependencies</h4><p><a href="https://www.npmjs.com/package/esprima" target="_blank" rel="external">esprima</a></p>
<p>这个似乎有更快的。在 webpack 还是 rollup 的依赖里有。</p>
<p><a href="https://www.npmjs.com/package/commoner" target="_blank" rel="external">commoner</a></p>
<p>Flexible tool for translating any dialect of JavaScript into Node-readable CommonJS modules。这个是 React 团队维护的包。</p>
<p><a href="https://www.npmjs.com/package/recast" target="_blank" rel="external">recast</a></p>
<p>JavaScript syntax tree transformer, nondestructive pretty-printer, and automatic source map generator</p>
<p>commoner，recast 的主要作者都是 <a href="https://github.com/benjamn" target="_blank" rel="external">@benjamn</a>。曾经在 Facebook 工作。<a href="https://github.com/tc39" target="_blank" rel="external">TC39</a> 成员。</p>
<h4 id="react-d-ts"><a href="#react-d-ts" class="headerlink" title="react.d.ts"></a>react.d.ts</h4><h5 id="declare__u5173_u952E_u5B57"><a href="#declare__u5173_u952E_u5B57" class="headerlink" title="declare 关键字"></a>declare 关键字</h5><p>有时我们需要对相关定义进行补充, 但又不希望这些内容生成相关 JS 代码 (也许是本身某些对象或者值就已经存在在运行环境里, 另在用于桥接 TypeScript 和原有 JavaScript 的声明文件 *.d.ts 中就会大量使用 declare).</p>
<p>关键词是：补充，不会生成 JS 代码</p>
<p>另外 TypeScript 专门为一些 JS 类库扩展了 declare module, 以适应一些包含特殊字符的包/模块名称.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">'some-package'</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="namespaces"><a href="#namespaces" class="headerlink" title="namespaces"></a>namespaces</h5><p>Class 和 interface 做了些 design time 的限制（private，protected），但是没有做 runtime。</p>
<p>在 JavaScript 中，runtime 的 封装是用了 module pattern。即用闭包封装 private 的 fields 和 methods。</p>
<p>module pattern 是很清晰的方式，用来组织化结构（ organizational structure ），以及动态加载选项（dynamic loading options）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">namespace M &#123;  </span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"hello"</span>;  </span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">M.f();  </span><br><span class="line">M.s;  <span class="comment">// Error, s is not exported</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译出来的是</span></span><br><span class="line"><span class="keyword">var</span> M;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">M</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    M.f = f;</span><br><span class="line">&#125;)(M || (M = &#123;&#125;));</span><br><span class="line">M.f();</span><br><span class="line">M.s; <span class="comment">// Error, s is not exported</span></span><br></pre></td></tr></table></figure>
<h5 id="u770B_u4EE3_u7801"><a href="#u770B_u4EE3_u7801" class="headerlink" title="看代码"></a>看代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface ReactElement&lt;P extends Props&lt;any&gt;&gt; &#123;</span><br><span class="line">        type: string | ComponentClass&lt;P&gt; | StatelessComponent&lt;P&gt;;</span><br><span class="line">        props: P;</span><br><span class="line">        key: string | number;</span><br><span class="line">        ref: string | ((component: Component&lt;P, any&gt; | Element) =&gt; any);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中看下 <code>Component&lt;P, any&gt;</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base component for plain JS classes</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>&lt;<span class="title">P</span>, <span class="title">S</span>&gt; <span class="title">implements</span> <span class="title">ComponentLifecycle</span>&lt;<span class="title">P</span>, <span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">    constructor(props?: P, context?: any);</span><br><span class="line">    setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">    setState(state: S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">    forceUpdate(callBack?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">    render(): JSX.Element;</span><br><span class="line">    props: P;</span><br><span class="line">    state: S;</span><br><span class="line">    context: &#123;&#125;;</span><br><span class="line">    refs: &#123;</span><br><span class="line">        [key: string]: ReactInstance</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面还有重载：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">setState(state: S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>
<p>任意参数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface Factory&lt;P&gt; &#123;</span><br><span class="line">    (props?: P, ...children: ReactNode[]): ReactElement&lt;P&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要就是： <code>...children: ReactNode[]</code>。</p>
<p>这些也是重载：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>&lt;<span class="title">P</span>&gt;(<span class="params"></span><br><span class="line">        type: string,</span><br><span class="line">        props?: P,</span><br><span class="line">        ...children: ReactNode[]</span>): <span class="title">DOMElement</span>&lt;<span class="title">P</span>&gt;;</span><br><span class="line"><span class="title">function</span> <span class="title">createElement</span>&lt;<span class="title">P</span>&gt;(<span class="params"></span><br><span class="line">    type: ClassicComponentClass&lt;P&gt;,</span><br><span class="line">    props?: P,</span><br><span class="line">    ...children: ReactNode[]</span>): <span class="title">ClassicElement</span>&lt;<span class="title">P</span>&gt;;</span><br><span class="line"><span class="title">function</span> <span class="title">createElement</span>&lt;<span class="title">P</span>&gt;(<span class="params"></span><br><span class="line">    type: ComponentClass&lt;P&gt; | StatelessComponent&lt;P&gt;,</span><br><span class="line">    props?: P,</span><br><span class="line">    ...children: ReactNode[]</span>): <span class="title">ReactElement</span>&lt;<span class="title">P</span>&gt;;</span></span><br></pre></td></tr></table></figure>
<p>看下整体的 module 写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">declare namespace __React &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">"react"</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> = __React;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，如何定义 function interface？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">declare type ClassValue = string | number | ClassDictionary | ClassArray;</span><br><span class="line"></span><br><span class="line">interface ClassDictionary &#123;</span><br><span class="line">    [id: string]: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ClassArray extends <span class="built_in">Array</span>&lt;ClassValue&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line">interface ClassNamesFn &#123;</span><br><span class="line">    (...classes: ClassValue[]): string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">var</span> classNames: ClassNamesFn;</span><br><span class="line"></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">"classnames"</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> = classNames</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface ClassNamesFn &#123;</span><br><span class="line">    (...classes: ClassValue[]): string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u7B2C_u4E00_u6B21_u516C_u5F00_u53D1_u5E03_u7684_React__u6E90_u7801"><a href="#u7B2C_u4E00_u6B21_u516C_u5F00_u53D1_u5E03_u7684_React__u6E90_u7801" class="headerlink" title="第一次公开发布的 React 源码"></a>第一次公开发布的 React 源码</h4><p>因为这时候，代码量相对是最精简的。</p>
<h5 id="core/React-js"><a href="#core/React-js" class="headerlink" title="core/React.js"></a>core/React.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactCompositeComponent = <span class="built_in">require</span>(<span class="string">'ReactCompositeComponent'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactComponent = <span class="built_in">require</span>(<span class="string">'ReactComponent'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'ReactDOM'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactMount = <span class="built_in">require</span>(<span class="string">'ReactMount'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个看起来是比较独立的代码</span></span><br><span class="line"><span class="keyword">var</span> ReactDefaultInjection = <span class="built_in">require</span>(<span class="string">'ReactDefaultInjection'</span>);</span><br><span class="line"></span><br><span class="line">ReactDefaultInjection.inject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = &#123;</span><br><span class="line">  DOM: ReactDOM,</span><br><span class="line">  initializeTouchEvents: <span class="function"><span class="keyword">function</span>(<span class="params">shouldUseTouch</span>) </span>&#123;</span><br><span class="line">    ReactMount.useTouchEvents = shouldUseTouch;</span><br><span class="line">  &#125;,</span><br><span class="line">  autoBind: ReactCompositeComponent.autoBind,</span><br><span class="line">  createClass: ReactCompositeComponent.createClass,</span><br><span class="line">  createComponentRenderer: ReactMount.createComponentRenderer,</span><br><span class="line">  constructAndRenderComponent: ReactMount.constructAndRenderComponent,</span><br><span class="line">  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,</span><br><span class="line">  renderComponent: ReactMount.renderComponent,</span><br><span class="line">  unmountAndReleaseReactRootNode: ReactMount.unmountAndReleaseReactRootNode,</span><br><span class="line">  isValidComponent: ReactComponent.isValidComponent</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = React;</span><br></pre></td></tr></table></figure>
<h5 id="core/ReactDefaultInjection-js"><a href="#core/ReactDefaultInjection-js" class="headerlink" title="core/ReactDefaultInjection.js"></a>core/ReactDefaultInjection.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'ReactDOM'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOMForm = <span class="built_in">require</span>(<span class="string">'ReactDOMForm'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultEventPluginOrder = <span class="built_in">require</span>(<span class="string">'DefaultEventPluginOrder'</span>);</span><br><span class="line"><span class="keyword">var</span> EnterLeaveEventPlugin = <span class="built_in">require</span>(<span class="string">'EnterLeaveEventPlugin'</span>);</span><br><span class="line"><span class="keyword">var</span> EventPluginHub = <span class="built_in">require</span>(<span class="string">'EventPluginHub'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactInstanceHandles = <span class="built_in">require</span>(<span class="string">'ReactInstanceHandles'</span>);</span><br><span class="line"><span class="keyword">var</span> SimpleEventPlugin = <span class="built_in">require</span>(<span class="string">'SimpleEventPlugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Inject module for resolving DOM hierarchy and plugin ordering.</span><br><span class="line">   * 注入用来解析 DOM 层级和 plugin 顺序的模块</span><br><span class="line">   */</span></span><br><span class="line">  EventPluginHub.injection.injectEventPluginOrder(DefaultEventPluginOrder);</span><br><span class="line">  EventPluginHub.injection.injectInstanceHandle(ReactInstanceHandles);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Two important event plugins included by default (without having to require</span><br><span class="line">   * them).</span><br><span class="line">   * 默认注入的两个重要的 plugins</span><br><span class="line">   */</span></span><br><span class="line">  EventPluginHub.injection.injectEventPluginsByName(&#123;</span><br><span class="line">    <span class="string">'SimpleEventPlugin'</span>: SimpleEventPlugin,</span><br><span class="line">    <span class="string">'EnterLeaveEventPlugin'</span>: EnterLeaveEventPlugin</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * This is a bit of a hack. We need to override the &lt;form&gt; element</span><br><span class="line">   * to be a composite component because IE8 does not bubble or capture</span><br><span class="line">   * submit to the top level. In order to make this work with our</span><br><span class="line">   * dependency graph we need to inject it here.</span><br><span class="line">   * 这是hack，因为 IE8 的 form 标签不会 bubble 或者 capture submit 操作到 top level。</span><br><span class="line">   * 为了让 dependency grapth 能够工作，这里覆盖下 &lt;form&gt;</span><br><span class="line">   */</span></span><br><span class="line">  ReactDOM.injection.injectComponentClasses(&#123;</span><br><span class="line">    form: ReactDOMForm</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露 inject</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  inject: inject</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里面基本做了很多 module 之间的组合。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventPluginHub - inject - DefaultEventPluginOrder</span><br><span class="line">                        -<span class="ruby"> <span class="constant">ReactInstanceHandles</span></span><br><span class="line"></span>                        -<span class="ruby"> <span class="constant">SimpleEventPlugin</span></span><br><span class="line"></span>                        -<span class="ruby"> <span class="constant">EnterLeaveEventPlugin</span></span><br><span class="line"></span>                        -<span class="ruby"> injectComponentClasses - <span class="constant">ReactDOMForm</span></span></span><br></pre></td></tr></table></figure>
<h5 id="core/ReactDOM-js"><a href="#core/ReactDOM-js" class="headerlink" title="core/ReactDOM.js"></a>core/ReactDOM.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi"></span><br><span class="line">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactNativeComponent = <span class="built_in">require</span>(<span class="string">'ReactNativeComponent'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用第二个参数的同key值修改第一个的</span></span><br><span class="line"><span class="keyword">var</span> mergeInto = <span class="built_in">require</span>(<span class="string">'mergeInto'</span>);</span><br><span class="line"><span class="keyword">var</span> objMapKeyVal = <span class="built_in">require</span>(<span class="string">'objMapKeyVal'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates a new React class that is idempotent and capable of containing other</span><br><span class="line"> * React components. It accepts event listeners and DOM properties that are</span><br><span class="line"> * valid according to `DOMProperty`.</span><br><span class="line"> *</span><br><span class="line"> *  - Event listeners: `onClick`, `onMouseDown`, etc.</span><br><span class="line"> *  - DOM properties: `className`, `name`, `title`, etc.</span><br><span class="line"> *</span><br><span class="line"> * The `style` property functions differently from the DOM API. It accepts an</span><br><span class="line"> * object mapping of style properties to values.</span><br><span class="line"> *</span><br><span class="line"> * 创建一个新的 React class。它是幂等的，可以包含其他的 React Component。可以接受 event listeners 和 DOM properties（右 DOMProperty 校验）</span><br><span class="line"> * 已经开了一篇新的博客，学习下 this constructor prototype, __proto__，暂时不求甚解。</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;string&#125; tag Tag name (e.g. `div`).</span><br><span class="line"> * @param &#123;boolean&#125; omitClose True if the close tag should be omitted.</span><br><span class="line"> * @private</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDOMComponentClass</span>(<span class="params">tag, omitClose</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Constructor = <span class="function"><span class="keyword">function</span>(<span class="params">initialProps, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.construct(initialProps, children);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Constructor.prototype = <span class="keyword">new</span> ReactNativeComponent(tag, omitClose);</span><br><span class="line">  Constructor.prototype.constructor = Constructor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">props, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Constructor(props, children);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates a mapping from supported HTML tags to `ReactNativeComponent` classes.</span><br><span class="line"> * This is also accessible via `React.DOM`.</span><br><span class="line"> *</span><br><span class="line"> * @public</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ReactDOM = objMapKeyVal(&#123;</span><br><span class="line">  <span class="comment">// 略去一些 tag，紧凑下代码</span></span><br><span class="line">  a: <span class="literal">false</span>,</span><br><span class="line">  footer: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// Danger: this gets monkeypatched! See ReactDOMForm for more info.</span></span><br><span class="line">  form: <span class="literal">false</span>,</span><br><span class="line">  h1: <span class="literal">false</span>,</span><br><span class="line">  h6: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// SVG</span></span><br><span class="line">  circle: <span class="literal">false</span>,</span><br><span class="line">  g: <span class="literal">false</span>,</span><br><span class="line">  path: <span class="literal">false</span>,</span><br><span class="line">&#125;, createDOMComponentClass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> injection = &#123;</span><br><span class="line">  injectComponentClasses: <span class="function"><span class="keyword">function</span>(<span class="params">componentClasses</span>) </span>&#123;</span><br><span class="line">    mergeInto(ReactDOM, componentClasses);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.injection = injection;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ReactDOM;</span><br></pre></td></tr></table></figure>
<p>关于 <code>objMap</code> 和 <code>objMapKeyVal.js</code>：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">objMap.js</span><br><span class="line">For <span class="keyword">each</span> key/<span class="built_in">value</span> pair, invokes callback func <span class="operator">and</span> constructs <span class="operator">a</span> resulting</span><br><span class="line"> * object which <span class="operator">contains</span>, <span class="keyword">for</span> every key <span class="operator">in</span> obj, values that are <span class="operator">the</span> <span class="built_in">result</span> <span class="operator">of</span></span><br><span class="line"> * <span class="operator">of</span> invoking <span class="operator">the</span> <span class="function"><span class="keyword">function</span>:</span></span><br><span class="line"></span><br><span class="line"> *   func(<span class="built_in">value</span>, key, iteration)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objMapKeyVal.js</span><br><span class="line">Behaves <span class="operator">the</span> same <span class="keyword">as</span> `objMap` but invokes func <span class="operator">with</span> <span class="operator">the</span> key <span class="keyword">first</span>, <span class="operator">and</span> <span class="built_in">value</span></span><br><span class="line"> * <span class="keyword">second</span>. Use `objMap` unless you need this special <span class="keyword">case</span>.</span><br><span class="line"> * Invokes func <span class="keyword">as</span>:</span><br><span class="line"> *</span><br><span class="line"> *   func(key, <span class="built_in">value</span>, iteration)</span><br></pre></td></tr></table></figure>
<img src="/2016/02/02/Read-React-Structure/objMap.png" alt="objMap vs objMapKeyVal" title="objMap vs objMapKeyVal">
<p>以 <code>objMapKeyVal(obj, func, context)</code> 为例，就是，对一个 <code>obj</code>，调用 <code>func</code> 重新求各 key 的 value。</p>
<p>在关于：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> injection = &#123;</span><br><span class="line">  injectComponentClasses: <span class="function"><span class="keyword">function</span>(<span class="params">componentClasses</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用后者替换前者</span></span><br><span class="line">    mergeInto(ReactDOM, componentClasses);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 <code>core/ReactDefaultInjection.js</code> 使用到：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.injection.injectComponentClasses(&#123;</span><br><span class="line">  form: ReactDOMForm</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="core/ReactMount-js"><a href="#core/ReactMount-js" class="headerlink" title="core/ReactMount.js"></a>core/ReactMount.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactEvent = <span class="built_in">require</span>(<span class="string">'ReactEvent'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactInstanceHandles = <span class="built_in">require</span>(<span class="string">'ReactInstanceHandles'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactEventTopLevelCallback = <span class="built_in">require</span>(<span class="string">'ReactEventTopLevelCallback'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'$'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> globalMountPointCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Mapping from reactRoot DOM ID to React component instance. </span><br><span class="line"> * reactRoot DOM ID : React component instace</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> instanceByReactRootID = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Mapping from reactRoot DOM ID to `container` nodes. </span><br><span class="line"> *  reactRoot DOM ID : `container` node</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> containersByReactRootID = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * @param &#123;DOMElement&#125; container DOM element that may contain a React component.</span><br><span class="line"> * @return &#123;?string&#125; A "reactRoot" ID, if a React component is rendered.</span><br><span class="line"> * 可能包含一个 React component 的 container DOM element</span><br><span class="line"> * 可能返回 reactRoot ID，如果这个 React component 已经渲染了</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReactRootID</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> container.firstChild &amp;&amp; container.firstChild.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Mounting is the process of initializing a React component by creatings its</span><br><span class="line"> * representative DOM elements and inserting them into a supplied `container`.</span><br><span class="line"> * Any prior content inside `container` is destroyed in the process.</span><br><span class="line"> * Mounting 是初始化 React component 的过程，通过创建它的代理 DOM 元素，然后插入到提供的 container。</span><br><span class="line"> * 并且，之前如果在 container 里有内容，会被 destroyed。</span><br><span class="line"> *</span><br><span class="line"> *   ReactMount.renderComponent(component, $('container'));</span><br><span class="line"> *</span><br><span class="line"> *   &lt;div id="container"&gt;         &lt;-- Supplied `container`.</span><br><span class="line"> *     &lt;div id=".reactRoot[3]"&gt;   &lt;-- Rendered reactRoot of React component.</span><br><span class="line"> *       // ...</span><br><span class="line"> *     &lt;/div&gt;</span><br><span class="line"> *   &lt;/div&gt;</span><br><span class="line"> *</span><br><span class="line"> * Inside of `container`, the first element rendered is the "reactRoot".</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ReactMount = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Time spent generating markup. 创建 markup 的时间 */</span></span><br><span class="line">  totalInstantiationTime: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Time spent inserting markup into the DOM. 将 markup 插入到 DOM 的时间 */</span></span><br><span class="line">  totalInjectionTime: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Whether support for touch events should be initialized. 是否要支持 touch events */</span></span><br><span class="line">  <span class="comment">// 可以在外面修改 </span></span><br><span class="line">  <span class="comment">// initializeTouchEvents: function(shouldUseTouch) &#123;</span></span><br><span class="line">  <span class="comment">//    ReactMount.useTouchEvents = shouldUseTouch;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  useTouchEvents: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * This is a hook provided to support rendering React components while</span><br><span class="line">   * ensuring that the apparent scroll position of its `container` does not</span><br><span class="line">   * change.</span><br><span class="line">   * 提供的一个 hook，来支持渲染 React components 时保证 container 的 scroll positon 不变。</span><br><span class="line">   * vjeux 有一篇博客讲解 [Scroll Position with React](http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html)</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;DOMElement&#125; container The `container` being rendered into.</span><br><span class="line">   * @param &#123;function&#125; renderCallback This must be called once to do the render.</span><br><span class="line">   */</span></span><br><span class="line">  scrollMonitor: <span class="function"><span class="keyword">function</span>(<span class="params">container, renderCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 怎么没用到 container</span></span><br><span class="line">    renderCallback();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Ensures tht the top-level event delegation listener is set up. This will be</span><br><span class="line">   * invoked some time before the first time any React component is rendered.</span><br><span class="line">   * 保证顶级的 event delegation listener 被设置。这个会被调用几次，知道有一个 React component 被渲染。</span><br><span class="line">   * @param &#123;object&#125; TopLevelCallbackCreator</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  prepareTopLevelEvents: <span class="function"><span class="keyword">function</span>(<span class="params">TopLevelCallbackCreator</span>) </span>&#123;</span><br><span class="line">    ReactEvent.ensureListening(</span><br><span class="line">      ReactMount.useTouchEvents,</span><br><span class="line">      TopLevelCallbackCreator</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Renders a React component into the DOM in the supplied `container`.</span><br><span class="line">   *</span><br><span class="line">   * If the React component was previously rendered into `container`, this will</span><br><span class="line">   * perform an update on it and only mutate the DOM as necessary to reflect the</span><br><span class="line">   * latest React component.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;ReactComponent&#125; nextComponent Component instance to render.</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element to render into.</span><br><span class="line">   * @return &#123;ReactComponent&#125; Component instance rendered in `container`.</span><br><span class="line">   * 这个就是 mouting 的过程了。</span><br><span class="line">   * 详细说来，如果一个 React component 之前已经渲染过了，会执行 update，并只更改必要的 DOM 变更</span><br><span class="line">   * 会暴露 React.renderComponent</span><br><span class="line">   */</span></span><br><span class="line">  renderComponent: <span class="function"><span class="keyword">function</span>(<span class="params">nextComponent, container</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 首先尝试是否在 container 里有没有 React component instance</span></span><br><span class="line">    <span class="keyword">var</span> prevComponent = instanceByReactRootID[getReactRootID(container)];</span><br><span class="line">    <span class="comment">// 如果有</span></span><br><span class="line">    <span class="keyword">if</span> (prevComponent) &#123;</span><br><span class="line">      <span class="comment">// 拿到 props</span></span><br><span class="line">      <span class="keyword">var</span> nextProps = nextComponent.props;</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      ReactMount.scrollMonitor(container, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 所以要做的更新是在 React component 上的方法，replaceProps</span></span><br><span class="line">        prevComponent.replaceProps(nextProps);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> prevComponent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有，就...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保证下顶级的 event delegation listener 被设置</span></span><br><span class="line">    ReactMount.prepareTopLevelEvents(ReactEventTopLevelCallback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存下 React component instace 到 map 里</span></span><br><span class="line">    <span class="keyword">var</span> reactRootID = ReactMount.registerContainer(container);</span><br><span class="line">    instanceByReactRootID[reactRootID] = nextComponent;</span><br><span class="line">    <span class="comment">// 将 component 加载到 Node 中</span></span><br><span class="line">    nextComponent.mountComponentIntoNode(reactRootID, container);</span><br><span class="line">    <span class="keyword">return</span> nextComponent;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Creates a function that accepts a `container` and renders the supplied</span><br><span class="line">   * React component instance into it.</span><br><span class="line">   *</span><br><span class="line">   *   var renderInto = ReactMount.createComponentRenderer(component);</span><br><span class="line">   *   // ...</span><br><span class="line">   *   var component = renderInto($('container'));</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;ReactComponent&#125; component Component instance to render.</span><br><span class="line">   * @return &#123;function(DOMElement): ReactComponent&#125;</span><br><span class="line">   * 创建的是一个 Renderer，还差一个 container</span><br><span class="line">   * 返回一个函数，参数是 `container`，并将提供的 React component 实例渲染进去</span><br><span class="line">   * 这个会暴露在 React.createComponentRenderer</span><br><span class="line">   */</span></span><br><span class="line">  createComponentRenderer: <span class="function"><span class="keyword">function</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ReactMount.renderComponent(component, container);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Constructs a component instance of `constructor` with `initialProps` and</span><br><span class="line">   * renders it into the supplied `container`.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;function&#125; constructor React component constructor.</span><br><span class="line">   * @param &#123;?object&#125; props Initial props of the component instance.</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element to render into.</span><br><span class="line">   * @return &#123;ReactComponent&#125; Component instance rendered in `container`.</span><br><span class="line">   * 提供的是 React component constructor</span><br><span class="line">   * 会暴露 React.constructAndRenderComponent</span><br><span class="line">   */</span></span><br><span class="line">  constructAndRenderComponent: <span class="function"><span class="keyword">function</span>(<span class="params">constructor, props, container</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReactMount.renderComponent(constructor(props), container);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Constructs a component instance of `constructor` with `initialProps` and</span><br><span class="line">   * renders it into a container node identified by supplied `id`.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;function&#125; componentConstructor React component constructor</span><br><span class="line">   * @param &#123;?object&#125; props Initial props of the component instance.</span><br><span class="line">   * @param &#123;string&#125; id ID of the DOM element to render into.</span><br><span class="line">   * @return &#123;ReactComponent&#125; Component instance rendered in the container node.</span><br><span class="line">   * container 是用提供的 id 获取的</span><br><span class="line">   * 会暴露 React.constructAndRenderComponentByID</span><br><span class="line">   */</span></span><br><span class="line">  constructAndRenderComponentByID: <span class="function"><span class="keyword">function</span>(<span class="params">constructor, props, id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReactMount.constructAndRenderComponent(constructor, props, $(id));</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Registers a container node into which React components will be rendered.</span><br><span class="line">   * This also creates the "reatRoot" ID that will be assigned to the element</span><br><span class="line">   * rendered within.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element to register as a container.</span><br><span class="line">   * @return &#123;string&#125; The "reactRoot" ID of elements rendered within.</span><br><span class="line">   * 注册一个 container node 到 container 里。</span><br><span class="line">   * 会创建一个 reactRoot Id，并赋给被渲染的 element</span><br><span class="line">   */</span></span><br><span class="line">  registerContainer: <span class="function"><span class="keyword">function</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// container.firstChild.id</span></span><br><span class="line">    <span class="keyword">var</span> reactRootID = getReactRootID(container);</span><br><span class="line">    <span class="keyword">if</span> (reactRootID) &#123;</span><br><span class="line">      <span class="comment">// If one exists, make sure it is a valid "reactRoot" ID.</span></span><br><span class="line">      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!reactRootID) &#123;</span><br><span class="line">      <span class="comment">// No valid "reactRoot" ID found, create one.</span></span><br><span class="line">      reactRootID = ReactInstanceHandles.getReactRootID(</span><br><span class="line">        globalMountPointCounter++</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    containersByReactRootID[reactRootID] = container;</span><br><span class="line">    <span class="keyword">return</span> reactRootID;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Unmounts and destroys the React component rendered in the `container`.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element containing a React component.</span><br><span class="line">   * 卸载和销毁，就通过 reactRootId（container first child Id）拿到，然后调用 component.unmountComponentFromNode</span><br><span class="line">   * 会暴露 React.unmountAndReleaseReactRootNode</span><br><span class="line">   */</span></span><br><span class="line">  unmountAndReleaseReactRootNode: <span class="function"><span class="keyword">function</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reactRootID = getReactRootID(container);</span><br><span class="line">    <span class="keyword">var</span> component = instanceByReactRootID[reactRootID];</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Consider throwing if no `component` was found.</span></span><br><span class="line">    component.unmountComponentFromNode(container);</span><br><span class="line">    <span class="comment">// 删除 container 里的 component</span></span><br><span class="line">    <span class="keyword">delete</span> instanceByReactRootID[reactRootID];</span><br><span class="line">    <span class="comment">// 删除 container，container 的 id 也是用 first child id 表示的</span></span><br><span class="line">    <span class="keyword">delete</span> containersByReactRootID[reactRootID];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Finds the container DOM element that contains React component to which the</span><br><span class="line">   * supplied DOM `id` belongs.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;string&#125; id The ID of an element rendered by a React component.</span><br><span class="line">   * @return &#123;?DOMElement&#125; DOM element that contains the `id`.</span><br><span class="line">   */</span></span><br><span class="line">  findReactContainerForID: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reatRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Consider throwing if `id` is not a valid React element ID.</span></span><br><span class="line">    <span class="keyword">return</span> containersByReactRootID[reatRootID];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Given the ID of a DOM node rendered by a React component, finds the root</span><br><span class="line">   * DOM node of the React component.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;string&#125; id ID of a DOM node in the React component.</span><br><span class="line">   * @return &#123;?DOMElement&#125; Root DOM node of the React component.</span><br><span class="line">   */</span></span><br><span class="line">  findReactRenderedDOMNodeSlow: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先找到 container</span></span><br><span class="line">    <span class="keyword">var</span> reactRoot = ReactMount.findReactContainerForID(id);</span><br><span class="line">    <span class="keyword">return</span> ReactInstanceHandles.findComponentRoot(reactRoot, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ReactMount;</span><br></pre></td></tr></table></figure>
<p>这里先看下 <code>$.js</code> 和 <code>ge.js</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Find a node by ID. 通过 ID 获取 node</span><br><span class="line"> *</span><br><span class="line"> * If your application code depends on the existence of the element, use $,</span><br><span class="line"> * which will throw if the element doesn't exist.</span><br><span class="line"> * 如果你的应用程序依赖 element 的存在性，使用 $，它会 throw 如果不存在。</span><br><span class="line"> *</span><br><span class="line"> * If you're not sure whether or not the element exists, use ge instead, and</span><br><span class="line"> * manually check for the element's existence in your application code.</span><br><span class="line"> * 如果不要 throw，使用 ge，然后手动检查</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = ge(arg);</span><br><span class="line">  <span class="keyword">if</span> (!element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      arg = <span class="string">'undefined'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg === <span class="literal">null</span>) &#123;</span><br><span class="line">      arg = <span class="string">'null'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Tried to get element "'</span> + arg.toString() + <span class="string">'" but it is not present '</span> +</span><br><span class="line">      <span class="string">'on the page.'</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下 <code>ge.js</code>：</p>
<p>重点是这句：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(arg)</span><br></pre></td></tr></table></figure>
<p>Mounting 的意思：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   ReactMount.renderComponent(component, $(<span class="string">'container'</span>));</span><br><span class="line">*</span><br><span class="line">*   &lt;<span class="keyword">div</span> id=<span class="string">"container"</span>&gt;         &lt;-- Supplied `<span class="keyword">container</span>`.</span><br><span class="line">*     &lt;<span class="keyword">div</span> id=<span class="string">".reactRoot[3]"</span>&gt;   &lt;-- Rendered reactRoot of React component.</span><br><span class="line">*       <span class="comment">// ...</span></span><br><span class="line">*     &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">*   &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<p>关于 scroll position，vjeux 有一篇博客讲解， <a href="http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html" target="_blank" rel="external">Scroll Position with React</a>。</p>
<h5 id="core/ReactCompositeComponent-js"><a href="#core/ReactCompositeComponent-js" class="headerlink" title="core/ReactCompositeComponent.js"></a>core/ReactCompositeComponent.js</h5><p>A composite component is a component comprised of other components. Composite Component 就是用来包含其他 components 的 component。</p>
<p>invariant.js</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Use invariant() <span class="keyword">to</span> assert state which your program assumes <span class="keyword">to</span> be <span class="constant">true</span>.</span><br><span class="line"> *</span><br><span class="line"> * Provide sprintf style format <span class="keyword">and</span> arguments <span class="keyword">to</span> provide information <span class="keyword">about</span></span><br><span class="line"> * what broke <span class="keyword">and</span> what you were expecting.</span><br><span class="line"> *</span><br><span class="line"> * The invariant message will be stripped <span class="keyword">in</span> production, <span class="keyword">but</span> <span class="keyword">the</span> invariant</span><br><span class="line"> * will remain <span class="keyword">to</span> ensure logic <span class="keyword">does</span> <span class="keyword">not</span> differ <span class="keyword">in</span> production.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>merge.js，浅复制。</p>
<p>mixInto.js，Simply copies properties to the prototype.</p>
<blockquote>
<p>对于原型还是不理解，这块必须看懂原型才能看懂啊。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi"></span><br><span class="line">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactComponent = <span class="built_in">require</span>(<span class="string">'ReactComponent'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactCurrentOwner = <span class="built_in">require</span>(<span class="string">'ReactCurrentOwner'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactOwner = <span class="built_in">require</span>(<span class="string">'ReactOwner'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactPropTransferer = <span class="built_in">require</span>(<span class="string">'ReactPropTransferer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invariant = <span class="built_in">require</span>(<span class="string">'invariant'</span>);</span><br><span class="line"><span class="keyword">var</span> keyMirror = <span class="built_in">require</span>(<span class="string">'keyMirror'</span>);</span><br><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'merge'</span>);</span><br><span class="line"><span class="keyword">var</span> mixInto = <span class="built_in">require</span>(<span class="string">'mixInto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Policies that describe methods in `ReactCompositeComponentInterface`.</span><br><span class="line"> * 某些方法的策略</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> SpecPolicy = keyMirror(&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * These methods may be defined only once by the class specification or mixin.</span><br><span class="line">   */</span></span><br><span class="line">  DEFINE_ONCE: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * These methods may be defined by both the class specification and mixins.</span><br><span class="line">   * Subsequent definitions will be chained. These methods must return void.</span><br><span class="line">   */</span></span><br><span class="line">  DEFINE_MANY: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * These methods are overriding the base ReactCompositeComponent class.</span><br><span class="line">   */</span></span><br><span class="line">  OVERRIDE_BASE: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Composite components are higher-level components that compose other composite</span><br><span class="line"> * or native components.</span><br><span class="line"> * 是高阶组件，组合其他 composite 或者 DOM 原生的组件</span><br><span class="line"> *</span><br><span class="line"> * To create a new type of `ReactCompositeComponent`, pass a specification of</span><br><span class="line"> * your new class to `React.createClass`. The only requirement of your class</span><br><span class="line"> * specification is that you implement a `render` method.</span><br><span class="line"> * 使用 createClass 创建，唯一要实现的是 render 方法</span><br><span class="line"> *</span><br><span class="line"> *   var MyComponent = React.createClass(&#123;</span><br><span class="line"> *     render: function() &#123;</span><br><span class="line"> *       return &lt;div&gt;Hello World&lt;/div&gt;;</span><br><span class="line"> *     &#125;</span><br><span class="line"> *   &#125;);</span><br><span class="line"> *</span><br><span class="line"> * The class specification supports a specific protocol of methods that have</span><br><span class="line"> * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for</span><br><span class="line"> * more the comprehensive protocol. Any other properties and methods in the</span><br><span class="line"> * class specification will available on the prototype.</span><br><span class="line"> * class 规范支持一些特定的协议。参看 ReactCompositeComponentInterface 来了解详情</span><br><span class="line"> *</span><br><span class="line"> * @interface ReactCompositeComponentInterface</span><br><span class="line"> * @internal</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ReactCompositeComponentInterface = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * An array of Mixin objects to include when defining your component.</span><br><span class="line">   *</span><br><span class="line">   * @type &#123;array&#125;</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  mixins: SpecPolicy.DEFINE_MANY,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Definition of props for this component.</span><br><span class="line">   *</span><br><span class="line">   * @type &#123;array&#125;</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  props: SpecPolicy.DEFINE_ONCE,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ==== Definition methods ====</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked once before the component is mounted. The return value will be used</span><br><span class="line">   * as the initial value of `this.state`.</span><br><span class="line">   * 会在 component 第一次挂载时调用一次，返回值就是 this.state 的初始值</span><br><span class="line">   *</span><br><span class="line">   *   getInitialState: function() &#123;</span><br><span class="line">   *     return &#123;</span><br><span class="line">   *       isOn: false,</span><br><span class="line">   *       fooBaz: new BazFoo()</span><br><span class="line">   *     &#125;</span><br><span class="line">   *   &#125;</span><br><span class="line">   *</span><br><span class="line">   * @return &#123;object&#125;</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  getInitialState: SpecPolicy.DEFINE_ONCE,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Uses props from `this.props` and state from `this.state` to render the</span><br><span class="line">   * structure of the component.</span><br><span class="line">   *</span><br><span class="line">   * No guarantees are made about when or how often this method is invoked, so</span><br><span class="line">   * it must not have side effects.</span><br><span class="line">   * </span><br><span class="line">   * 使用 this.props 和 this.state 来渲染 component 的结构。不能保证调用多少次，必须是幂等，没有 side effects</span><br><span class="line">   *</span><br><span class="line">   *   render: function() &#123;</span><br><span class="line">   *     var name = this.props.name;</span><br><span class="line">   *     return &lt;div&gt;Hello, &#123;name&#125;!&lt;/div&gt;;</span><br><span class="line">   *   &#125;</span><br><span class="line">   *</span><br><span class="line">   * @return &#123;ReactComponent&#125;</span><br><span class="line">   * @nosideeffects</span><br><span class="line">   * @required</span><br><span class="line">   */</span></span><br><span class="line">  render: SpecPolicy.DEFINE_ONCE,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ==== Delegate methods ====</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked when the component is initially created and about to be mounted.</span><br><span class="line">   * This may have side effects, but any external subscriptions or data created</span><br><span class="line">   * by this method must be cleaned up in `componentWillUnmount`.</span><br><span class="line">   * 可能有 side effect，但是要注意，外部的订阅或者数据，必须在 componentWillUnmount 清理掉</span><br><span class="line">   *</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  componentWillMount: SpecPolicy.DEFINE_MANY,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked when the component has been mounted and has a DOM representation.</span><br><span class="line">   * However, there is no guarantee that the DOM node is in the document.</span><br><span class="line">   *</span><br><span class="line">   * Use this as an opportunity to operate on the DOM when the component has</span><br><span class="line">   * been mounted (initialized and rendered) for the first time.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;DOMElement&#125; rootNode DOM element representing the component.</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  componentDidMount: SpecPolicy.DEFINE_MANY,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked before the component receives new props.</span><br><span class="line">   *</span><br><span class="line">   * Use this as an opportunity to react to a prop transition by updating the</span><br><span class="line">   * state using `this.setState`. Current props are accessed via `this.props`.</span><br><span class="line">   *</span><br><span class="line">   *   componentWillReceiveProps: function(nextProps) &#123;</span><br><span class="line">   *     this.setState(&#123;</span><br><span class="line">   *       likesIncreasing: nextProps.likeCount &gt; this.props.likeCount</span><br><span class="line">   *     &#125;);</span><br><span class="line">   *   &#125;</span><br><span class="line">   *</span><br><span class="line">   * <span class="doctag">NOTE:</span> There is no equivalent `componentWillReceiveState`. An incoming prop</span><br><span class="line">   * transition may cause a state change, but the opposite is not true. If you</span><br><span class="line">   * need it, you are probably looking for `componentWillUpdate`.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; nextProps</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked while deciding if the component should be updated as a result of</span><br><span class="line">   * receiving new props and state.</span><br><span class="line">   *</span><br><span class="line">   * Use this as an opportunity to `return false` when you're certain that the</span><br><span class="line">   * transition to the new props and state will not require a component update.</span><br><span class="line">   *</span><br><span class="line">   *   shouldComponentUpdate: function(nextProps, nextState) &#123;</span><br><span class="line">   *     return !equal(nextProps, this.props) || !equal(nextState, this.state);</span><br><span class="line">   *   &#125;</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; nextProps</span><br><span class="line">   * @param &#123;?object&#125; nextState</span><br><span class="line">   * @return &#123;boolean&#125; True if the component should update.</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked when the component is about to update due to a transition from</span><br><span class="line">   * `this.props` and `this.state` to `nextProps` and `nextState`.</span><br><span class="line">   *</span><br><span class="line">   * Use this as an opportunity to perform preparation before an update occurs.</span><br><span class="line">   *</span><br><span class="line">   * <span class="doctag">NOTE:</span> You **cannot** use `this.setState()` in this method.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; nextProps</span><br><span class="line">   * @param &#123;?object&#125; nextState</span><br><span class="line">   * @param &#123;ReactReconcileTransaction&#125; transaction</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  componentWillUpdate: SpecPolicy.DEFINE_MANY,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked when the component's DOM representation has been updated.</span><br><span class="line">   *</span><br><span class="line">   * Use this as an opportunity to operate on the DOM when the component has</span><br><span class="line">   * been updated.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; prevProps</span><br><span class="line">   * @param &#123;?object&#125; prevState</span><br><span class="line">   * @param &#123;DOMElement&#125; rootNode DOM element representing the component.</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  componentDidUpdate: SpecPolicy.DEFINE_MANY,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Invoked when the component is about to be removed from its parent and have</span><br><span class="line">   * its DOM representation destroyed.</span><br><span class="line">   *</span><br><span class="line">   * Use this as an opportunity to deallocate any external resources.</span><br><span class="line">   *</span><br><span class="line">   * <span class="doctag">NOTE:</span> There is no `componentDidUnmount` since your component will have been</span><br><span class="line">   * destroyed by that point.</span><br><span class="line">   *</span><br><span class="line">   * @optional</span><br><span class="line">   */</span></span><br><span class="line">  componentWillUnmount: SpecPolicy.DEFINE_MANY,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ==== Advanced methods ====</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Updates the component's currently mounted DOM representation.</span><br><span class="line">   *</span><br><span class="line">   * By default, this implements React's rendering and reconciliation algorithm.</span><br><span class="line">   * Sophisticated clients may wish to override this.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;ReactReconcileTransaction&#125; transaction</span><br><span class="line">   * @internal</span><br><span class="line">   * @overridable</span><br><span class="line">   */</span></span><br><span class="line">  updateComponent: SpecPolicy.OVERRIDE_BASE</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Mapping from class specification keys to special processing functions.</span><br><span class="line"> *</span><br><span class="line"> * Although these are declared in the specification when defining classes</span><br><span class="line"> * using `React.createClass`, they will not be on the component's prototype.</span><br><span class="line"> * 尽管这些会在定义 class 是声明，但是不会放到 component 的 prototype 上。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> RESERVED_SPEC_KEYS = &#123;</span><br><span class="line">  displayName: <span class="function"><span class="keyword">function</span>(<span class="params">Constructor, displayName</span>) </span>&#123;</span><br><span class="line">    Constructor.displayName = displayName;</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins: <span class="function"><span class="keyword">function</span>(<span class="params">Constructor, mixins</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mixins) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mixins.length; i++) &#123;</span><br><span class="line">        mixSpecIntoComponent(Constructor, mixins[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: <span class="function"><span class="keyword">function</span>(<span class="params">Constructor, props</span>) </span>&#123;</span><br><span class="line">    Constructor.propDeclarations = props;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Custom version of `mixInto` which handles policy validation and reserved</span><br><span class="line"> * specification keys when building `ReactCompositeComponent` classses.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixSpecIntoComponent</span>(<span class="params">Constructor, spec</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = Constructor.prototype;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> spec) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!spec.hasOwnProperty(name)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> property = spec[name];</span><br><span class="line">    <span class="keyword">var</span> specPolicy = ReactCompositeComponentInterface[name];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Disallow overriding of base class methods unless explicitly allowed.</span></span><br><span class="line">    <span class="keyword">if</span> (ReactCompositeComponentMixin.hasOwnProperty(name)) &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        specPolicy === SpecPolicy.OVERRIDE_BASE,</span><br><span class="line">        <span class="string">'ReactCompositeComponentInterface: You are attempting to override '</span> +</span><br><span class="line">        <span class="string">'`%s` from your class specification. Ensure that your method names '</span> +</span><br><span class="line">        <span class="string">'do not overlap with React methods.'</span>,</span><br><span class="line">        name</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Disallow using `React.autoBind` on internal methods.</span></span><br><span class="line">    <span class="keyword">if</span> (specPolicy != <span class="literal">null</span>) &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        !property || !property.__reactAutoBind,</span><br><span class="line">        <span class="string">'ReactCompositeComponentInterface: You are attempting to use '</span> +</span><br><span class="line">        <span class="string">'`React.autoBind` on `%s`, a method that is internal to React.'</span> +</span><br><span class="line">        <span class="string">'Internal methods are called with the component as the context.'</span>,</span><br><span class="line">        name</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Disallow defining methods more than once unless explicitly allowed.</span></span><br><span class="line">    <span class="keyword">if</span> (proto.hasOwnProperty(name)) &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        specPolicy === SpecPolicy.DEFINE_MANY,</span><br><span class="line">        <span class="string">'ReactCompositeComponentInterface: You are attempting to define '</span> +</span><br><span class="line">        <span class="string">'`%s` on your component more than once. This conflict may be due '</span> +</span><br><span class="line">        <span class="string">'to a mixin.'</span>,</span><br><span class="line">        name</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (RESERVED_SPEC_KEYS.hasOwnProperty(name)) &#123;</span><br><span class="line">      RESERVED_SPEC_KEYS[name](Constructor, property);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (property &amp;&amp; property.__reactAutoBind) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!proto.__reactAutoBindMap) &#123;</span><br><span class="line">        proto.__reactAutoBindMap = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      proto.__reactAutoBindMap[name] = property.__reactAutoBind;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proto.hasOwnProperty(name)) &#123;</span><br><span class="line">      <span class="comment">// For methods which are defined more than once, call the existing methods</span></span><br><span class="line">      <span class="comment">// before calling the new property.</span></span><br><span class="line">      proto[name] = createChainedFunction(proto[name], property);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      proto[name] = property;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates a function that invokes two functions and ignores their return vales.</span><br><span class="line"> * 常见一个 function，可以顺序调用其他 function，但是会忽略掉 rtv</span><br><span class="line"> * @param &#123;function&#125; one Function to invoke first.</span><br><span class="line"> * @param &#123;function&#125; two Function to invoke second.</span><br><span class="line"> * @return &#123;function&#125; Function that invokes the two argument functions.</span><br><span class="line"> * @private</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createChainedFunction</span>(<span class="params">one, two</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">chainedFunction</span>(<span class="params">a, b, c, d, e, tooMany</span>) </span>&#123;</span><br><span class="line">    invariant(</span><br><span class="line">      <span class="keyword">typeof</span> tooMany === <span class="string">'undefined'</span>,</span><br><span class="line">      <span class="string">'Chained function can only take a maximum of 5 arguments.'</span></span><br><span class="line">    );</span><br><span class="line">    one.call(<span class="keyword">this</span>, a, b, c, d, e);</span><br><span class="line">    two.call(<span class="keyword">this</span>, a, b, c, d, e);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * `ReactCompositeComponent` maintains an auxiliary life cycle state in</span><br><span class="line"> * `this._compositeLifeCycleState` (which can be null).</span><br><span class="line"> *</span><br><span class="line"> * 会维护一个辅助的 life cycle state 在 this._compositeLifeCycleState</span><br><span class="line"> * This is different from the life cycle state maintained by `ReactComponent` in</span><br><span class="line"> * `this._lifeCycleState`.</span><br><span class="line"> * 和 ReactComponent 中的 this._lifeCycleState 有区别</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> CompositeLifeCycle = keyMirror(&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Components in the process of being mounted respond to state changes</span><br><span class="line">   * differently.</span><br><span class="line">   */</span></span><br><span class="line">  MOUNTING: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Components in the process of being unmounted are guarded against state</span><br><span class="line">   * changes.</span><br><span class="line">   */</span></span><br><span class="line">  UNMOUNTING: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Components that are mounted and receiving new props respond to state</span><br><span class="line">   * changes differently.</span><br><span class="line">   */</span></span><br><span class="line">  RECEIVING_PROPS: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Components that are mounted and receiving new state are guarded against</span><br><span class="line">   * additional state changes.</span><br><span class="line">   */</span></span><br><span class="line">  RECEIVING_STATE: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * @lends &#123;ReactCompositeComponent.prototype&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ReactCompositeComponentMixin = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Base constructor for all composite component.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;?object&#125; initialProps</span><br><span class="line">   * @param &#123;*&#125; children</span><br><span class="line">   * @final</span><br><span class="line">   * @internal</span><br><span class="line">   */</span></span><br><span class="line">  construct: <span class="function"><span class="keyword">function</span>(<span class="params">initialProps, children</span>) </span>&#123;</span><br><span class="line">    ReactComponent.Mixin.construct.call(<span class="keyword">this</span>, initialProps, children);</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._pendingState = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Initializes the component, renders markup, and registers event listeners.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;string&#125; rootID DOM ID of the root node.</span><br><span class="line">   * @param &#123;ReactReconcileTransaction&#125; transaction</span><br><span class="line">   * @return &#123;?string&#125; Rendered markup to be inserted into the DOM.</span><br><span class="line">   * @final</span><br><span class="line">   * @internal</span><br><span class="line">   */</span></span><br><span class="line">  mountComponent: <span class="function"><span class="keyword">function</span>(<span class="params">rootID, transaction</span>) </span>&#123;</span><br><span class="line">    ReactComponent.Mixin.mountComponent.call(<span class="keyword">this</span>, rootID, transaction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unset `this._lifeCycleState` until after this method is finished.</span></span><br><span class="line">    <span class="keyword">this</span>._lifeCycleState = ReactComponent.LifeCycle.UNMOUNTED;</span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.constructor.propDeclarations) &#123;</span><br><span class="line">      <span class="keyword">this</span>._assertValidProps(<span class="keyword">this</span>.props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.__reactAutoBindMap) &#123;</span><br><span class="line">      <span class="keyword">this</span>._bindAutoBindMethods();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.getInitialState ? <span class="keyword">this</span>.getInitialState() : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._pendingState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.componentWillMount) &#123;</span><br><span class="line">      <span class="keyword">this</span>.componentWillMount();</span><br><span class="line">      <span class="comment">// When mounting, calls to `setState` by `componentWillMount` will set</span></span><br><span class="line">      <span class="comment">// `this._pendingState` without triggering a re-render.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>._pendingState) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">this</span>._pendingState;</span><br><span class="line">        <span class="keyword">this</span>._pendingState = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.componentDidMount) &#123;</span><br><span class="line">      transaction.getReactOnDOMReady().enqueue(<span class="keyword">this</span>, <span class="keyword">this</span>.componentDidMount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._renderedComponent = <span class="keyword">this</span>._renderValidatedComponent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Done with mounting, `setState` will now trigger UI changes.</span></span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._lifeCycleState = ReactComponent.LifeCycle.MOUNTED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._renderedComponent.mountComponent(rootID, transaction);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Releases any resources allocated by `mountComponent`.</span><br><span class="line">   *</span><br><span class="line">   * @final</span><br><span class="line">   * @internal</span><br><span class="line">   */</span></span><br><span class="line">  unmountComponent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.componentWillUnmount) &#123;</span><br><span class="line">      <span class="keyword">this</span>.componentWillUnmount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ReactComponent.Mixin.unmountComponent.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>._renderedComponent.unmountComponent();</span><br><span class="line">    <span class="keyword">this</span>._renderedComponent = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.refs) &#123;</span><br><span class="line">      <span class="keyword">this</span>.refs = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Some existing components rely on this.props even after they've been</span></span><br><span class="line">    <span class="comment">// destroyed (in event handlers).</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> this.props = null;</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> this.state = null;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Updates the rendered DOM nodes given a new set of props.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; nextProps Next set of properties.</span><br><span class="line">   * @param &#123;ReactReconcileTransaction&#125; transaction</span><br><span class="line">   * @final</span><br><span class="line">   * @internal</span><br><span class="line">   */</span></span><br><span class="line">  receiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps, transaction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.constructor.propDeclarations) &#123;</span><br><span class="line">      <span class="keyword">this</span>._assertValidProps(nextProps);</span><br><span class="line">    &#125;</span><br><span class="line">    ReactComponent.Mixin.receiveProps.call(<span class="keyword">this</span>, nextProps, transaction);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.componentWillReceiveProps) &#123;</span><br><span class="line">      <span class="keyword">this</span>.componentWillReceiveProps(nextProps, transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;</span><br><span class="line">    <span class="comment">// When receiving props, calls to `setState` by `componentWillReceiveProps`</span></span><br><span class="line">    <span class="comment">// will set `this._pendingState` without triggering a re-render.</span></span><br><span class="line">    <span class="keyword">var</span> nextState = <span class="keyword">this</span>._pendingState || <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">this</span>._pendingState = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._receivePropsAndState(nextProps, nextState, transaction);</span><br><span class="line">    <span class="keyword">this</span>._compositeLifeCycleState = <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Sets a subset of the state. Always use this or `replaceState` to mutate</span><br><span class="line">   * state. You should treat `this.state` as immutable.</span><br><span class="line">   *</span><br><span class="line">   * There is no guarantee that `this.state` will be immediately updated, so</span><br><span class="line">   * accessing `this.state` after calling this method may return the old value.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; partialState Next partial state to be merged with state.</span><br><span class="line">   * @final</span><br><span class="line">   * @protected</span><br><span class="line">   */</span></span><br><span class="line">  setState: <span class="function"><span class="keyword">function</span>(<span class="params">partialState</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Merge with `_pendingState` if it exists, otherwise with existing state.</span></span><br><span class="line">    <span class="keyword">this</span>.replaceState(merge(<span class="keyword">this</span>._pendingState || <span class="keyword">this</span>.state, partialState));</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Replaces all of the state. Always use this or `setState` to mutate state.</span><br><span class="line">   * You should treat `this.state` as immutable.</span><br><span class="line">   *</span><br><span class="line">   * There is no guarantee that `this.state` will be immediately updated, so</span><br><span class="line">   * accessing `this.state` after calling this method may return the old value.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; completeState Next state.</span><br><span class="line">   * @final</span><br><span class="line">   * @protected</span><br><span class="line">   */</span></span><br><span class="line">  replaceState: <span class="function"><span class="keyword">function</span>(<span class="params">completeState</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> compositeLifeCycleState = <span class="keyword">this</span>._compositeLifeCycleState;</span><br><span class="line">    invariant(</span><br><span class="line">      <span class="keyword">this</span>._lifeCycleState === ReactComponent.LifeCycle.MOUNTED ||</span><br><span class="line">      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,</span><br><span class="line">      <span class="string">'replaceState(...): Can only update a mounted (or mounting) component.'</span></span><br><span class="line">    );</span><br><span class="line">    invariant(</span><br><span class="line">      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &amp;&amp;</span><br><span class="line">      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,</span><br><span class="line">      <span class="string">'replaceState(...): Cannot update while unmounting component or during '</span> +</span><br><span class="line">      <span class="string">'an existing state transition (such as within `render`).'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._pendingState = completeState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not trigger a state transition if we are in the middle of mounting or</span></span><br><span class="line">    <span class="comment">// receiving props because both of those will already be doing this.</span></span><br><span class="line">    <span class="keyword">if</span> (compositeLifeCycleState !== CompositeLifeCycle.MOUNTING &amp;&amp;</span><br><span class="line">        compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_PROPS) &#123;</span><br><span class="line">      <span class="keyword">this</span>._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> nextState = <span class="keyword">this</span>._pendingState;</span><br><span class="line">      <span class="keyword">this</span>._pendingState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> transaction = ReactComponent.ReactReconcileTransaction.getPooled();</span><br><span class="line">      transaction.perform(</span><br><span class="line">        <span class="keyword">this</span>._receivePropsAndState,</span><br><span class="line">        <span class="keyword">this</span>,</span><br><span class="line">        <span class="keyword">this</span>.props,</span><br><span class="line">        nextState,</span><br><span class="line">        transaction</span><br><span class="line">      );</span><br><span class="line">      ReactComponent.ReactReconcileTransaction.release(transaction);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>._compositeLifeCycleState = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Receives next props and next state, and negotiates whether or not the</span><br><span class="line">   * component should update as a result.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; nextProps Next object to set as props.</span><br><span class="line">   * @param &#123;?object&#125; nextState Next object to set as state.</span><br><span class="line">   * @param &#123;ReactReconcileTransaction&#125; transaction</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  _receivePropsAndState: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps, nextState, transaction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.shouldComponentUpdate ||</span><br><span class="line">        <span class="keyword">this</span>.shouldComponentUpdate(nextProps, nextState)) &#123;</span><br><span class="line">      <span class="comment">// Will set `this.props` and `this.state`.</span></span><br><span class="line">      <span class="keyword">this</span>._performComponentUpdate(nextProps, nextState, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// If it's determined that a component should not update, we still want</span></span><br><span class="line">      <span class="comment">// to set props and state.</span></span><br><span class="line">      <span class="keyword">this</span>.props = nextProps;</span><br><span class="line">      <span class="keyword">this</span>.state = nextState;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Merges new props and state, notifies delegate methods of update and</span><br><span class="line">   * performs update.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; nextProps Next object to set as properties.</span><br><span class="line">   * @param &#123;?object&#125; nextState Next object to set as state.</span><br><span class="line">   * @param &#123;ReactReconcileTransaction&#125; transaction</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  _performComponentUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps, nextState, transaction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prevProps = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">var</span> prevState = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.componentWillUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.componentWillUpdate(nextProps, nextState, transaction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.props = nextProps;</span><br><span class="line">    <span class="keyword">this</span>.state = nextState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.updateComponent(transaction);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.componentDidUpdate) &#123;</span><br><span class="line">      transaction.getReactOnDOMReady().enqueue(</span><br><span class="line">        <span class="keyword">this</span>,</span><br><span class="line">        <span class="keyword">this</span>.componentDidUpdate.bind(<span class="keyword">this</span>, prevProps, prevState)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Updates the component's currently mounted DOM representation.</span><br><span class="line">   *</span><br><span class="line">   * By default, this implements React's rendering and reconciliation algorithm.</span><br><span class="line">   * Sophisticated clients may wish to override this.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;ReactReconcileTransaction&#125; transaction</span><br><span class="line">   * @internal</span><br><span class="line">   * @overridable</span><br><span class="line">   */</span></span><br><span class="line">  updateComponent: <span class="function"><span class="keyword">function</span>(<span class="params">transaction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentComponent = <span class="keyword">this</span>._renderedComponent;</span><br><span class="line">    <span class="keyword">var</span> nextComponent = <span class="keyword">this</span>._renderValidatedComponent();</span><br><span class="line">    <span class="keyword">if</span> (currentComponent.constructor === nextComponent.constructor) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!nextComponent.props.isStatic) &#123;</span><br><span class="line">        currentComponent.receiveProps(nextComponent.props, transaction);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// These two IDs are actually the same! But nothing should rely on that.</span></span><br><span class="line">      <span class="keyword">var</span> thisID = <span class="keyword">this</span>._rootNodeID;</span><br><span class="line">      <span class="keyword">var</span> currentComponentID = currentComponent._rootNodeID;</span><br><span class="line">      currentComponent.unmountComponent();</span><br><span class="line">      <span class="keyword">var</span> nextMarkup = nextComponent.mountComponent(thisID, transaction);</span><br><span class="line">      ReactComponent.DOMIDOperations.dangerouslyReplaceNodeWithMarkupByID(</span><br><span class="line">        currentComponentID,</span><br><span class="line">        nextMarkup</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">this</span>._renderedComponent = nextComponent;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Forces an update. This should only be invoked when it is known with</span><br><span class="line">   * certainty that we are **not** in a DOM transaction.</span><br><span class="line">   *</span><br><span class="line">   * You may want to call this when you know that some deeper aspect of the</span><br><span class="line">   * component's state has changed but `setState` was not called.</span><br><span class="line">   *</span><br><span class="line">   * This will not invoke `shouldUpdateComponent`, but it will invoke</span><br><span class="line">   * `componentWillUpdate` and `componentDidUpdate`.</span><br><span class="line">   *</span><br><span class="line">   * @final</span><br><span class="line">   * @protected</span><br><span class="line">   */</span></span><br><span class="line">  forceUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> transaction = ReactComponent.ReactReconcileTransaction.getPooled();</span><br><span class="line">    transaction.perform(</span><br><span class="line">      <span class="keyword">this</span>._performComponentUpdate,</span><br><span class="line">      <span class="keyword">this</span>,</span><br><span class="line">      <span class="keyword">this</span>.props,</span><br><span class="line">      <span class="keyword">this</span>.state,</span><br><span class="line">      transaction</span><br><span class="line">    );</span><br><span class="line">    ReactComponent.ReactReconcileTransaction.release(transaction);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  _renderValidatedComponent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ReactCurrentOwner.current = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> renderedComponent = <span class="keyword">this</span>.render();</span><br><span class="line">    ReactCurrentOwner.current = <span class="literal">null</span>;</span><br><span class="line">    invariant(</span><br><span class="line">      ReactComponent.isValidComponent(renderedComponent),</span><br><span class="line">      <span class="string">'%s.render(): A valid ReactComponent must be returned.'</span>,</span><br><span class="line">      <span class="keyword">this</span>.constructor.displayName || <span class="string">'ReactCompositeComponent'</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> renderedComponent;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * @param &#123;object&#125; props</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  _assertValidProps: <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> propDeclarations = <span class="keyword">this</span>.constructor.propDeclarations;</span><br><span class="line">    <span class="keyword">var</span> componentName = <span class="keyword">this</span>.constructor.displayName;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> propDeclarations) &#123;</span><br><span class="line">      <span class="keyword">var</span> checkProp = propDeclarations[propName];</span><br><span class="line">      <span class="keyword">if</span> (checkProp) &#123;</span><br><span class="line">        checkProp(props, propName, componentName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  _bindAutoBindMethods: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> autoBindKey <span class="keyword">in</span> <span class="keyword">this</span>.__reactAutoBindMap) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.__reactAutoBindMap.hasOwnProperty(autoBindKey)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> method = <span class="keyword">this</span>.__reactAutoBindMap[autoBindKey];</span><br><span class="line">      <span class="keyword">this</span>[autoBindKey] = <span class="keyword">this</span>._bindAutoBindMethod(method);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Binds a method to the component.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;function&#125; method Method to be bound.</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  _bindAutoBindMethod: <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> component = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> hasWarned = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoBound</span>(<span class="params">a, b, c, d, e, tooMany</span>) </span>&#123;</span><br><span class="line">      invariant(</span><br><span class="line">        <span class="keyword">typeof</span> tooMany === <span class="string">'undefined'</span>,</span><br><span class="line">        <span class="string">'React.autoBind(...): Methods can only take a maximum of 5 arguments.'</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (component._lifeCycleState === ReactComponent.LifeCycle.MOUNTED) &#123;</span><br><span class="line">        <span class="keyword">return</span> method.call(component, a, b, c, d, e);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasWarned) &#123;</span><br><span class="line">        hasWarned = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="built_in">console</span>.warn(</span><br><span class="line">            <span class="string">'React.autoBind(...): Attempted to invoke an auto-bound method '</span> +</span><br><span class="line">            <span class="string">'on an unmounted instance of `%s`. You either have a memory leak '</span> +</span><br><span class="line">            <span class="string">'or an event handler that is being run after unmounting.'</span>,</span><br><span class="line">            component.constructor.displayName || <span class="string">'ReactCompositeComponent'</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> autoBound;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactCompositeComponentBase = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);</span><br><span class="line">mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);</span><br><span class="line">mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);</span><br><span class="line">mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Module for creating composite components.</span><br><span class="line"> *</span><br><span class="line"> * @class ReactCompositeComponent</span><br><span class="line"> * @extends ReactComponent</span><br><span class="line"> * @extends ReactOwner</span><br><span class="line"> * @extends ReactPropTransferer</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ReactCompositeComponent = &#123;</span><br><span class="line"></span><br><span class="line">  LifeCycle: CompositeLifeCycle,</span><br><span class="line"></span><br><span class="line">  Base: ReactCompositeComponentBase,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Creates a composite component class given a class specification.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;object&#125; spec Class specification (which must define `render`).</span><br><span class="line">   * @return &#123;function&#125; Component constructor function.</span><br><span class="line">   * @public</span><br><span class="line">   */</span></span><br><span class="line">  createClass: <span class="function"><span class="keyword">function</span>(<span class="params">spec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Constructor = <span class="function"><span class="keyword">function</span>(<span class="params">initialProps, children</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.construct(initialProps, children);</span><br><span class="line">    &#125;;</span><br><span class="line">    Constructor.prototype = <span class="keyword">new</span> ReactCompositeComponentBase();</span><br><span class="line">    Constructor.prototype.constructor = Constructor;</span><br><span class="line">    mixSpecIntoComponent(Constructor, spec);</span><br><span class="line">    invariant(</span><br><span class="line">      Constructor.prototype.render,</span><br><span class="line">      <span class="string">'createClass(...): Class specification must implement a `render` method.'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ConvenienceConstructor = <span class="function"><span class="keyword">function</span>(<span class="params">props, children</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Constructor(props, children);</span><br><span class="line">    &#125;;</span><br><span class="line">    ConvenienceConstructor.componentConstructor = Constructor;</span><br><span class="line">    ConvenienceConstructor.originalSpec = spec;</span><br><span class="line">    <span class="keyword">return</span> ConvenienceConstructor;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Marks the provided method to be automatically bound to the component.</span><br><span class="line">   * This means the method's context will always be the component.</span><br><span class="line">   *</span><br><span class="line">   *   React.createClass(&#123;</span><br><span class="line">   *     handleClick: React.autoBind(function() &#123;</span><br><span class="line">   *       this.setState(&#123;jumping: true&#125;);</span><br><span class="line">   *     &#125;),</span><br><span class="line">   *     render: function() &#123;</span><br><span class="line">   *       return &lt;a onClick=&#123;this.handleClick&#125;&gt;Jump&lt;/a&gt;;</span><br><span class="line">   *     &#125;</span><br><span class="line">   *   &#125;);</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;function&#125; method Method to be bound.</span><br><span class="line">   * @public</span><br><span class="line">   */</span></span><br><span class="line">  autoBind: <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unbound</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      invariant(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'React.autoBind(...): Attempted to invoke an auto-bound method that '</span> +</span><br><span class="line">        <span class="string">'was not correctly defined on the class specification.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    unbound.__reactAutoBind = method;</span><br><span class="line">    <span class="keyword">return</span> unbound;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ReactCompositeComponent;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="u505C_u4E00_u4E0B__26amp_3B__u56DE_u987E"><a href="#u505C_u4E00_u4E0B__26amp_3B__u56DE_u987E" class="headerlink" title="停一下 &amp; 回顾"></a>停一下 &amp; 回顾</h2><p>2016年02月24日22:09:36</p>
<p>React 之前的读法，有点类似于是学习细节。</p>
<p>下一步想换个思路：</p>
<ul>
<li>一是不断学习 TypeScript 的语法，不断重构</li>
<li>理解 React 的思路，一条线走下去（完成一个最简单的功能）</li>
<li>然后实现</li>
<li>然后不断填充细节</li>
<li>不断重构</li>
</ul>
<h3 id="pseudo-react"><a href="#pseudo-react" class="headerlink" title="pseudo-react"></a>pseudo-react</h3><p>React.createClass(</p>
<p>React.createFactory(</p>
<p>ReactDOM.render(</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u58F0_u660E"><a href="#u58F0_u660E" class="headerlink" title="声明"></a>声明</h2><ul>
<li>解读的是结构</li>
</ul>
<h2 id="u8BA1_u5212"><a href]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016 再观《肖申克的救赎》]]></title>
    <link href="http://shane.hsi.rocks/2016/02/02/2016-The-Shawshank-Redemption/"/>
    <id>http://shane.hsi.rocks/2016/02/02/2016-The-Shawshank-Redemption/</id>
    <published>2016-02-02T02:11:12.000Z</published>
    <updated>2016-02-23T14:28:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Remember，hope is a good thing, maybe the best of things and no good thing ever dies.</p>
<p>It takes a strong man to save himself，and a great man to save another.</p>
</blockquote>
<p>2016 希望自己：</p>
<ul>
<li>Java 上不刻意去学习，以产品和架构设计为主，这一块需要刻意学习</li>
<li>晚上（转组后可能加班较长，时间安排再说）的时间做其他事情<ul>
<li>财富管理</li>
<li>时间管理</li>
<li>前端这块，没有了业务压力，可以当做兴趣来做</li>
<li>另外，选择看哈佛商业评论中文版</li>
</ul>
</li>
</ul>
<p>之后，等把时间管理和财富管理有一定的了解后，开始</p>
<ul>
<li>英语雅思</li>
</ul>
<p>工作机会这块，以现在为主。平时按一定频率看下招聘信息，通过 JD 来校正提升内容。</p>
<p>以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Remember，hope is a good thing, maybe the best of things and no good thing ever dies.</p>
<p>It takes a strong man to save hi]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ISP 在前端开发中]]></title>
    <link href="http://shane.hsi.rocks/2016/02/02/ISP-in-Front-end-Component-Development/"/>
    <id>http://shane.hsi.rocks/2016/02/02/ISP-in-Front-end-Component-Development/</id>
    <published>2016-02-02T02:08:19.000Z</published>
    <updated>2016-02-20T12:57:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7406_u8BBA_u51C6_u5907"><a href="#u7406_u8BBA_u51C6_u5907" class="headerlink" title="理论准备"></a>理论准备</h2><p>ISP 即 Interface Segregation Principle。</p>
<p>多个客户端特定的接口好于一个通用接口</p>
<blockquote>
<p>many client-specific interfaces are better than one general-purpose interface.</p>
</blockquote>
<p>客户端不应该依赖不需要的方法</p>
<blockquote>
<p>The interface-segregation principle (ISP) states that no client should be forced to depend on methods it does not use.</p>
</blockquote>
<p>这种缩水的接口有叫做『角色接口』。</p>
<blockquote>
<p>ISP splits interfaces which are very large into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them. Such shrunken interfaces are also called role interfaces</p>
</blockquote>
<p>参考术语：<a href="https://en.wikipedia.org/wiki/GRASP_(object-oriented_design" target="_blank" rel="external">GRASP (object-oriented design)</a>)，General Responsibility Assignment Software Patterns (or Principles)。</p>
<p>我记得 Erik Meijer 在 youtube 上有个讲座介绍了接口分离原则的数学证明。回头翻看下。</p>
<p>参考链接：<a href="https://en.wikipedia.org/wiki/Software_craftsmanship" target="_blank" rel="external">Software craftsmanship</a>。</p>
<p>什么是接口？</p>
<p>在计算机系统中，接口是两个组件交换信息的共享边界。这种信息的交换可能是双向的（send/receive data) 也可能是单向的。</p>
<blockquote>
<p>an interface is a shared boundary across which two separate components of a computer system exchange information. </p>
</blockquote>
<p><a href="http://martinfowler.com/bliki/RoleInterface.html" target="_blank" rel="external">Role Interface</a> 的反面是 Header Interface（即一个 Interface，就是把 public methods 都写出 interface）。</p>
<p>使用 Role Interface，就是，你要了解 exchange 的具体的 information。而 Header Interface 认为 supplier 不需关心谁用你的 service，或怎么用。其实就是控制权的问题。Role 控制权在 consumer，Header 控制权在 supplier。长远来看，关注 consumer 是友好的。</p>
<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><p>前端开发（React.js）如何利用 interface？</p>
<p>按照刚才的解释，是要找到其中的 supplier 和 consumer，然后定义它们交换的信息。</p>
<p>这里的 supplier 就是编写的组件。consumer 就是高阶组件。它们之间需要交换的信息就是 props。</p>
<p>其实更担心的是，如果功能要增加，如何扩展？一种原则是，不要去扩展，而是重新复制一份。然后看情况是否需要提取公用的逻辑。不要把公用的边界提前设定。</p>
<p>目前的 props 看来更多的还是数据。可能会有部分展示相关的属性（初始值）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7406_u8BBA_u51C6_u5907"><a href="#u7406_u8BBA_u51C6_u5907" class="headerlink" title="理论准备"></a>理论准备</h2><p>ISP 即 Interface Segregat]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 年度回顾]]></title>
    <link href="http://shane.hsi.rocks/2016/02/01/2015-Annual-Retro/"/>
    <id>http://shane.hsi.rocks/2016/02/01/2015-Annual-Retro/</id>
    <published>2016-01-31T16:00:00.000Z</published>
    <updated>2016-02-20T12:55:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5DE5_u4F5C"><a href="#u5DE5_u4F5C" class="headerlink" title="工作"></a>工作</h2><p>2015年最大的收获就是 <strong>前端</strong> 技能的提升。事实上，从2015年2月开始，基本上就专注在此，至此有1年全职前端经验。</p>
<p>由于进入了 <strong>前端</strong> 这个领域，今年学习了很多东西，并且由于前端社区相对未到成熟阶段，也思考了很多东西。</p>
<p>先列个书单：</p>
<h2 id="u4E66_u5355"><a href="#u4E66_u5355" class="headerlink" title="书单"></a>书单</h2><h4 id="u6280_u672F/_u65B9_u6CD5_u8BBA"><a href="#u6280_u672F/_u65B9_u6CD5_u8BBA" class="headerlink" title="技术/方法论"></a>技术/方法论</h4><ul>
<li>《Spring 3.x企业应用开发实战》（始于14年，阅读70%）</li>
<li>《Java RESTful Web Service实战》</li>
<li>《JavaScript 语言精粹》（重读）</li>
<li>《Effective JavaScript》</li>
<li>《实现领域驱动设计》（重读）</li>
<li>《WebKit技术内幕》</li>
<li>《思考软件，创新设计：A段架构师的思考技术》（阅读50%）</li>
<li>《JavaScript函数式编程》（阅读60%）</li>
<li>《你不知道的JavaScript（上卷）》</li>
<li>《编写可测试的JavaScript代码》</li>
<li>《响应式Web设计：HTML5和CSS3实战》（阅读30%）</li>
<li>《图解CSS3 核心技术与案例实战》（阅读70%）</li>
<li>《Clojure Reactive Programming》（阅读40%）</li>
<li>《Reactive Programming with Rxjs》</li>
</ul>
<p>2015年看得最多的就是 JavaScript 相关的书籍。源于两点，一定对 JavaScript 语法的陌生迫使我必须熟悉基础，二是在使用了很多框架（React，Redux 等）之后(自上而下)，再结合基础(自下而上)，互补地学习。</p>
<p>关于前端学习还要重点推荐下 《WebKit技术内幕》，它打破了 HTML/CSS 于我的神秘性。HTML/CSS 都是 DSL，通过 WebKit 的底层技术实现，能更宏观地理解这两种声明式语言。有些玄乎，但是建议前端都来看下，由于可以不求甚解，甚至可以当做小说来读。</p>
<p>另外就是这本《Reactive Programming with RxJS》，是花了11美元购入的电子书，纪念一下。因为对 RxJS 太过痴迷，等不及国内上市。响应式是一块，函数式又是另一块。涉足前端最令人欣喜地一点就是，对语言的理论有了一定的研究。</p>
<h4 id="u8BBE_u8BA1"><a href="#u8BBE_u8BA1" class="headerlink" title="设计"></a>设计</h4><ul>
<li>《设计之下:搜狐新闻客户端的用户体验设计》</li>
<li>《西文字体2：经典款字体及其表现方法》（阅读30%）</li>
</ul>
<p>前端除了涉及到逻辑（JavaScript），但是它更原始的领域是结构（HTML），布局（CSS）。再往上一步，其实是设计，CSS 其实解决的是排版（多列布局，栅格布局）和定位（盒模型之间），这些其实是设计。第一本是导论类，至于字体，是因为字体相对结构简单又充满美感（今年恰好去过欧洲，能实地领略书中所讲字体的魅力）。</p>
<h2 id="u751F_u6D3B"><a href="#u751F_u6D3B" class="headerlink" title="生活"></a>生活</h2><h4 id="u7231_u60C5"><a href="#u7231_u60C5" class="headerlink" title="爱情"></a>爱情</h4><p>2015年最大的收获是遇到了人生的另一半。几句箴言：性格相合，未来可期。这里不会细表。不过的确有些变化，比如更切身地体会到了生活与工作的平衡。这是必修的一课。</p>
<h4 id="u65C5_u884C"><a href="#u65C5_u884C" class="headerlink" title="旅行"></a>旅行</h4><p>2015年末桂花酿成了酒，便和妹子去苏州品尝。作为去年最后一场旅行，我们在平江路的一间茶楼上，细数了下 2015 年去过的城市。</p>
<ul>
<li>2015年初的东北之行：哈尔滨，亚布力，呼兰区（哈尔滨市），长白山（延吉市），安图县（延吉市），沈阳。</li>
<li>3月份趁着早春的苏州之行</li>
<li>4月份武汉最舒服的日子去拜访妹子的老友</li>
<li>7月份的香港、深圳</li>
<li>国庆的法意土之旅：巴黎，威尼斯，佛罗伦萨，比萨，罗马，伊斯坦布尔。</li>
<li>以及12月岁末的苏州之行，喝了桂花酿，去了新开张的诚品书店。</li>
</ul>
<h4 id="u6587_u5B66_u7C7B_u4E66_u5355"><a href="#u6587_u5B66_u7C7B_u4E66_u5355" class="headerlink" title="文学类书单"></a>文学类书单</h4><ul>
<li>《括号里的日本人》</li>
<li>《单身社会》（阅读20%）</li>
<li>《听客溪的朝圣》（阅读50%）</li>
<li>《意大利之魅》</li>
<li>《伊斯坦布尔：一座城市的记忆》（阅读20%）</li>
<li>《托斯卡纳艳阳下（2014版）》（阅读80%）</li>
<li>《三体》三部曲</li>
<li>《梦的解析(彩色插图珍藏版)》（阅读30%）</li>
<li>《门外汉的京都》（阅读80%）</li>
</ul>
<p>很多书是为了国庆的法意土之行准备。三体是在往返欧洲的13小时航班上阅读完毕。</p>
<h2 id="u5EA7_u53F3_u94ED"><a href="#u5EA7_u53F3_u94ED" class="headerlink" title="座右铭"></a>座右铭</h2><p>近5年来我正经思考出过两套座右铭。</p>
<p>『旅行是为了见识更多的世界，认识更多的人！』</p>
<p>当时是实习一年，临近毕业即将正式入职。1 年半后，经过某几个转折点后，重新总结了一句：</p>
<p>『应为匠人！』</p>
<p>这本身体现了一种沉淀。</p>
<h2 id="u603B_u7ED3_u4E0B"><a href="#u603B_u7ED3_u4E0B" class="headerlink" title="总结下"></a>总结下</h2><p>总体来说，2015年是我成长较慢的过程。技术上，因为是转行，以积累为主，为量变，等待厚积而薄发。务虚。个人性格上，由于工作中缺少了镜子（或者叫做竞争者），也缺少了导师，有一些错误没有及时反思。而我本身非常喜欢和依赖自己的反思性格。所以，这也是后面需要加强的地方。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5DE5_u4F5C"><a href="#u5DE5_u4F5C" class="headerlink" title="工作"></a>工作</h2><p>2015年最大的收获就是 <strong>前端</strong> 技能的提升。事实上，从2015年2月开]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[要读书单]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Books-to-Read/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Books-to-Read/</id>
    <published>2016-01-29T09:28:38.000Z</published>
    <updated>2016-02-20T12:56:10.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://book.douban.com/subject/1491830/" target="_blank" rel="external">栅格系统与版式设计</a>，参考链接：<a href="https://zh.wikipedia.org/wiki/%E6%A0%85%E6%A0%BC%E8%AE%BE%E8%AE%A1" target="_blank" rel="external">栅格设计</a></p>
</li>
<li><p><a href="http://book.douban.com/subject/1276767/" target="_blank" rel="external">设计几何学</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p><a href="http://book.douban.com/subject/1491830/" target="_blank" rel="external">栅格系统与版式设计</a>，参考链接：<a href="https://zh.wikipedi]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web 开发的思考（不间断更新）]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Thoughts-on-Web-Development-To-Update/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Thoughts-on-Web-Development-To-Update/</id>
    <published>2016-01-29T09:02:05.000Z</published>
    <updated>2016-02-20T12:59:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4EC0_u4E48_u662F_UI"><a href="#u4EC0_u4E48_u662F_UI" class="headerlink" title="什么是 UI"></a>什么是 UI</h2><p>UI 层抽象成最终的 HTML（DOM 结构，树状层级结构）和样式（CSS）。这块可以再次回顾下《WebKit技术内幕》中的 render 部分，回顾的原因是拟合出适当的布局方式。</p>
<p>UI 上会绑定 Event。抽象成两种：</p>
<ul>
<li>Lifecycle Event</li>
<li>Input Event (keyboard, mouse, touch etc.)</li>
</ul>
<h2 id="u5982_u679C_u8981_u5B9E_u73B0_u53EF_u89C6_u5316_u7F16_u8F91_uFF1F"><a href="#u5982_u679C_u8981_u5B9E_u73B0_u53EF_u89C6_u5316_u7F16_u8F91_uFF1F" class="headerlink" title="如果要实现可视化编辑？"></a>如果要实现可视化编辑？</h2><p>组件是自管理的。所以，先假设组件是 atom。暴露出来 <code>component_id</code>。</p>
<p>如何组织（或者叫做布局）组件呢？</p>
<h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>参考下 <a href="https://www.lightningdesignsystem.com/design/layout" target="_blank" rel="external">lightningdesignsystem</a>。</p>
<p>记住这些名词：</p>
<ul>
<li>visual grids 栅格系统，常用的布局方式</li>
<li>spacing 间距（留白），在栅格系统中也有体现，gutter。</li>
<li>sections 分区块。是通过栅格系统作为标尺划分区块。</li>
</ul>
<blockquote>
<p>栅格设计系统（又称网格设计系统、标准尺寸系统、程序版面设计、瑞士平面设计风格、国际主义平面设计风格）。<br>瑞士平面设计风格：通过瑞士平面设计杂志的宣传<br>国际主义平面设计风格：由于这种风格简单明确，传达功能准确，因而很快得到世界范围内的普遍认可，成为战后影响最大的一种平面设计风格，也是国际最流行的风格。</p>
</blockquote>
<p>所以，对于 Layout，可以提供的是设计工具，最原始的是基于栅格系统，然后再在上面设计绘制区块。</p>
<p>当然，这么灵活，要做一些 template。</p>
<p>如何选择（或者设计）template？</p>
<ul>
<li><p>Know your use case. Understand how the information on the page will be used. 了解信息在页面上如何被使用</p>
</li>
<li><p>Prioritize your content. Organize your content to highlight the most important information. 突出最重要的信息。参考 <a href="http://www.uisdc.com/understanding-the-f-layout-in-web-design" target="_blank" rel="external">网页设计中的F式布局</a></p>
</li>
<li><p>Group related content together. Make it efficient for users to work with the content. 内容之间的合作，让用户更高效使用。</p>
</li>
</ul>
<p>我们看下 Lighting 提供的几种 template：</p>
<h5 id="Record_Layouts"><a href="#Record_Layouts" class="headerlink" title="Record Layouts"></a>Record Layouts</h5><p>Record layouts consist of a page header, a main content area and a sidebar. The content that should appear in each of these areas depends on the primary use case you are solving for.</p>
<p>记录布局：包含 </p>
<ul>
<li>page header - 显示区域很大（横跨 viewport），固定，scroll 时可以 collapse，增加垂直高度。</li>
<li>main content area - 2/3</li>
<li>sidebar - 最小宽度 400px。如果 reference layout 在 Master/Detail，collapse 成 main content area 的一个 tab。</li>
</ul>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/record_layout.png" alt="Record Layout" title="Record Layout">
<p>更多解释：<a href="https://developer.salesforce.com/trailhead/en/lightning_design_system/lightning-design-system6" target="_blank" rel="external">Laying out a Record Home Page and Using Advanced Components</a></p>
<h5 id="Workspace_Layouts"><a href="#Workspace_Layouts" class="headerlink" title="Workspace Layouts"></a>Workspace Layouts</h5><p>A workspace layout facilitates user collaboration on records. It highlights the activity and discussion that is happening around a record by placing this information prominently in the larger content area, while simultaneously displaying the related records in the sidebar. A summary of the record’s details are in a panel above the content area for easy reference.</p>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/workspace_layout.svg" alt="Workspace Layout" title="Workspace Layout">
<p>方便用户在 records 上的协作。</p>
<ul>
<li>page header 继续保持</li>
<li>main content area（上部，较小）当前 record 一些详细信息（元数据）</li>
<li>main content area（下部，较大）当前发生的 record（activity 或者 discussion）</li>
<li>sidebar 相关的 records</li>
</ul>
<h5 id="Reference_Layouts"><a href="#Reference_Layouts" class="headerlink" title="Reference Layouts"></a>Reference Layouts</h5><p>A reference layout is optimized for when users are primarily jumping to related records. It highlights the related records by displaying this information in the larger content area. Collaborative items are placed in the smaller sidebar. A summary of the record’s details are in a panel above the content area for easy reference.</p>
<h5 id="List_Layouts"><a href="#List_Layouts" class="headerlink" title="List Layouts"></a>List Layouts</h5><p>A list layout consists of a simple page header and body that allows users to switch between predefined lists of items. Common controls include sorting, filtering, charting, and actions for the item type. Users can also switch between list layouts using the “Display” menu.</p>
<p>Choose the types of list layout that best supports your use case:</p>
<ul>
<li>Table — Best for managing large sets of data and comparing values</li>
<li>Board — Use to monitor a workflow or milestones where users can drag cards between stages to indicate progress</li>
<li>Master-Detail — Allows users to see and edit the details of an item on one screen</li>
</ul>
<p>示例：</p>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/record_layout_sample.png" alt="Record Layout Sample" title="Record Layout Sample">
<p>再有几个示例：</p>
<p>board</p>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/board_sample.png" alt="Board Sample" title="Board Sample">
<h5 id="u518D_u8C08_Layout"><a href="#u518D_u8C08_Layout" class="headerlink" title="再谈 Layout"></a>再谈 Layout</h5><p>所以，最广度的 Layout 是固定几个 section：</p>
<p>比如：navbar，sidebar(left)，然后在某些 layout 里有 page header。</p>
<p>然后基本就是双栏布局。sidebar(right)，基本上就是 list。大概上如此。</p>
<p>必须做模板。从业务中提取。</p>
<p>但是，有些组件的类型，是特别适用于 Layout 的某些 section 的，有些是通用的，特别是常用的表单组件。</p>
<p>每种抽象出来的 Layout Template，需要发散下，是否可以有相应的 tablet，mobile 形态。猜测，由于 mobile 的 viewport 很小，很可能要做一些向上滑入的隐藏 section。而在 PC 中，对应的就是 steps，和 Modal 这些。</p>
<h5 id="Layout__u7684_u53EF_u89C6_u5316_u8BBE_u8BA1"><a href="#Layout__u7684_u53EF_u89C6_u5316_u8BBE_u8BA1" class="headerlink" title="Layout 的可视化设计"></a>Layout 的可视化设计</h5><p>假设做出来了这样一个 Layout Builder。</p>
<p>其实无法对 section 做更多的自定义的编辑（类似于 Xcode 的 Auto layout 这些）。因为我要做出三套。相信，这些 Layout 的布局加上，section 间的协作都是有最佳方式的。做些，Layout 的可视化设计，为选择预定义好的 template。Template 还可以对内容的布局做一些规则的限定。</p>
<p>其实，也就是把 Layout template 当做组件了。</p>
<ul>
<li>Page</li>
<li>Layout template</li>
<li>Section - navbar, left sidebar, page header, main content, right sidebar, 其中有些 section 是在 scroll area 中。对于，scroll，要寻找下浏览器原生实现。</li>
<li>Section template - 比如 navbar，left sidebar 就有基本固定的布局方式。当然，如果让 navbar 再细分，也有可能有多中 navbar template。</li>
<li>另外，每种 Section 是对应有多种 Components 可选，但不是所有。</li>
</ul>
<h4 id="u7EC4_u4EF6"><a href="#u7EC4_u4EF6" class="headerlink" title="组件"></a>组件</h4><p>Layout 虽然可以看成组件，但是又不完全是。</p>
<p>Layout 仅仅是布局。也就是组件的组织方式。它没有任何其他的展示特性。</p>
<p>组件要负责的就多了。</p>
<ul>
<li>组件要等撑满布局</li>
<li>组件要负责内部结构和展示</li>
<li>组件是有生命周期的</li>
<li>组件要有动态数据</li>
<li>组件负责获取（或者响应）动态数据</li>
<li>组件可以绑定事件</li>
</ul>
<p>注意，组件中特别的一种责任是和数据打交道。数据又分为两块：</p>
<ul>
<li>数据展示在哪里？</li>
<li>数据如何获取？</li>
</ul>
<p>展示在哪里？使用占位符，比如 <code>props.name</code> 这种。</p>
<p>如何获取？组件所需的所有占位符，最终是一种数据结构（比如 JSON 这种 tree）。所以，如何获取还没有到获取的细节，而是对外宣称，我要获取这样子的。至于细节部分，可以和组件分离。</p>
<p>分离的方式，就是让组件响应数据。</p>
<p>其实当然也有可能用数据完全映射到组件。主要是两类数据：</p>
<ul>
<li>应用数据</li>
<li>展示数据</li>
</ul>
<p>先从读开始理解：</p>
<p>应用数据用 atom store 很好理解（其实不是 atom store 啦，而是组件作为 pure function，不需要维护任何状态，不过，维护状态的好处是什么？说实话，撇开性能不谈，没有看到什么好处。）</p>
<p>展示数据呢？似乎是应该放在 component state 里。实际上，放在 component 里的原因无非是，它的 scope 可能仅仅限于 component。事实上呢？不一定。因为，放在 component 里，代表了没有 initial state 这种概念了，因为一刷新，没有及时 preserve 的 state （到 persistent layer，也即是 atom store） 都会丢失。当然可以在 state 里放着，然后在 will unmount 前，preserve 起来。</p>
<p>从写的角度理解：</p>
<p>应用数据如何会写呢？我目前能想到的就是响应事件。然后（从最终结果上看）修改两块地方：1. 持久化到 atom store（然后持久化到服务端）；2. 反馈显示到 component，也就是界面上。来看看数据流：</p>
<ol>
<li>mutation -&gt; atom store</li>
<li>mutation -&gt; component</li>
</ol>
<p>再回顾读里面的数据流：</p>
<ul>
<li>atom store -&gt; component</li>
</ul>
<p>所以，合并下三者，就成单向数据流了（响应式是 undirectional data flow 的形成条件）。</p>
<p>这样组件通信也解决了，因为 component 之间根本不会（也不需要）知道对方，只需要知道数据，数据和 component 又是分离的（component 只有数据的结构）。</p>
<p>回过头来在思考应用数据和展示数据，就可以弄出两个 data stream 了，然后 combine 起来。毕竟数据的责任是不同的。如果 UI 有优先级的需求（先响应展示还是先应用数据），逻辑上分离开是充分条件。</p>
<p>侧边证明了 Reactive 的数据结构还是很有利的。后面找个时间研究下其他异步方式。因为我感觉很多异步解决方案是用同步方法拟合。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Layout</span><br><span class="line"> <span class="string">|</span></span><br><span class="line">\<span class="string">|/</span></span><br><span class="line">Component</span><br></pre></td></tr></table></figure>
<p>之间的 interface 是，Layout 需要知道 component_id，次序（类似于 document flow 的次序），flow 的方式（layout 的 section 已经预定好了，所以就是简单的从小到大的顺序）。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Component</span><br><span class="line"> <span class="string">|</span></span><br><span class="line">\<span class="string">|/</span></span><br><span class="line">Data</span><br></pre></td></tr></table></figure>
<p>之间的 interface 是：数据结构，以及 mutation 会改变的数据结构这些。</p>
<h2 id="Virtaul_DOM"><a href="#Virtaul_DOM" class="headerlink" title="Virtaul DOM"></a>Virtaul DOM</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Virtual DOM</span><br><span class="line"> <span class="string">|</span></span><br><span class="line">\<span class="string">|/</span></span><br><span class="line">DOM</span><br></pre></td></tr></table></figure>
<p>也要找一个接口，目的就是渲染（和更新） DOM。至于细节，可以自由切换：</p>
<ul>
<li>Virtual DOM</li>
<li>Ember Glimmer</li>
<li>Incremental DOM</li>
</ul>
<h2 id="u6682_u505C_u7136_u540E_u6574_u7406_u4E0B"><a href="#u6682_u505C_u7136_u540E_u6574_u7406_u4E0B" class="headerlink" title="暂停然后整理下"></a>暂停然后整理下</h2><h4 id="u5173_u4E8E_u6807_u51C6"><a href="#u5173_u4E8E_u6807_u51C6" class="headerlink" title="关于标准"></a>关于标准</h4><p>司徒正美最近在写关于 HTML 标准的博客，<a href="http://www.cnblogs.com/rubylouvre/p/5121459.html" target="_blank" rel="external">表单元素 开篇</a>。非常赞同。HTML 标准，CSS 标准，这里的标准有两层含义：</p>
<ul>
<li>是浏览器内核级别的实现</li>
<li>实现了常用的对外接口（这里的接口包括在 screen 的绘制，和接收的外界 event，比如 touch，mouse，keyboard 等），特别是 event 处理很麻烦，细节太多。</li>
</ul>
<p>所以，标准一是性能好，二是功能全。而且是很高质量的实现，没必要对标准重新实现，而是利用标准提供的接口来扩展功能。</p>
<p>不要在封装上再做封装，但是也要找到停下来的地方。我认为这个地方就是标准。</p>
<h4 id="u627E_u5230_u9886_u57DF_u6A21_u578B_uFF0C_u5B9A_u4E49_u5B83_u4EEC_u7684_u8FB9_u754C"><a href="#u627E_u5230_u9886_u57DF_u6A21_u578B_uFF0C_u5B9A_u4E49_u5B83_u4EEC_u7684_u8FB9_u754C" class="headerlink" title="找到领域模型，定义它们的边界"></a>找到领域模型，定义它们的边界</h4><ul>
<li>结构</li>
<li>展示</li>
<li>（动画）</li>
<li>数据<ul>
<li>读数据</li>
<li>写数据</li>
</ul>
</li>
</ul>
<p>数据是完全可以后面再考虑。</p>
<p>先考虑结构，展示。甚至假设啊，没有 css。也要能合理地显示。</p>
<h4 id="CSS__u7684_u91CD_u7528"><a href="#CSS__u7684_u91CD_u7528" class="headerlink" title="CSS 的重用"></a>CSS 的重用</h4><h5 id="u4EC0_u4E48_u662F_u4E3B_u9898_uFF1F"><a href="#u4EC0_u4E48_u662F_u4E3B_u9898_uFF1F" class="headerlink" title="什么是主题？"></a>什么是主题？</h5><p>主题：</p>
<ul>
<li>最简单是色系的变化</li>
<li>可能有一些圆角，直角</li>
<li>字体</li>
</ul>
<p>再复杂一点，我觉得就没有重用的必要了。不如从结构+样式单独写一套。（看似没有重用，但是数据层肯定重用了。结构+展示很薄，代码量不大。）</p>
<h5 id="u5982_u4F55_u5199_u6837_u5F0F_uFF1F"><a href="#u5982_u4F55_u5199_u6837_u5F0F_uFF1F" class="headerlink" title="如何写样式？"></a>如何写样式？</h5><p>布局是确定的。要么用 lost，只要改下 值 就可以生成两套，一套基于浮动，一套基于 flexbox。不过，使用这种 DSL 最大的问题就是，是否对标准破坏太多，或者封装太多。</p>
<p>现在可以直接使用 flexbox。</p>
<p>然后布局里面就用没有样式的元素。</p>
<p>然后，如果要加样式，认真思考。慢慢总结规律。现在还没有总结出规律。</p>
<p>结构和样式的接口就是 className。总结规律，让暴露的 DOM 结构越少越好。</p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>jQuery 这种好东西（封装恶心细节的东西），一定要用的。即使接口不好，可以封装啊。</p>
<p>React 有两块，一块是接口设计很好。至于实现什么的，可以用多种。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4EC0_u4E48_u662F_UI"><a href="#u4EC0_u4E48_u662F_UI" class="headerlink" title="什么是 UI"></a>什么是 UI</h2><p>UI 层抽象成最终的 HTML（DOM 结构，树状层]]>
    </summary>
    
  </entry>
  
</feed>
