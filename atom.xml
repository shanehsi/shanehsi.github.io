<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-03-27T13:17:36.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[一直念着想着 CSS]]></title>
    <link href="http://shane.hsi.rocks/2016/03/27/Always-Thinking-about-CSS/"/>
    <id>http://shane.hsi.rocks/2016/03/27/Always-Thinking-about-CSS/</id>
    <published>2016-03-27T11:33:46.000Z</published>
    <updated>2016-03-27T13:17:36.000Z</updated>
    <content type="html"><![CDATA[<p>并不是不喜欢 CSS。而是找不到 CSS 的学习好方法。这东西就和学数学一样（原谅我用数学比较，因为我一直后悔没有多练习数学题），要大量的实践，总结规律，然后新的场景用总结的规律尝试去套，不能套的要去拓展和完善规律。</p>
<blockquote>
<p>哪一天我也能学好数学？O(∩_∩)O</p>
</blockquote>
<p>反正我不喜欢熟记一堆堆的理论然后找最佳实践，事实证明这样做真的好难好难。/(ㄒoㄒ)/~~</p>
<p>目前终于有了一个好的机会，在好的时间：</p>
<ul>
<li>做一个不是很复杂的 web app。</li>
<li>我脑海里已经有了一堆一堆的理论，什么 position relative/absolute，display inline-block/block。盒模型内部的目前觉得还好。</li>
</ul>
<h2 id="2016_u5E7403_u670827_u65E519_3A50_3A38"><a href="#2016_u5E7403_u670827_u65E519_3A50_3A38" class="headerlink" title="2016年03月27日19:50:38"></a>2016年03月27日19:50:38</h2><h3 id="u60F3_u5230_u7684"><a href="#u60F3_u5230_u7684" class="headerlink" title="想到的"></a>想到的</h3><p>现在第一个要解决的是大的布局问题。这个用 position 可以很好的解决。</p>
<p>absolute 做大的布局的摆布。</p>
<p>relative 其实是做定位的时候，借用下其他元素的容量。这个看起来好难好难。但用的时候真的必须要。比如下面说到的同一行布局。</p>
<p>但是其实 relative 更多的是做些一些位移。要深刻理解 relative，应该比较下 relative/static。</p>
<p>参考：<a href="http://stackoverflow.com/questions/5011211/difference-between-static-and-relative-positioning" target="_blank" rel="external">Difference between static and relative positioning</a>。</p>
<p><strong>Statically positioned elements don’t obey <code>left</code>, <code>top</code>, <code>right</code> and <code>bottom</code> rules:</strong>。就酱，static 不会相对于自己的 normal position 位移。</p>
<p>如果有这样的需求就是 relative。</p>
<p>然而 absolute 都不用考虑 sibling，只要考虑 parent（为了方便定位，找一个好的 parent，^_^）。</p>
<p>同行摆布使用 <code>inline-block</code>，加上 <code>vertial-align: top</code>。参考：<a href="http://stackoverflow.com/questions/9273016/why-is-this-inline-block-element-pushed-downward" target="_blank" rel="external">Why is this inline-block element pushed downward?</a></p>
<p><code>inline-block</code> 是来替换 float（部分场景下，即放在同一行，但是如果真有一部分按左对齐，一部分按右对齐，还是得要 float），以及模拟 <code>table-cell</code> 这个（或者也可能是 ul li，突然发现，语义化元素的自带样式会和 css 有部分功能的重叠）。</p>
<p>参考：<a href="http://www.zhangxinxu.com/wordpress/2010/11/%E6%8B%9C%E6%8B%9C%E4%BA%86%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80-%E5%9F%BA%E4%BA%8Edisplayinline-block%E7%9A%84%E5%88%97%E8%A1%A8%E5%B8%83%E5%B1%80/" target="_blank" rel="external">拜拜了,浮动布局-基于display:inline-block的列表布局</a>。这里重点说下 <code>line-height</code> 方法。</p>
<p>我还要解决一个问题，<strong>垂直居中问题</strong>。</p>
<p>一般是设置，<code>height</code> 和 <code>line-height</code>（这个是 wrapper） 相同，而且 <code>line-height</code> 要大于 <code>font-size</code>（一般也是这样）。<strong>而且只适用于单行文字</strong>。</p>
<blockquote>
<p>By default equal space will be given above and below the text and so the text will sit in the vertical center.</p>
</blockquote>
<p>其他几种方法是：</p>
<p><code>Vertical-Align</code> 是最简单的方法。但是它只适用于 <code>table-cell</code> 和一些 <code>inline</code>（估计 <code>inline-block</code> 不行）。也就是不适用于 block 元素。</p>
<p>网上关于垂直居中的文章特别多：比如这篇 <a href="http://vanseodesign.com/css/vertical-centering/" target="_blank" rel="external">6 Methods For Vertical Centering With CSS</a></p>
<p>我觉得其他的方法就研究 [lost] 吧（复杂的场景）。</p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>关键还是要总结下原语。CSS 和 HTML 分开还是就使用 HTML（JSX）的名字做布局？分开的话，都是用 HTML 的话，就是有两类 Component。一类 layout。关键是这样写 Layout 可不可以重用。能重用的话，就完美了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>并不是不喜欢 CSS。而是找不到 CSS 的学习好方法。这东西就和学数学一样（原谅我用数学比较，因为我一直后悔没有多练习数学题），要大量的实践，总结规律，然后新的场景用总结的规律尝试去套，不能套的要去拓展和完善规律。</p>
<blockquote>
<p>哪一天我也能学好]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why is this inline-block element pushed downward?]]></title>
    <link href="http://shane.hsi.rocks/2016/03/27/Why-is-this-inline-block-element-pushed-downward/"/>
    <id>http://shane.hsi.rocks/2016/03/27/Why-is-this-inline-block-element-pushed-downward/</id>
    <published>2016-03-27T11:21:34.000Z</published>
    <updated>2016-03-27T13:28:05.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/9273016/why-is-this-inline-block-element-pushed-downward" target="_blank" rel="external">Why is this inline-block element pushed downward?</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"firstDiv"</span>&gt;</span>FIRST<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"secondDiv"</span>&gt;</span>SECOND<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"thirdDiv"</span>&gt;</span>THIRD</span><br><span class="line">        <span class="tag">&lt;<span class="title">br</span>&gt;</span>some more content</span><br><span class="line">        <span class="tag">&lt;<span class="title">br</span>&gt;</span> some more content</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">350px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0px</span> auto</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#container</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">15px</span> solid orange</span></span>;   </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#firstDiv</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid brown</span></span>;     </span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">70px</span></span></span>;      </span><br><span class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value">hidden</span></span>;  </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#secondDiv</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid skyblue</span></span>;         </span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value">left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">70px</span></span></span>;     </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#thirdDiv</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">5px</span> solid yellowgreen</span></span>;    </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>回到：</p>
<p>Basically you have added more clutter in your code which is creating more confusion so first I try to remove clutter which hinders understanding the real issue.</p>
<p>First of all we have to establish that what’s the real question? Its that why “inline-block” element is pushed downward.</p>
<p>首先看下，</p>
<p>Now we start to understand it and remove the clutter first.</p>
<p>Here comes the turn of some <a href="http://www.w3.org/TR/CSS2/visudet.html#leading" target="_blank" rel="external">literature</a> to grasp the idea of line boxes and how they are lined in the same line esp read last paragraph carefully because there lies the answer of your question.</p>
<blockquote>
<p>The baseline of an ‘inline-block’ is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its ‘overflow’ property has a computed value other than ‘visible’, in which case the baseline is the bottom margin edge.</p>
</blockquote>
<p>If you are not sure about <a href="http://www.w3.org/TR/CSS2/visudet.html#leading" target="_blank" rel="external">baseline</a> then here is brief explanation in simple words.</p>
<p>inline-block 的 baseline 是最后一个 line box 的 normal flow。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://stackoverflow.com/questions/9273016/why-is-this-inline-block-element-pushed-downward" target="_blank" rel="external">Why ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习 react-redux 的 connect API]]></title>
    <link href="http://shane.hsi.rocks/2016/03/27/Learn-connect-API-of-react-redux/"/>
    <id>http://shane.hsi.rocks/2016/03/27/Learn-connect-API-of-react-redux/</id>
    <published>2016-03-27T06:52:52.000Z</published>
    <updated>2016-03-27T07:08:29.000Z</updated>
    <content type="html"><![CDATA[<p>这个 API 是设计的相当复杂啊。</p>
<p>从文档先了解下它实现的功能。</p>
<h3 id="connect_28_5BmapStateToProps_5D_2C__5BmapDispatchToProps_5D_2C__5BmergeProps_5D_2C__5Boptions_5D_29"><a href="#connect_28_5BmapStateToProps_5D_2C__5BmapDispatchToProps_5D_2C__5BmergeProps_5D_2C__5Boptions_5D_29" class="headerlink" title="connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])"></a><code>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</code></h3><p>Connects a React component to a Redux store.</p>
<p>将一个 React component 和一个 Redux store 连接起来。</p>
<p>It does not modify the component class passed to it.<br>Instead, it <em>returns</em> a new, connected component class, for you to use.</p>
<p>不会修改传入的 component，而是返回一个新的（curry）。</p>
<h4 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h4><ul>
<li>[<code>mapStateToProps(state, [ownProps]): stateProps</code>] (<em>Function</em>): If specified, the component will subscribe to Redux store updates. Any time it updates, <code>mapStateToProps</code> will be called. Its result must be a plain object*, and it will be merged into the component’s props. If you omit it, the component will not be subscribed to the Redux store. If <code>ownProps</code> is specified as a second argument, its value will be the props passed to your component, and <code>mapStateToProps</code> will be re-invoked whenever the component receives new props.</li>
</ul>
<ul>
<li>如果指定了，component 会订阅 Redux store 的 updates。每次它 update，<code>mapStateToProps</code> 就会被调用。</li>
<li>结果必须是 plain objects。</li>
<li>会被合并到 component 的 props。</li>
<li>如果省略了，不会订阅 store。</li>
<li><p>如果 ownProps，会传给 component，并且 <code>mapStateToProps</code> 会在每次 component 获取新的 props 被调用。</p>
<blockquote>
<p>Note: in advanced scenarios where you need more control over the rendering performance, <code>mapStateToProps()</code> can also return a function. In this case, <em>that</em> function will be used as <code>mapStateToProps()</code> for a particular component instance. This allows you to do per-instance memoization. You can refer to <a href="https://github.com/reactjs/react-redux/pull/279" target="_blank" rel="external">#279</a> and the tests it adds for more details. Most apps never need this.</p>
</blockquote>
</li>
</ul>
<ul>
<li>[<code>mapDispatchToProps(dispatch, [ownProps]): dispatchProps</code>] (<em>Object</em> or <em>Function</em>): If an object is passed, each function inside it will be assumed to be a Redux action creator. An object with the same function names, but with every action creator wrapped into a <code>dispatch</code> call so they may be invoked directly, will be merged into the component’s props. If a function is passed, it will be given <code>dispatch</code>. It’s up to you to return an object that somehow uses <code>dispatch</code> to bind action creators in your own way. (Tip: you may use the <a href="http://reactjs.github.io/redux/docs/api/bindActionCreators.html" target="_blank" rel="external"><code>bindActionCreators()</code></a> helper from Redux.) If you omit it, the default implementation just injects <code>dispatch</code> into your component’s props. If <code>ownProps</code> is specified as a second argument, its value will be the props passed to your component, and <code>mapDispatchToProps</code> will be re-invoked whenever the component receives new props.</li>
</ul>
<ul>
<li>如果传入的是 object，object 的每个 function 被认为是 actionCreator。一个新的 object， key 相同，但是会被包到 dispatch 里，会被 merge 到 props 里。</li>
<li>如果没有传入参数，则 dispatch 会被作为 props 传入。</li>
<li><p>如果 ownProps，会传给 component，并且 <code>mapDispatchToProps</code> 会在每次 component 获取新的 props 被调用。</p>
<blockquote>
<p>Note: in advanced scenarios where you need more control over the rendering performance, <code>mapDispatchToProps()</code> can also return a function. In this case, <em>that</em> function will be used as <code>mapDispatchToProps()</code> for a particular component instance. This allows you to do per-instance memoization. You can refer to <a href="https://github.com/reactjs/react-redux/pull/279" target="_blank" rel="external">#279</a> and the tests it adds for more details. Most apps never need this.</p>
</blockquote>
</li>
</ul>
<ul>
<li>[<code>mergeProps(stateProps, dispatchProps, ownProps): props</code>] (<em>Function</em>): If specified, it is passed the result of <code>mapStateToProps()</code>, <code>mapDispatchToProps()</code>, and the parent <code>props</code>. The plain object you return from it will be passed as props to the wrapped component. You may specify this function to select a slice of the state based on props, or to bind action creators to a particular variable from props. If you omit it, <code>Object.assign({}, ownProps, stateProps, dispatchProps)</code> is used by default.</li>
</ul>
<ul>
<li>默认是 <code>Object.assign({}, ownProps, stateProps, dispatchProps)</code></li>
</ul>
<ul>
<li>[<code>options</code>] <em>(Object)</em> If specified, further customizes the behavior of the connector.<ul>
<li>[<code>pure = true</code>] <em>(Boolean)</em>: If true, implements <code>shouldComponentUpdate</code> and shallowly compares the result of <code>mergeProps</code>, preventing unnecessary updates, assuming that the component is a “pure” component and does not rely on any input or state other than its props and the selected Redux store’s state. <em>Defaults to <code>true</code>.</em></li>
<li>[<code>withRef = false</code>] <em>(Boolean)</em>: If true, stores a ref to the wrapped component instance and makes it available via <code>getWrappedInstance()</code> method. <em>Defaults to <code>false</code>.</em></li>
</ul>
</li>
</ul>
<h4 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h4><p>A React component class that injects state and action creators into your component according to the specified options.</p>
<h5 id="Static_Properties"><a href="#Static_Properties" class="headerlink" title="Static Properties"></a>Static Properties</h5><ul>
<li><code>WrappedComponent</code> <em>(Component)</em>: The original component class passed to <code>connect()</code>.</li>
</ul>
<h5 id="Static_Methods"><a href="#Static_Methods" class="headerlink" title="Static Methods"></a>Static Methods</h5><p>All the original static methods of the component are hoisted.</p>
<h5 id="Instance_Methods"><a href="#Instance_Methods" class="headerlink" title="Instance Methods"></a>Instance Methods</h5><h6 id="getWrappedInstance_28_29_3A_ReactComponent"><a href="#getWrappedInstance_28_29_3A_ReactComponent" class="headerlink" title="getWrappedInstance(): ReactComponent"></a><code>getWrappedInstance(): ReactComponent</code></h6><p>Returns the wrapped component instance. Only available if you pass <code>{ withRef: true }</code> as part of the <code>connect()</code>’s fourth <code>options</code> argument.</p>
<h4 id="Remarks"><a href="#Remarks" class="headerlink" title="Remarks"></a>Remarks</h4><ul>
<li><p>It needs to be invoked two times. The first time with its arguments described above, and a second time, with the component: <code>connect(mapStateToProps, mapDispatchToProps, mergeProps)(MyComponent)</code>.</p>
</li>
<li><p>It does not modify the passed React component. It returns a new, connected component, that you should use instead.</p>
</li>
<li><p>The <code>mapStateToProps</code> function takes a single argument of the entire Redux store’s state and returns an object to be passed as props. It is often called a <strong>selector</strong>. Use <a href="https://github.com/reactjs/reselect" target="_blank" rel="external">reselect</a> to efficiently compose selectors and <a href="http://redux.js.org/docs/recipes/ComputingDerivedData.html" target="_blank" rel="external">compute derived data</a>.</p>
</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><h5 id="Inject_just_dispatch_and_don_u2019t_listen_to_store"><a href="#Inject_just_dispatch_and_don_u2019t_listen_to_store" class="headerlink" title="Inject just dispatch and don’t listen to store"></a>Inject just <code>dispatch</code> and don’t listen to store</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect()(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_dispatch_and_every_field_in_the_global_state"><a href="#Inject_dispatch_and_every_field_in_the_global_state" class="headerlink" title="Inject dispatch and every field in the global state"></a>Inject <code>dispatch</code> and every field in the global state</h5><blockquote>
<p>Don’t do this! It kills any performance optimizations because <code>TodoApp</code> will rerender after every action.<br>It’s better to have more granular <code>connect()</code> on several components in your view hierarchy that each only<br>listen to a relevant slice of the state.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(state =&gt; state)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_dispatch_and_todos"><a href="#Inject_dispatch_and_todos" class="headerlink" title="Inject dispatch and todos"></a>Inject <code>dispatch</code> and <code>todos</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29"><a href="#Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29" class="headerlink" title="Inject todos and all action creators (addTodo, completeTodo, …)"></a>Inject <code>todos</code> and all action creators (<code>addTodo</code>, <code>completeTodo</code>, …)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, actionCreators)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29_as_actions"><a href="#Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29_as_actions" class="headerlink" title="Inject todos and all action creators (addTodo, completeTodo, …) as actions"></a>Inject <code>todos</code> and all action creators (<code>addTodo</code>, <code>completeTodo</code>, …) as <code>actions</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return &#123; actions: bindActionCreators(actionCreators, dispatch) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_and_a_specific_action_creator__28addTodo_29"><a href="#Inject_todos_and_a_specific_action_creator__28addTodo_29" class="headerlink" title="Inject todos and a specific action creator (addTodo)"></a>Inject <code>todos</code> and a specific action creator (<code>addTodo</code>)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addTodo &#125; <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return bindActionCreators(&#123; addTodo &#125;, dispatch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_2C_todoActionCreators_as_todoActions_2C_and_counterActionCreators_as_counterActions"><a href="#Inject_todos_2C_todoActionCreators_as_todoActions_2C_and_counterActionCreators_as_counterActions" class="headerlink" title="Inject todos, todoActionCreators as todoActions, and counterActionCreators as counterActions"></a>Inject <code>todos</code>, todoActionCreators as <code>todoActions</code>, and counterActionCreators as <code>counterActions</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> todoActionCreators <span class="keyword">from</span> <span class="string">'./todoActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> counterActionCreators <span class="keyword">from</span> <span class="string">'./counterActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    todoActions: bindActionCreators(todoActionCreators, dispatch),</span><br><span class="line">    counterActions: bindActionCreators(counterActionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_2C_and_todoActionCreators_and_counterActionCreators_together_as_actions"><a href="#Inject_todos_2C_and_todoActionCreators_and_counterActionCreators_together_as_actions" class="headerlink" title="Inject todos, and todoActionCreators and counterActionCreators together as actions"></a>Inject <code>todos</code>, and todoActionCreators and counterActionCreators together as <code>actions</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> todoActionCreators <span class="keyword">from</span> <span class="string">'./todoActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> counterActionCreators <span class="keyword">from</span> <span class="string">'./counterActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    actions: bindActionCreators(Object.assign(&#123;&#125;, todoActionCreators, counterActionCreators), dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_2C_and_all_todoActionCreators_and_counterActionCreators_directly_as_props"><a href="#Inject_todos_2C_and_all_todoActionCreators_and_counterActionCreators_directly_as_props" class="headerlink" title="Inject todos, and all todoActionCreators and counterActionCreators directly as props"></a>Inject <code>todos</code>, and all todoActionCreators and counterActionCreators directly as props</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> todoActionCreators <span class="keyword">from</span> <span class="string">'./todoActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> counterActionCreators <span class="keyword">from</span> <span class="string">'./counterActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return bindActionCreators(Object.assign(&#123;&#125;, todoActionCreators, counterActionCreators), dispatch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_of_a_specific_user_depending_on_props"><a href="#Inject_todos_of_a_specific_user_depending_on_props" class="headerlink" title="Inject todos of a specific user depending on props"></a>Inject <code>todos</code> of a specific user depending on props</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state, ownProps) &#123;</span><br><span class="line">  return &#123; todos: state.todos[ownProps.userId] &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_of_a_specific_user_depending_on_props_2C_and_inject_props-userId_into_the_action"><a href="#Inject_todos_of_a_specific_user_depending_on_props_2C_and_inject_props-userId_into_the_action" class="headerlink" title="Inject todos of a specific user depending on props, and inject props.userId into the action"></a>Inject <code>todos</code> of a specific user depending on props, and inject <code>props.userId</code> into the action</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mergeProps(stateProps, dispatchProps, ownProps) &#123;</span><br><span class="line">  return Object.assign(&#123;&#125;, ownProps, &#123;</span><br><span class="line">    todos: stateProps.todos[ownProps.userId],</span><br><span class="line">    addTodo: (text) =&gt; dispatchProps.addTodo(ownProps.userId, text)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, actionCreators, mergeProps)(TodoApp)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>这个 API 是设计的相当复杂啊。</p>
<p>从文档先了解下它实现的功能。</p>
<h3 id="connect_28_5BmapStateToProps_5D_2C__5BmapDispatchToProps_5D_2C__5BmergeProps_5D_2C__5]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[和大神聊同步，异步，并行，并发]]></title>
    <link href="http://shane.hsi.rocks/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/"/>
    <id>http://shane.hsi.rocks/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/</id>
    <published>2016-03-25T10:05:33.000Z</published>
    <updated>2016-03-26T00:53:16.000Z</updated>
    <content type="html"><![CDATA[<p>聊天记录截图，当时觉得理解清楚了。今天发现又有点遗忘了。截图记录。</p>
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/1.PNG" alt="1.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/2.PNG" alt="2.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/3.PNG" alt="3.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/4.PNG" alt="4.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/5.PNG" alt="5.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/6.PNG" alt="6.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/7.PNG" alt="7.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/8.PNG" alt="8.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/9.PNG" alt="9.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/10.PNG" alt="10.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/11.PNG" alt="11.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/12.PNG" alt="12.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/13.PNG" alt="13.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/14.PNG" alt="14.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/15.PNG" alt="15.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/16.PNG" alt="16.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/17.PNG" alt="17.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/18.PNG" alt="18.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/19.PNG" alt="19.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/20.PNG" alt="20.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/21.PNG" alt="21.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/22.PNG" alt="22.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/23.PNG" alt="23.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/24.PNG" alt="24.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/25.PNG" alt="25.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/26.PNG" alt="26.PNG" title="">
]]></content>
    <summary type="html">
    <![CDATA[<p>聊天记录截图，当时觉得理解清楚了。今天发现又有点遗忘了。截图记录。</p>
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/1.PNG" a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试工具篇： AVA 和 Sinon.JS]]></title>
    <link href="http://shane.hsi.rocks/2016/03/25/Test-Tools-AVA-with-Sinon-JS/"/>
    <id>http://shane.hsi.rocks/2016/03/25/Test-Tools-AVA-with-Sinon-JS/</id>
    <published>2016-03-25T09:50:33.000Z</published>
    <updated>2016-03-27T04:50:29.000Z</updated>
    <content type="html"><![CDATA[<p>链接：<a href="https://github.com/sindresorhus/ava/issues/560" target="_blank" rel="external">afterEach and beforeEach not running? #560</a></p>
<p>虽然这篇文章是讲这个的（在 <a href="https://github.com/sindresorhus/ava" target="_blank" rel="external">sindresorhus/ava</a> 的 README 里）:</p>
<p>Keep in mind that the <code>beforeEach</code> and <code>afterEach</code> hooks run just before and after a test is run, and that by default tests run concurrently. If you need to set up global state for each test (like spying on <code>console.log</code> <a href="https://github.com/sindresorhus/ava/issues/560" target="_blank" rel="external">for example</a>), you’ll need to make sure the tests are <a href="https://github.com/sindresorhus/ava#running-tests-serially" target="_blank" rel="external">run serially</a>.</p>
<p>如果要设置一些 global state，比如 spying <code>console.log</code>，则需要保证 tests 是串行运行的。</p>
<p>或者使用 <code>context</code> object 来保存原先的 log。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span>;</span><br><span class="line"><span class="keyword">import</span> sinon <span class="keyword">from</span> <span class="string">'sinon'</span>;</span><br><span class="line"></span><br><span class="line">test.beforeEach(t =&gt; &#123;</span><br><span class="line">    t.context.log = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log = sinon.spy();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test.afterEach(t =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log = t.context.log;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'first'</span>, t =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'first'</span>);</span><br><span class="line">    t.true(<span class="built_in">console</span>.log.calledOnce);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'second'</span>, t =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'second'</span>);</span><br><span class="line">    t.true(<span class="built_in">console</span>.log.calledOnce);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>链接：<a href="https://github.com/sindresorhus/ava/issues/560" target="_blank" rel="external">afterEach and beforeEach not running? #560</a>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一次尝试设计一个 Web App]]></title>
    <link href="http://shane.hsi.rocks/2016/03/25/My-First-Try-to-Design-a-Web-App/"/>
    <id>http://shane.hsi.rocks/2016/03/25/My-First-Try-to-Design-a-Web-App/</id>
    <published>2016-03-25T09:16:41.000Z</published>
    <updated>2016-03-25T09:21:59.000Z</updated>
    <content type="html"><![CDATA[<p>不是视觉设计，主要是工作方法论。这里留个标记，便于后期回顾。</p>
<p>这是 todo list。</p>
<img src="/2016/03/25/My-First-Try-to-Design-a-Web-App/of.png" alt="of.png" title="">
<p>这是我思考的过程之一。</p>
<img src="/2016/03/25/My-First-Try-to-Design-a-Web-App/section.png" alt="section.png" title="">
]]></content>
    <summary type="html">
    <![CDATA[<p>不是视觉设计，主要是工作方法论。这里留个标记，便于后期回顾。</p>
<p>这是 todo list。</p>
<img src="/2016/03/25/My-First-Try-to-Design-a-Web-App/of.png" alt="of.png" title]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Webpack Less Loader]]></title>
    <link href="http://shane.hsi.rocks/2016/03/24/Webpack-Less-Loader/"/>
    <id>http://shane.hsi.rocks/2016/03/24/Webpack-Less-Loader/</id>
    <published>2016-03-24T07:14:15.000Z</published>
    <updated>2016-03-24T07:17:30.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/webpack/less-loader" target="_blank" rel="external">webpack/less-loader</a></p>
<p>这里面的小细节还蛮多的。</p>
<p>开发时：</p>
<p>主要注意下 style loader 的作用。在 production 是不需要的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        loader: <span class="string">"style!css!less"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>关键 less 还有 options，具体参考 <a href="http://lesscss.org/usage/#command-line-usage-options" target="_blank" rel="external">LESS documentation</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        loader: <span class="string">"style!css!less?strictMath&amp;noIeCompat"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>生产环境：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// must be 'source-map' or 'inline-source-map'</span></span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                loader: ExtractTextPlugin.extract(</span><br><span class="line">                    <span class="comment">// activate source maps via loader query</span></span><br><span class="line">                    <span class="string">'css?sourceMap!'</span> +</span><br><span class="line">                    <span class="string">'less?sourceMap'</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// extract inline css into separate 'styles.css'</span></span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'styles.css'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/webpack/less-loader" target="_blank" rel="external">webpack/less-loader</a></p>
<p>这里面的小细节还蛮多的。</p>
<p>开发时：</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习 Ava 和 Enzyme]]></title>
    <link href="http://shane.hsi.rocks/2016/03/23/Learn-Ava-and-Enzyme/"/>
    <id>http://shane.hsi.rocks/2016/03/23/Learn-Ava-and-Enzyme/</id>
    <published>2016-03-23T03:06:23.000Z</published>
    <updated>2016-03-27T05:29:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934"><a href="#u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934" class="headerlink" title="最后的总结放前头"></a>最后的总结放前头</h1><h2 id="AVA"><a href="#AVA" class="headerlink" title="AVA"></a>AVA</h2><p>AVA 本身是 test runner，暂时还没有测试到 promise，asnyc/await，observable，所以这块后续学习。</p>
<p>主要是学习 API。包括 assertion 和 其他。</p>
<h3 id="t-pass_28_5Bmessage_5D_29/t-fail"><a href="#t-pass_28_5Bmessage_5D_29/t-fail" class="headerlink" title="t.pass([message])/t.fail"></a><code>t.pass([message])/t.fail</code></h3><p>手动设置 pass 还是 fail，可选 message。</p>
<h3 id="t-ok_28value_2C__5Bmessage_5D_29/t-notOk"><a href="#t-ok_28value_2C__5Bmessage_5D_29/t-notOk" class="headerlink" title="t.ok(value, [message])/t.notOk"></a><code>t.ok(value, [message])/t.notOk</code></h3><p>值是 truthy 的。</p>
<h3 id="t-true_28value_2C__5Bmessage_5D_29/t-false"><a href="#t-true_28value_2C__5Bmessage_5D_29/t-false" class="headerlink" title="t.true(value, [message])/t.false"></a><code>t.true(value, [message])/t.false</code></h3><p>值是 <code>true</code> 的。</p>
<h3 id="t-is_28value_2C_expected_2C__5Bmessage_5D_29/t-not"><a href="#t-is_28value_2C_expected_2C__5Bmessage_5D_29/t-not" class="headerlink" title="t.is(value, expected, [message])/t.not"></a><code>t.is(value, expected, [message])/t.not</code></h3><p>判断 equal。</p>
<h3 id="t-same_28value_2C_expected_2C__5Bmessage_5D_29/t-notSame"><a href="#t-same_28value_2C_expected_2C__5Bmessage_5D_29/t-notSame" class="headerlink" title="t.same(value, expected, [message])/t.notSame"></a><code>t.same(value, expected, [message])/t.notSame</code></h3><p>判断 deep equal。</p>
<h3 id="t-throws_28function_7Cpromise_2C__5Berror_2C__5Bmessage_5D_5D_29/t-notThrows"><a href="#t-throws_28function_7Cpromise_2C__5Berror_2C__5Bmessage_5D_5D_29/t-notThrows" class="headerlink" title="t.throws(function|promise, [error, [message]])/t.notThrows"></a><code>t.throws(function|promise, [error, [message]])/t.notThrows</code></h3><p>function 抛出 error，promise reject 一个 error。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ava"</span>: &#123;</span><br><span class="line">    <span class="string">"babel"</span>: <span class="string">"inherit"</span>,</span><br><span class="line">    <span class="string">"failFast"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"require"</span>: [</span><br><span class="line">      <span class="string">"babel-register"</span>,</span><br><span class="line">      <span class="string">"./test/helpers/setup-browser-env.js"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>t.plan(1)</code> 保证 assertion 执行的次数不多不少。</li>
<li><code>t.only</code></li>
<li><code>t.skip</code></li>
<li><code>test.todo(&#39;will think about writing this later&#39;)</code></li>
</ul>
<h1 id="AVA-1"><a href="#AVA-1" class="headerlink" title="AVA"></a>AVA</h1><p><a href="https://github.com/sindresorhus/ava" target="_blank" rel="external">github</a>。</p>
<p>ava 配置很简单</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"awesome-package"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"ava"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"ava"</span>: <span class="string">"^0.11.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'foo'</span>, t =&gt; &#123;</span><br><span class="line">    t.pass();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'bar'</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> bar = <span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>);</span><br><span class="line"></span><br><span class="line">    t.is(<span class="keyword">await</span> bar, <span class="string">'bar'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>跑测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br><span class="line">npm <span class="built_in">test</span> -- --watch</span><br></pre></td></tr></table></figure>
<p>更多的配置在 pakcage.json 中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ava"</span>: &#123;</span><br><span class="line">    <span class="string">"files"</span>: [</span><br><span class="line">      <span class="string">"my-test-folder/*.js"</span>,</span><br><span class="line">      <span class="string">"!**/not-this-file.js"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"source"</span>: [</span><br><span class="line">      <span class="string">"**/*.&#123;js,jsx&#125;"</span>,</span><br><span class="line">      <span class="string">"!dist/**/*"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"match"</span>: [</span><br><span class="line">      <span class="string">"*oo"</span>,</span><br><span class="line">      <span class="string">"!foo"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"failFast"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"tap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"require"</span>: [</span><br><span class="line">      <span class="string">"babel-register"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"babel"</span>: <span class="string">"inherit"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于对 ES2015 的支持。Ava 是内置了 Babel 6，Ava 使用的配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"stage-2"</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"espower"</span>,</span><br><span class="line">    <span class="string">"transform-runtime"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以修改的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"ava"</span>: &#123;</span><br><span class="line">         <span class="string">"babel"</span>: &#123;</span><br><span class="line">             <span class="string">"presets"</span>: [</span><br><span class="line">                    <span class="string">"es2015"</span>,</span><br><span class="line">                    <span class="string">"stage-0"</span>,</span><br><span class="line">                    <span class="string">"react"</span></span><br><span class="line">             ]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且可以使用 <code>inherit</code> 来使用 <code>.babelrc</code> 的配置，不用再为了 ava 在 transpile 一次。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"babel"</span>: &#123;</span><br><span class="line">        <span class="string">"presets"</span>: [</span><br><span class="line">            <span class="string">"es2015"</span>,</span><br><span class="line">            <span class="string">"stage-0"</span>,</span><br><span class="line">            <span class="string">"react"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"ava"</span>: &#123;</span><br><span class="line">        <span class="string">"babel"</span>: <span class="string">"inherit"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但不管怎样，Note that AVA will always apply the <code>espower</code> and <code>transform-runtime</code> plugins.</p>
<h2 id="u6587_u6863"><a href="#u6587_u6863" class="headerlink" title="文档"></a>文档</h2><p>建议使用 async function</p>
<p>We highly recommend the use of async functions. They make asynchronous code concise and readable, and they implicitly return a promise so you don’t have to.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> promiseFn();</span><br><span class="line">    t.true(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// async arrow function</span></span><br><span class="line">test(<span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> promiseFn();</span><br><span class="line">    t.true(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下面的句子看下，涉及到 spec 文件的放置目录。</p>
<p>Test files are run from their current directory, so process.cwd() is always the same as <strong>dirname. You can just use relative paths instead of doing path.join(</strong>dirname, ‘relative/path’).</p>
<p>其他的 API 用到再看。</p>
<h2 id="u6D4B_u8BD5_u6D4F_u89C8_u5668"><a href="#u6D4B_u8BD5_u6D4F_u89C8_u5668" class="headerlink" title="测试浏览器"></a>测试浏览器</h2><p>依赖 <code>jsdom</code>。</p>
<p><a href="https://github.com/sindresorhus/ava/blob/master/docs/recipes/browser-testing.md" target="_blank" rel="external">Setting up AVA for browser testing</a></p>
<h1 id="Enzyme"><a href="#Enzyme" class="headerlink" title="Enzyme"></a>Enzyme</h1><p>文章介绍，<a href="https://medium.com/airbnb-engineering/enzyme-javascript-testing-utilities-for-react-a417e5e5090f#.sjli8b8zm" target="_blank" rel="external">Enzyme: JavaScript Testing utilities for React</a></p>
<p><a href="https://github.com/airbnb/enzyme/" target="_blank" rel="external">github</a></p>
<p>Airbnb open sourced Enzyme, a JavaScript library for testing React components. </p>
<p>Historically, testing UI has been hard to accomplish for a variety of reasons, but using React removes a lot of these hurdles. We hope that enzyme does a good job removing the remaining ones!</p>
<p>测试 UI 很难，React 帮我们除去了大多的障碍，希望 enzyme 等除去剩下的。</p>
<h2 id="Declarative_UIs_are_Testable_UIs"><a href="#Declarative_UIs_are_Testable_UIs" class="headerlink" title="Declarative UIs are Testable UIs"></a>Declarative UIs are Testable UIs</h2><p>Pure functions (and thus React components) are much easier to test because they simply return a description for what UI of the component should look like, given some application state, rather than actually mutating the UI and having side-effects. This “description” is known as a “Virtual DOM” and is a tree-like data structure.</p>
<ul>
<li>Pure Function 易测试，input -&gt; output，没有 side effects</li>
<li>测试 Virutal DOM，a tree-like data structure.</li>
</ul>
<p>Making assertions on the state of a React render tree can include a lot of boilerplate code and is hard to read, which detracts from the value of the test. Moreover, directly asserting on the resulting tree can strongly couple your tests to implementation details that end up making your tests extremely fragile.</p>
<ul>
<li>测试 React 的 render tree 会有很多 boilerplate 代码。难以阅读，也就降低了 test 的价值。</li>
<li>直接 assert resulting tree 会将 test 和实现细节强耦合，最终 fragile。</li>
</ul>
<p>Enzyme makes asking questions about the rendered output of your React components easy and intuitive by providing a fluent interface around rendered React components.</p>
<p>Enzyme 做的事情是，提供了 fluent interface。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Enzyme exports three different “modes” to render and test components, shallow, mount, and render. Shallow is the recommended mode to start with since it does a better job of isolating your tests to just a single component. If shallow doesn’t work for your use case (for example, if you are relying on the presence of a real DOM), mount or render likely will.</p>
<p>Enzyme 有3种“模式”来 render 和 test 组件。</p>
<ul>
<li>shallow 推荐，</li>
<li>mount </li>
<li>render</li>
</ul>
<h2 id="Github__u7684_u6587_u6863"><a href="#Github__u7684_u6587_u6863" class="headerlink" title="Github 的文档"></a>Github 的文档</h2><p>Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components’ output.</p>
<p>Enzyme’s API is meant to be intuitive and flexible by mimicking jQuery’s API for DOM manipulation and traversal.</p>
<p>模拟了 jQuery 操作和 traverse DOM 的 API。</p>
<p>对于 <code>React 0.14</code>：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --<span class="built_in">save</span>-<span class="built_in">dev</span> react-addons-test-utils@<span class="number">1.4</span></span><br><span class="line">npm i --<span class="built_in">save</span>-<span class="built_in">dev</span> react-dom@<span class="number">1.4</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934"><a href="#u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934" class="headerlink" title]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端技术选型思考于2016年03月23日]]></title>
    <link href="http://shane.hsi.rocks/2016/03/23/2016-03-23-Front-End-General-Techniques-Thoughts/"/>
    <id>http://shane.hsi.rocks/2016/03/23/2016-03-23-Front-End-General-Techniques-Thoughts/</id>
    <published>2016-03-23T01:40:04.000Z</published>
    <updated>2016-03-23T03:41:25.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>HTML/CSS</li>
<li>React</li>
<li>Redux</li>
<li>React Router</li>
<li>Rx</li>
<li>Falcor/Relay/GraphQL</li>
<li>Express</li>
</ul>
<p>分层的话：</p>
<table>
<thead>
<tr>
<th>分层</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTML/CSS - UI, UE</td>
</tr>
<tr>
<td>View - React</td>
</tr>
<tr>
<td>Data flow - Redux/Rx</td>
</tr>
<tr>
<td>Ajax/Cache - Falcor</td>
</tr>
<tr>
<td>Backend - Express/Falcor Endpoint</td>
</tr>
</tbody>
</table>
<p>其他的：</p>
<ul>
<li>Test<ul>
<li>Ava</li>
<li>Enzyme</li>
</ul>
</li>
<li>React Router</li>
<li>Webpack module bundler</li>
<li>Proxy</li>
<li>Mock Server</li>
</ul>
<p><strong>优先级</strong>：</p>
<ol>
<li>Ava/Enzyme - 黑盒</li>
<li>Redux/Rx</li>
<li>HTML/CSS</li>
<li>Faclor</li>
<li>Express</li>
<li>Mock Server</li>
<li>Proxy</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>HTML/CSS</li>
<li>React</li>
<li>Redux</li>
<li>React Router</li>
<li>Rx</li>
<li>Falcor/Relay/GraphQL</li>
<li>Express</li>
</ul>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[npm link]]></title>
    <link href="http://shane.hsi.rocks/2016/03/22/npm-link/"/>
    <id>http://shane.hsi.rocks/2016/03/22/npm-link/</id>
    <published>2016-03-22T06:26:37.000Z</published>
    <updated>2016-03-22T06:32:17.000Z</updated>
    <content type="html"><![CDATA[<p>参考链接：<a href="http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears" target="_blank" rel="external">justjs: node.js tutorials</a></p>
<p><strong>npm link: symbolic links to the rescue</strong></p>
<p>Fortunately npm provides a tool to avoid this tedium. And it’s easy to use. But there’s a catch.</p>
<p>Here’s how it’s supposed to work:</p>
<ol>
<li><p>cd to src/appy</p>
</li>
<li><p>Run “<strong>npm link</strong>“. This creates a symbolic link from a global folder to the src/appy folder.</p>
</li>
<li><p>cd to src/mysite</p>
</li>
<li><p>Run “<strong>npm link appy</strong>“. This links “node_modules/appy” in this particular project to the global folder, so that “require” calls looking for appy wind up loading it from your development folder, src/appy.</p>
</li>
</ol>
<p>Mission accomplished… almost. If you installed Node in a typical way, using MacPorts or Ubuntu’s apt-get, then npm’s “global” folders are probably in a location shared system-wide, like /opt/local/npm or /usr/lib/npm. And this is not good, because it means those “npm link” commands are going to fail unless you run them as root.</p>
<p>如何删除呢？</p>
<p>参考链接：<a href="http://stackoverflow.com/questions/19094630/how-do-i-uninstall-a-package-installed-using-npm-link" target="_blank" rel="external">How do I uninstall a package installed using npm link?</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm rm --global foo&#10;npm ls --global foo # &#26816;&#26597;&#19979;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>参考链接：<a href="http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears" target="_blank" rel="external">justjs: node]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习 Github RESTful API v3]]></title>
    <link href="http://shane.hsi.rocks/2016/03/22/Learn-Github-RESTful-API-v3/"/>
    <id>http://shane.hsi.rocks/2016/03/22/Learn-Github-RESTful-API-v3/</id>
    <published>2016-03-22T03:37:01.000Z</published>
    <updated>2016-03-26T00:45:41.000Z</updated>
    <content type="html"><![CDATA[<p><strong>meida type:</strong></p>
<p>最基本：<br>    application/json</p>
<p>其他类似于上传功能等单独定义。</p>
<p><strong>响应</strong></p>
<p>Response Header:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Status</span>: <span class="string">200 OK</span></span><br><span class="line"></span><br><span class="line"><span class="1c">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>分页</strong></p>
<p>/search/users?q=xx&amp;pageIndex=1&amp;pageSize=10</p>
<p>| 名称 | 类型 | 描述 |<br>| q | string | 关键词 |<br>| pageIndex | number | 第几页 |<br>| pageSize | number | 每页分几个 |</p>
<p><strong>错误</strong></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Status</span>: <span class="string">500 INTERNAL SERVER ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">error</span>:<span class="value"> <span class="string">'...'</span></span><br><span class="line"></span></span></span>&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>meida type:</strong></p>
<p>最基本：<br>    application/json</p>
<p>其他类似于上传功能等单独定义。</p>
<p><strong>响应</strong></p>
<p>Response Header]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Express 设置 webpack-dev-middleware]]></title>
    <link href="http://shane.hsi.rocks/2016/03/22/Setting-up-webpack-dev-middleware-in-Express/"/>
    <id>http://shane.hsi.rocks/2016/03/22/Setting-up-webpack-dev-middleware-in-Express/</id>
    <published>2016-03-22T01:21:32.000Z</published>
    <updated>2016-03-26T00:45:57.000Z</updated>
    <content type="html"><![CDATA[<p>需要了解几个概念：</p>
<ol>
<li>Express 和 connect 的区别</li>
<li>Express middleware 的原理大概了解</li>
</ol>
<p>Webpack dev 的几个概念：</p>
<p><strong>a. webpack dev server 完全可以 self-running 的 dev server，并包含 live reloading。</strong>：</p>
<p><strong>b. webpack dev middleware，</strong>：</p>
<p>是一个 simple wrapper middleware for webpack。 It serves the files emitted from webpack over a <strong>connect server</strong>.</p>
<p>和 bundling as files 相比的优势：</p>
<ol>
<li>No files are written to disk, it handles the files <strong>in memory</strong>。</li>
<li>If files changed <strong>in watch mode</strong>, the middleware no longer serves the old bundle, but <strong>delays requests until the compiling has finished</strong>. You don’t have to wait before refreshing the page after a file modification.</li>
</ol>
<p><strong>c. webpack hot middleware</strong></p>
<p>Webpack hot reloading using only webpack-dev-middleware. This allows you to add hot reloading into an existing server without webpack-dev-server.</p>
<p>以上两种 middleware 的区别可能要看代码。从文档和我的理解来说：</p>
<ol>
<li>dev 是 in memory</li>
<li>hot 是依赖了 dev，并增加了 hot reload</li>
</ol>
<p>因为已经有 Express 作为 server，所以，目的是：</p>
<p><strong>use webpack-dev-server as a middleware</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>需要了解几个概念：</p>
<ol>
<li>Express 和 connect 的区别</li>
<li>Express middleware 的原理大概了解</li>
</ol>
<p>Webpack dev 的几个概念：</p>
<p><strong>a. webpa]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[渐进增强 Web 开发的思考]]></title>
    <link href="http://shane.hsi.rocks/2016/03/17/Thoughts-on-Progressive-Web-Development/"/>
    <id>http://shane.hsi.rocks/2016/03/17/Thoughts-on-Progressive-Web-Development/</id>
    <published>2016-03-17T09:00:44.000Z</published>
    <updated>2016-03-26T00:47:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6837_u5F0F"><a href="#u6837_u5F0F" class="headerlink" title="样式"></a>样式</h2><p>样式使用 ant.design。</p>
<p>样式不会变。ant.design 的就很好。</p>
<p>但是如何使用 React 实现？可以修改。反正对用户的（接口）不要变。</p>
<h2 id="u4F46_u662F_u57FA_u672C_u7684_Layout__u8981_u5B9A_u4E0B_u6765"><a href="#u4F46_u662F_u57FA_u672C_u7684_Layout__u8981_u5B9A_u4E0B_u6765" class="headerlink" title="但是基本的 Layout 要定下来"></a>但是基本的 Layout 要定下来</h2><img src="/2016/03/17/Thoughts-on-Progressive-Web-Development/mockup.png" alt="mockup.png" title="">
<p>借鉴的淘宝的。可以很顺畅的放下 </p>
<ul>
<li>logo</li>
<li>omni serach</li>
<li>function area, ex. notification, help</li>
<li>left side bar</li>
<li>tab bar</li>
</ul>
<p>不要给用户选择。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6837_u5F0F"><a href="#u6837_u5F0F" class="headerlink" title="样式"></a>样式</h2><p>样式使用 ant.design。</p>
<p>样式不会变。ant.design 的就很好。</p>
<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何设计出色的网站后台原型？- 知乎问题学习]]></title>
    <link href="http://shane.hsi.rocks/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/"/>
    <id>http://shane.hsi.rocks/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/</id>
    <published>2016-03-17T07:11:18.000Z</published>
    <updated>2016-03-17T08:10:20.000Z</updated>
    <content type="html"><![CDATA[<p>Q：新手请教，如何设计出色的网站后台的原型？前辈们都有那些什么工作方法，设计经验，请不吝赐教!~</p>
<p>作者：justinlam</p>
<p>严重不同意最高票的回答。对 <strong>信息系统逻辑</strong> 的理解太表面。</p>
<p>没错，在设计系统时最开始确实是要定义好模块结构的划分，但是划分的方法不应该按照功能模块而是 <strong>按照业务逻辑进行划分</strong>。首先在 <strong>规划系统时要思考这个系统的作用到底是解决了什么问题或者对企业带来了怎么样的提升</strong> 。在这个大的环境下确定了之后，需求分析的阶段，应该按照业务的职责区块来划分子系统。</p>
<blockquote>
<p>应该一直维护一个图谱，每一块的都是相连的。可以乱，可以花时间整理。</p>
<p>注：作者认为这个是 <strong>在使用上是达不到出色的</strong>。原因是划分的方式。</p>
</blockquote>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-1.png" alt="zhihu-1.png" title="">
<p>这张图应该是 <strong>很普遍而且典型的后台管理系统</strong>，但是这样的系统无论是在开发还是使用我认为都是 <strong>达不到出色的</strong>。图中的板块划分采用 <strong>“业务名词+管理”</strong> 来进行命名，实际上也就是 <strong>以”物”为线索</strong> 贯穿整个系统。但是在实际操作中 <strong>物与物之间的传递都是交错</strong> 在一起的，例如图中的项目管理板块中包含了”合同管理”，在合同管理板块中又包含了”合同管理”那么究竟是哪个进行管理呢，项目管理中是否又包含权限的区分呢，这样的划分明显是有问题的。我在另一个回答上提到过 <strong>“穷尽不重复”</strong> 的划分方法，其实在这里就可以体现出作用来。</p>
<blockquote>
<p><strong>物与物之间的传递都是交错</strong>，就是 graph。上例的划分是 tree。</p>
</blockquote>
<p>那么正确的后台划分子系统的方式应该是 <strong>按照业务流程</strong> 来划分，以 <strong>“事”</strong> 为线索贯穿系统。采用 <strong>业务流程的环节</strong> 进行划分可以有效的 <strong>避免重复和混乱</strong> 的现象，对整个系统的架构都是非常清晰明了的。想要以”事”为线索进行梳理，有一个很好的方法就是使用 <strong>UML中的构件图</strong> 的来解决。对于产品人员，只需要理解构件图的思想，画出一个轻量级的框架。</p>
<blockquote>
<p><strong>按照业务流程</strong>，采用 <strong>业务流程的环节</strong> 进行划分。有效的 <strong>避免重复和混乱</strong> 。</p>
</blockquote>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-2.png" alt="zhihu-2.png" title="">
<p>首先在构件图中两个最重要的概念 <strong>构件和接口</strong> 对应着 <strong>事件和流程</strong> ，接口与接口之间只存在 <strong>实现(代表这个流程由这个事件提供的)和使用(代表这个事件要使用这个流程)</strong> 这两个关系。理解了这一概念之后就可以对 <strong>事与事，事与流程，流程与流程之间进行连接</strong>。</p>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-3.png" alt="zhihu-3.png" title="">
<p>画构件图，<strong>第一步是识别建模的构件集合，也就是对主题域进行划分</strong>。可以按照 <strong>工作职责范围(部门)</strong> 划分成不同的 <strong>主题域</strong>，划分的时候也可以根据需要 <strong>进行多级的嵌套</strong> ，这样可以更容易理解上下级之间的关联。例如软件开发商可以按照开发人员，产品人员，销售人员职责不同进行第一级区块划分，然后再根据开发人员负责的不同环节进行第二级部门的划分。那么根据区块就可以很容易划分出”销售”和”研发”两个主题域。</p>
<blockquote>
<p>构件的集合，可以理解成 namespace。可以镜像于 <strong>部门（工作职责）</strong><br>嵌套关系，可以镜像于 Job Family。</p>
<p>Job Family Group -&gt; Job Family 职业群，职业<br>Job Family + Management Level = Job Profile 职能<br>Job Profile + Organizaiton = Position 职位</p>
</blockquote>
<p>在研发这个主题域内主要负责针对软件研发进行管理，经过设计，研发，测试这几个阶段生产出成型的软件。那么这块就可以命名为”研发管理系统子系统”。</p>
<p>在销售这个主题域内主要负责对客户的销售，客户培训，售后服务等，因此这块可以命名为”客户服务管理子系统”。</p>
<p>在一般的系统中往往会加入后勤板块，在这个板块内含有硬件，财政和人员这些基本模板，可以划分成“硬件服务管理子系统”，”财政管理子系统”和”人员管理子系统”。后面两个子系统按照范围界定的原则相对独立，所以在前期设计中暂不考虑。</p>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-4.png" alt="zhihu-4.png" title="">
<p>第二步需要把 <strong>功能不同的模块</strong> 划分成 <strong>构件</strong>，同时 <strong>确定构件与构件之间的接口，也就是开始绘制构件图</strong>。首先每一个主题域就是一个构件，这个比较好理解。先分析各个主题域之间的关系，四个系统两两之间有不同的关系。因为人员管理子系统相对比较独立，所以这块可以最后考虑。</p>
<p>“研发管理系统子系统”与”客户服务管理子系统”:研发管理需要获取客户服务管理中的订单详情、研发要求、客户资料等；而客户服务管理需要获取研发管理中的项目进展、功能设置等。</p>
<p>“研发管理系统子系统”与”硬件服务管理子系统”:研发管理需要知道数据库和服务器的情况，后台资源占用的情况；硬件服务管理需要获取研发团队的项目进度，功能规划和版本维护的情况。</p>
<p>“客户服务管理子系统”与”硬件服务管理子系统”: 硬件服务管理需要知道客户的基本信息以便确定投入什么硬件支持；客户服务管理系统一般就不需要从后台服务系统获取信息。</p>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-5.png" alt="zhihu-5.png" title="">
<p>（上图是一个比较简单的原型，实际规划还要考虑主题域之间更多关联）</p>
<p>最后一步 <strong>进行主题域范围的明确，界定每个主题域内进行的功能以及相关的事件</strong>。在一些书籍中也把这个关系成为 <strong>上下文关系</strong>，即主题域与功能之间父级与子级的概念。在这个阶段要考虑到 Customer 与 Worker 之间的关系。找到系统中所有的客户，考虑这些客户会引起什么事件的发生，这些事件会引起Worker什么样的工作，讲这些都考虑进来。然后再补充Worker主动发起的动作，那么一个系统的所有事件就能没有遗漏地梳理完整了。这里值得注意的是，对于研发管理子系统而言，其他的客服管理，财政管理都属于是客户关系。他们对于研发关系系统属于消费者的动作。</p>
<blockquote>
<p>差不多理解作者的思想，核心是从流程触发，找到节点，找到节点间的接口。类似于 SOA，或者 FP。所以，需要一种 stream 的通用格式。<br>但是需要 namespace 之类的进行划分。这一块可以参考领域驱动设计。</p>
</blockquote>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-6.png" alt="zhihu-6.png" title="">
<p>通过以上三步可以把一个系统大致的框架搭建起来。这样搭建的好处在于系统的业务流程很清晰，无论是对于研发还是使用者而言都是有好处的，每个人都能清楚地意识到自己在做什么事情。上述分析方法是徐峰老师提出的 <strong>SERU需求分析法</strong> 中关于主题域确定，也就是系统框架结构确定的第一步，这也是设计一个系统最根基的地方，然后才是去考虑更细化，更精准的业务流程设计。把根基打好再去做子系统内部的规划就变得比较简单。对于一个系统，在设计时一定要有“自上而下”的思想，从最大的环境去考虑问题，这样才不会在后期规划中因为突然插入的东西变得混乱。(图片有部分来自网络，侵删)</p>
<p>参考资料：</p>
<ul>
<li><a href="http://zhuanlan.zhihu.com/justinlam/20383851" target="_blank" rel="external">SERU最佳需求分析方法</a></li>
<li><a href="https://book.douban.com/subject/3265691/" target="_blank" rel="external">软件需求最佳实践</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Q：新手请教，如何设计出色的网站后台的原型？前辈们都有那些什么工作方法，设计经验，请不吝赐教!~</p>
<p>作者：justinlam</p>
<p>严重不同意最高票的回答。对 <strong>信息系统逻辑</strong> 的理解太表面。</p>
<p>没错，在设计系统]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Relay 解决的问题]]></title>
    <link href="http://shane.hsi.rocks/2016/03/17/What-Relay-is-Solved/"/>
    <id>http://shane.hsi.rocks/2016/03/17/What-Relay-is-Solved/</id>
    <published>2016-03-17T02:30:46.000Z</published>
    <updated>2016-03-26T00:47:49.000Z</updated>
    <content type="html"><![CDATA[<img src="/2016/03/17/What-Relay-is-Solved/0.png" alt="0.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/1.png" alt="1.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/2.png" alt="2.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/3.png" alt="3.png" title="">
]]></content>
    <summary type="html">
    <![CDATA[<img src="/2016/03/17/What-Relay-is-Solved/0.png" alt="0.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/1.png" alt="1.png" title=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始学习 Falcor]]></title>
    <link href="http://shane.hsi.rocks/2016/03/16/Getting-Started-With-Falcor/"/>
    <id>http://shane.hsi.rocks/2016/03/16/Getting-Started-With-Falcor/</id>
    <published>2016-03-16T06:55:41.000Z</published>
    <updated>2016-03-26T00:48:09.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://auth0.com/blog/2015/08/28/getting-started-with-falcor/" target="_blank" rel="external">Getting Started With Falcor</a></p>
<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><p>In this tutorial, we will look at some of Falcor’s basic operations and show how they can be used to construct a virtual JSON model from a data source. The example data we’ll use will model a handful of JavaScript conferences. We’ll start on the client side and eventually move everything over to be served from a NodeJS back end. </p>
<p>会涉及到 Falcor 的一些基本操作。</p>
<p>如何从 data source 构造 virutal JSON model。</p>
<p>mock 数据是 JavaScript 会议。</p>
<p>先从 client 端，在写到 NodeJS backend。</p>
<p>Specifically, we will cover:</p>
<ul>
<li>√ What Falcor is and what problems it solves</li>
<li>How to set up a Falcor model on the client and prime it with data 纯 client 端</li>
<li>How to use Falcor’s JSON Graph to avoid having duplicate data JSON Graph 上场，dedupe</li>
<li>How to set up up a Falcor Router with Falcor Express Falcor Router 上场</li>
<li>How to do a basic search using a Falcor route 一个基本的搜索功能</li>
</ul>
<h2 id="What_is_Falcor_3F"><a href="#What_is_Falcor_3F" class="headerlink" title="What is Falcor?"></a>What is Falcor?</h2><p>One of the key problems that Falcor solves is the fact that HTTP wasn’t designed and really isn’t optimized for how web applications should ideally request data. With HTTP, only a single resource can be retrieved per request. Since web applications tend to need to request many small resources, many HTTP requests are often required to get all the data the application needs.</p>
<p>HTTP 并不是为 web application 设计和优化的。</p>
<p>web application 需要很多次小的资源请求。开销又很大。</p>
<p>Another problem that Falcor solves is that JSON objects represent data hierarchically, as trees, whereas data is much more often a graph. In other words, an application’s data doesn’t always have a strict parent-child relationship, but rather will tend to have many predecessors, or be related to many other pieces of data. For example, suppose that we have several categories for our JavaScript conferences. A conference like ng-conf could fit under the category of “JavaScript”, but could also fit under “AngularJS”. If we were to model this with JSON, we might get something like this:</p>
<p>另一个解决的问题，是 data representation，数据展示。</p>
<p>JSON 对象是 tree。</p>
<p>而 data 一般是 graph。</p>
<p>也就是一般不是父子单线关系，而是多线联系。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">categories: &#123;</span><br><span class="line">  javascript: [</span><br><span class="line">    <span class="number">0</span>: &#123;</span><br><span class="line">      name: ng-conf</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  angularjs: [</span><br><span class="line">    <span class="number">0</span>: &#123;</span><br><span class="line">      name: ng-conf</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As it is expressed here, ng-conf has a parent-child relationship with both categories, when really it is related to both. Falcor makes it possible to deal with data as a graph, but still output it as a normal JSON object.</p>
<p>Falcor 做到是，可以用 graph 来表示 data，但是输出的还是普通的 JSON 对象。</p>
<p>Falcor also helps to make data retrieval more efficient. Instead of pulling many JSON objects from an API and then only using some parts of them in the view layer, Falcor wires together a single virtual JSON model that provides only the data that is required at the time that it is needed. For example, if we wanted to get the name of a conference and the first names of its attendees, we typically would first have our API serve the user data and then we would use the first name value in our view. However, with Falcor, we can easily say that we want only the first name value for each attendee and then have that be the only piece of user data that is returned. In this way, Falcor essentially customizes data to the application’s view. Falcor does this through its JSON Graph convention, which is used to model graph information as a JSON object.</p>
<p>数据获取高效：按需索取。</p>
<p>Furthermore, Falcor caches the virtual JSON model so that it can be accessed in-memory. When it becomes necessary to request more or different data, Falcor first consults the cache and if the data is not available there, it makes another request for only the fragment that is missing.</p>
<p>缓存。</p>
<p>后面的就直接练习吧。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> falcor = <span class="built_in">require</span>(<span class="string">'falcor'</span>);</span><br><span class="line"><span class="keyword">var</span> falcorExpress = <span class="built_in">require</span>(<span class="string">'falcor-express'</span>);</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">'falcor-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Have Express request index.html</span></span><br><span class="line">app.use(express.static(<span class="string">'.'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $ref = falcor.Model.ref;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same data that was used in the view for our</span></span><br><span class="line"><span class="comment">// events, but this time on a simple object</span></span><br><span class="line"><span class="comment">// and not a Falcor model.</span></span><br><span class="line"><span class="keyword">var</span> eventsData = &#123;</span><br><span class="line">  locationsById: &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;</span><br><span class="line">      city: <span class="string">"Salt Lake City"</span>,</span><br><span class="line">      state: <span class="string">"Utah"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;</span><br><span class="line">      city: <span class="string">"Las Vegas"</span>,</span><br><span class="line">      state: <span class="string">"Nevada"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span>: &#123;</span><br><span class="line">      city: <span class="string">"Minneapolis"</span>,</span><br><span class="line">      state: <span class="string">"Minnesota"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">4</span>: &#123;</span><br><span class="line">      city: <span class="string">"Walker Creek Ranch"</span>,</span><br><span class="line">      state: <span class="string">"California"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  events: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"ng-conf"</span>,</span><br><span class="line">      description: <span class="string">"The world's best Angular Conference"</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[1]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"React Rally"</span>,</span><br><span class="line">      description: <span class="string">"Conference focusing on Facebook's React"</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[1]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"ng-Vegas"</span>,</span><br><span class="line">      description: <span class="string">"Two days jam-packed with Angular goodness with a focus on Angular 2"</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[2]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"Midwest JS"</span>,</span><br><span class="line">      description: <span class="string">"Midwest JS is a premier technology conference focused on the JavaScript ecosystem."</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[3]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"NodeConf"</span>,</span><br><span class="line">      description: <span class="string">"NodeConf is the longest running community driven conference for the Node community."</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[4]'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/model.json"</span>, falcorExpress.dataSourceRoute(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Router([&#123;</span><br><span class="line">      <span class="comment">// route 需要符合 整形模式，作为 eventIds</span></span><br><span class="line">    route: <span class="string">"events[&#123;integers:eventIds&#125;]['name', 'description']"</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">pathSet</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> results = [];</span><br><span class="line">            <span class="comment">// 在上面我们指定了 eventIds 标识符</span></span><br><span class="line">            <span class="comment">// 是 array，可以 loop</span></span><br><span class="line">            pathSet.eventIds.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">eventId</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// pathSet[2] 维护的是 key names array</span></span><br><span class="line">              <span class="comment">// JavaScript 嵌套一层（共两层），就会有两个 forEach</span></span><br><span class="line">                pathSet[<span class="number">2</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> eventRecord = eventsData.events[eventId];</span><br><span class="line">                    <span class="comment">// 就是构造一个 &#123;path, value&#125;，让 client 能读懂</span></span><br><span class="line">                    results.push(&#123;</span><br><span class="line">                        path: [<span class="string">'events'</span>, eventId, key],</span><br><span class="line">                        value: eventRecord[key]</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Listening on http://localhost:3000"</span>);</span><br></pre></td></tr></table></figure>
<p>Routes 是匹配 KeySet。在route string 的第一个数组。</p>
<p><code>route: &quot;events[{integers:eventIds}][&#39;name&#39;, &#39;description&#39;]&quot;</code></p>
<p>这里，我们指定：</p>
<ul>
<li>想匹配 integers</li>
<li>要被 eventId 检索</li>
</ul>
<p><code>get</code> 中的 <code>pathSet</code> 参数可以让我们访问 KeySet（KeySet 是客户端提供的，也就是 get 里的）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> falcor.Model(&#123; source: <span class="keyword">new</span> falcor.HttpDataSource(<span class="string">'/model.json'</span>) &#125;);</span><br><span class="line"></span><br><span class="line">model</span><br><span class="line">    .get([</span><br><span class="line">        <span class="string">"events"</span>,</span><br><span class="line">        &#123; from: <span class="number">0</span>, to: <span class="number">2</span> &#125;,</span><br><span class="line">        [<span class="string">"name"</span>, <span class="string">"description"</span>]</span><br><span class="line">    ])</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'event-data'</span>).innerHTML = <span class="built_in">JSON</span>.stringify(response, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>总结下，这个 route 就是要访问 <code>name</code> 和 <code>description</code>。</p>
<p>如果要获取 <code>location</code>，要写另一个 route，<strong>同时记得在第一个 route 里加上 ‘location’</strong>。</p>
<p>下面的 route string，加上了 <code>&#39;location&#39;</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route: <span class="string">"events[&#123;integers:eventIds&#125;]['name', 'description', 'location']"</span>,</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    route: <span class="string">"locationsById[&#123;integers:locationId&#125;]['city', 'state']"</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">pathSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = [];</span><br><span class="line">        pathSet.locationId.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">locationId</span>) </span>&#123;</span><br><span class="line">            pathSet[<span class="number">2</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> location = eventsData.locationsById[locationId];</span><br><span class="line">                results.push(&#123;</span><br><span class="line">                    path: [<span class="string">'locationsById'</span>, locationId, key],</span><br><span class="line">                    value: location[key]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最后一个 route，<strong>Search for an Event by Name</strong>：</p>
<p>The client can send integers as a KeySet to pull a range of results, but it can also provide strings. We can use this to setup an “event by name” search route.</p>
<blockquote>
<p>吐槽下，route string 非常的诡异啊。得写一个 parser 啊。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"events"</span>,</span><br><span class="line">    &#123; from: <span class="number">0</span>, to: <span class="number">2</span> &#125;,</span><br><span class="line">    [<span class="string">"name"</span>, <span class="string">"description"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>可以用 <code>{ from: 0, to: 2 }</code> 作为 KeySet 来表示 range。</p>
<p>当然，也可以提供 string 啦。可以用这个特性，做一个 search route（“event by name“）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    route: <span class="string">"events.byName[&#123;keys&#125;]['description']"</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">pathSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = [];</span><br><span class="line">        pathSet[<span class="number">2</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            eventsData.events.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (_.includes(event, name)) &#123;</span><br><span class="line">                    results.push(&#123;</span><br><span class="line">                        path: [<span class="string">'events'</span>, <span class="string">'byName'</span>, name, <span class="string">'description'</span>],</span><br><span class="line">                        value: event.description</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client 调用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.get([<span class="string">"events"</span>, <span class="string">"byName"</span>, [<span class="string">"Midwest JS"</span>], [<span class="string">"description"</span>]])</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://auth0.com/blog/2015/08/28/getting-started-with-falcor/" target="_blank" rel="external">Getting Started With Falcor</a></]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Falcor 开始]]></title>
    <link href="http://shane.hsi.rocks/2016/03/16/Falcor-Getting-Start/"/>
    <id>http://shane.hsi.rocks/2016/03/16/Falcor-Getting-Start/</id>
    <published>2016-03-16T02:54:11.000Z</published>
    <updated>2016-03-26T00:48:27.000Z</updated>
    <content type="html"><![CDATA[<p>对 Falcor 的期望是：</p>
<ul>
<li>在 app state 和 backend service 之间做一个中间层</li>
<li>不要管理太多 data flow</li>
<li>不要侵入 view</li>
</ul>
<p>参考文章：<a href="https://netflix.github.io/falcor/starter/what-is-falcor.html" target="_blank" rel="external">What is Falcor?</a></p>
<p>Falcor is the innovative data platform that powers the Netflix UIs. Falcor allows you to model all your backend data as a single Virtual JSON object on your Node server. On the client you work with your remote JSON object using familiar JavaScript operations like get, set, and call. If you know your data, you know your API.</p>
<p>建模 所有的 backend data 到 一个单独的 Virutal JSON object，到你的 Node server（但是似乎 Java server 也有了）。</p>
<p>在客户端，使用熟悉的 JavaScript 操作，比如 <code>get</code>，<code>set</code>，<code>call</code>。API 是不需要学习成本的。只要了解数据。</p>
<p>Falcor is middleware. It is not a replacement for your application server, database, or MVC framework. Instead Falcor can be used to optimize communication between the layers of a new or existing application.</p>
<p>Falcor 是一个 middleware。</p>
<p>不是代替 application server，database，或者 MVC framework。</p>
<p>Falcor 是用来 优化 layers 之间的 communication。</p>
<h2 id="One_Model_Everywhere"><a href="#One_Model_Everywhere" class="headerlink" title="One Model Everywhere"></a>One Model Everywhere</h2><p>Falcor allows you to model all of your backend data as a single JSON resource on the application server.</p>
<p>Falcor 可以允许你将所有的 backend data 在 application server 上建模成一个单独的 JSON resource。</p>
<img src="/2016/03/16/Falcor-Getting-Start/falcor-network-diagram.png" alt="falcor-network-diagram.png" title="">
<p>Clients request subsets of this JSON resource on demand, just like they would from an in-memory JSON object. To retrieve values from the JSON resource on the server, the client passes the server JavaScript paths to each desired value within the JSON object. The server responds with a subset of the JSON object that contains only those values.</p>
<p>客户端会按需请求 JSON resource 的子集，就像是获取一个内存中的 JSON 对象。</p>
<p>客户端会通过参数：每个需要的值的 JavaScript paths 来请求服务端。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/model.json?paths=[<span class="string">"user.name"</span>, <span class="string">"user.surname"</span>, <span class="string">"user.address"</span>]</span><br><span class="line"></span><br><span class="line">GET /model.json?paths=[<span class="string">"user.name"</span>, <span class="string">"user.surname"</span>, <span class="string">"user.address"</span>]</span><br><span class="line">&#123;</span><br><span class="line">  user: &#123;</span><br><span class="line">    name: <span class="string">"Frank"</span>,</span><br><span class="line">    surname: <span class="string">"Underwood"</span>,</span><br><span class="line">    address: <span class="string">"1600 Pennsylvania Avenue, Washington, DC"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Exposing all data as a single URL allows clients to request all of the data they need in a single network request. This can reduce latency by avoiding sequential server round trips.</p>
<p>一个 endpoint 暴露所有的数据，可以：</p>
<ul>
<li>通过避免后续的往返请求减少网络延迟</li>
</ul>
<p>In order to ensure that your application server remains stateless, Falcor provides a specialized Router which routes requests for values within the JSON object to different backend services.</p>
<p>为了保证你的 <strong>应用服务器</strong> 保持无状态型，Falcor 提供了一个特殊的 <strong>Router</strong>，用来路由对不同的 backend services 的请求。</p>
<p>Instead of matching URLs, the Falcor Router matches one or more JavaScript paths.</p>
<p>Falcor Router 不是通过符合 URLs，而是符合 JavaScript paths：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// matches user.name or user.surname or user.address</span></span><br><span class="line">    route: <span class="string">"user['name','surname','address']"</span>,</span><br><span class="line">    get(pathSet) &#123;</span><br><span class="line">      <span class="comment">// pathSet could be ["user", ["name"]], ["user", ["name", "surname"]], ["user", ["surname", "address"]] and so on...</span></span><br><span class="line">      userService.</span><br><span class="line">        getUser(getUserID()).</span><br><span class="line">        then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> pathSet[<span class="number">1</span>].</span><br><span class="line">            map(<span class="function"><span class="keyword">function</span>(<span class="params">userKey</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// return response for each individual requested path</span></span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                path: [<span class="string">"user"</span>, userKey],</span><br><span class="line">                value: user[userKey]</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>看出来了吗？这个 <code>get</code> 类似于 GraphQL 的 resolve 方法。</p>
<p>pathSet 是可能的路径集合。</p>
<p>The Falcor Router allows you to expose a single JSON model to the client, while giving you the flexibility to store your data anywhere.</p>
<p>只是对 backend data 做建模，最终暴露一个 JSON model 给客户端。</p>
<p>但也保证了灵活性来在其他地方存储 data。</p>
<img src="/2016/03/16/Falcor-Getting-Start/services-diagram.png" alt="services-diagram.png" title="">
<h2 id="The_Data_is_the_API"><a href="#The_Data_is_the_API" class="headerlink" title="The Data is the API"></a>The Data is the API</h2><p>You do not need to learn a complicated service layer to work with your data when you are using Falcor. If you know your data, you know your API. Falcor allows you to work with remote data the same way you work with local data, using JavaScript paths and operations. The primary difference is that Falcor’s client API is asynchronous.</p>
<p>你不需要学习一个复杂的 service layer 来处理 data。没有新增的语义，完全是 JavaScript Object 的 API。唯一的区别就是，Falcor’s client API 是异步的。</p>
<p>Here’s an example retrieving the surname of a user directly from an in-memory JSON object using a simple JavaScript path.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = &#123;</span><br><span class="line">  user: &#123;</span><br><span class="line">    name: <span class="string">"Frank"</span>,</span><br><span class="line">    surname: <span class="string">"Underwood"</span>,</span><br><span class="line">    address: <span class="string">"1600 Pennsylvania Avenue, Washington, DC"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prints "Underwood"</span></span><br><span class="line"><span class="built_in">console</span>.log(model.user.surname);</span><br></pre></td></tr></table></figure>
<p>Applications that use Falcor do not work directly with JSON data. Instead they work with their JSON data indirectly using a Falcor Model. The Falcor Model allows you to use familiar idioms like JavaScript paths and JavaScript operations to work with your data. The primary difference between working with JSON data directly and using a Falcor Model, is that a Falcor Model has an asynchronous API.</p>
<p>使用 Falcor 的应用并不会直接和 JSON data 打交道，而是通过 Falcor Model。</p>
<p>Falcor Model 提供了类似于 JavaScript paths 和 operations 的 API。只是他是异步的。</p>
<p>Let’s rewrite the code above using a Falcor Model instead of working with the JSON directly:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> falcor.Model(&#123;</span><br><span class="line">  cache: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      name: <span class="string">"Frank"</span>,</span><br><span class="line">      surname: <span class="string">"Underwood"</span>,</span><br><span class="line">      address: <span class="string">"1600 Pennsylvania Avenue, Washington, DC"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// prints "Underwood" eventually</span></span><br><span class="line">model.</span><br><span class="line">  getValue(<span class="string">"user.surname"</span>).</span><br><span class="line">  then(<span class="function"><span class="keyword">function</span>(<span class="params">surname</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(surname);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Note that we use the same JavaScript path to retrieve our data as when we worked with the JSON data directly. The only difference is that the result is pushed to a callback when it becomes available.</p>
<p>The advantage of working with your data using Falcor’s asynchronous API is that you can move your data anywhere on the network without changing the client code that consumes the data. Using the Falcor Model, we only need to change a few lines of code to alter the previous example to work with remote data.</p>
<p>好处是，获取的 API 相同，不用变。但是 model 的值却可以放在其他地方。比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> falcor.Model(&#123;</span><br><span class="line">  source: <span class="keyword">new</span> falcor.HttpDataSource(<span class="string">"/model.json"</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// prints "Underwood" eventually</span></span><br><span class="line">model.</span><br><span class="line">  getValue(<span class="string">"user.surname"</span>).</span><br><span class="line">  then(<span class="function"><span class="keyword">function</span>(<span class="params">surname</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(surname);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Now instead of working with in-memory JSON data, Falcor remotes requests for data to the application server’s Virtual JSON object. The Router retrieves the data from the data store with the information, and sends back only the requested fields.</p>
<p>现在是请求唯一的 endpoint，<code>/model.json</code>。</p>
<img src="/2016/03/16/Falcor-Getting-Start/falcor-end-to-end.png" alt="falcor-end-to-end.png" title="">
<p>Using an asynchronous API allows you to use the same programming model regardless of whether your data is local or remote. With Falcor it is common practice to begin development immediately by mocking the server’s JSON object. Once the server’s JSON resource has been written, the Falcor Model is connected to the server JSON using an HttpDataSource. No other client code needs to change. This approach can shrink project timelines by decoupling client and server developers.</p>
<p>使用一套异步 API 操作数据，不用关心数据在 local 还是 remote。</p>
<p>通用的实践就是，立即 mock server 的 JSON object。一旦 server 的 JSON resource 写好后，Falcor Model 就可以通过 HTTPDataSource 连接上 server 的 JSON。</p>
<p>不需要改变任何客户端代码。</p>
<h2 id="Bind_to_the_Cloud"><a href="#Bind_to_the_Cloud" class="headerlink" title="Bind to the Cloud"></a>Bind to the Cloud</h2><p>In most MVC systems, controllers are responsible for retrieving data from the server. <strong>One pattern for building applications with Falcor is to have your views retrieve data directly from the Falcor Model, just as they would from an in-memory JSON object</strong>. This pattern is sometimes referred to as Async MVC, because the communication between the view and the model is asynchronous.</p>
<p>在大多的 MVC 系统里，controllers 负责从 server 获取数据。<strong>在 Falcor 中，views 直接从 Falcor Model 获取数据。这是其中一种 pattern</strong>。</p>
<p>这种模式有时叫做 Async MVC。因为 view 和 model 之间是 async 的。</p>
<img src="/2016/03/16/Falcor-Getting-Start/async-mvc.png" alt="async-mvc.png" title="">
<p>In addition to decoupling controllers and views, Async MVC can improve the efficiency of your application’s network requests. When the view drives the data fetching, only the data absolutely required to render a view is retrieved from the server.</p>
<p>因为 Views 来声明需要什么数据，也就是必须的数据才获取。提高了效率。</p>
<p>In addition to Async MVC there are a variety of different patterns for integrating Falcor into your application. We are looking to the community for help building adapters for the various frameworks in use today.</p>
<p>除了 Async MVC，其他的 pattern 期待社区帮助构建。</p>
<h1 id="How_Does_Falcor_Work_3F"><a href="#How_Does_Falcor_Work_3F" class="headerlink" title="How Does Falcor Work?"></a>How Does Falcor Work?</h1><p>原文：<a href="https://netflix.github.io/falcor/starter/how-does-falcor-work.html" target="_blank" rel="external">How Does Falcor Work?</a></p>
<p>The Falcor Model transparently handles all network communication with the server. In order to ensure efficient client/server interactions, the Falcor Model applies a variety of different optimizations:</p>
<p>Faclor Model 隐式地处理着和 server 的网络请求。为了保证高效的 client/server 交互，Falcor Model 应用了一些列优化。</p>
<h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><p>Falcor maintains a fast in–memory cache that contains all of the values previously retrieved from the application server’s JSON object. If a request is made for information that is already available in the cache, the data will be retrieved from the cache and sent to the consumer’s callback as soon as possible.</p>
<p>Falcor 维护了一套快速的内存缓存，保存了之前所有从服务端获得的 JSON 对象。如果请求的信息在 cache 中已有，则从 cache 中获取，理解给 consumer 的 callback。</p>
<img src="/2016/03/16/Falcor-Getting-Start/model-caching.png" alt="model-caching.png" title="">
<p>To prevent the cache growing larger than the available memory on the device, developers can configure a maximum size for the cache. When the cache grows beyond the maximum size, the least-recently-used values are purged. This makes it possible to run the same application on an inexpensive mobile device or a powerful desktop machine.</p>
<p>为防止 cache 超过可用设备内存，开发者可以控制下 cache 的最大值。通过 LRU 算法清除。有客户端决定。</p>
<h2 id="Batching"><a href="#Batching" class="headerlink" title="Batching"></a>Batching</h2><p>Falcor’s ability to select as much or as little data from the network in a single request gives it the flexibility to batch multiple small requests for data into a single large request. The Falcor model can be configured to collect up multiple requests, and schedule them to be sent to the data source at once.</p>
<p>Falcor 可以打包小的请求到一个大的请求。涉及的逻辑是 schedule。</p>
<img src="/2016/03/16/Falcor-Getting-Start/batching.png" alt="batching.png" title="">
<p>In this example, we make a request for three individual values from the Model, and only a single coarse-grained request is sent to the data source</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>);</span><br><span class="line"><span class="keyword">var</span> httpDataSource = <span class="keyword">new</span> falcor.HttpDataSource(<span class="string">"/model.json"</span>);</span><br><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> falcor.Model(&#123; source: httpDataSource &#125;);</span><br><span class="line"><span class="keyword">var</span> batchModel = model.batch();</span><br><span class="line"></span><br><span class="line">batchModel.getValue(<span class="string">"todos[0].name"</span>).then(log);</span><br><span class="line">batchModel.getValue(<span class="string">"todos[1].name"</span>).then(log);</span><br><span class="line">batchModel.getValue(<span class="string">"todos[2].name"</span>).then(log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The previous three model requests only send a single request</span></span><br><span class="line"><span class="comment">// to the httpDataSource: "todos[0..2].name"</span></span><br></pre></td></tr></table></figure>
<p>The ability to batch requests can significantly improve performance when using a network protocol with a high connection cost (ex. HTTP).</p>
<p>batch 可以极大的提升高开销网络协议（比如 HTTP）的性能。</p>
<h2 id="Request_Deduping"><a href="#Request_Deduping" class="headerlink" title="Request Deduping"></a>Request Deduping</h2><p>In addition to batching outgoing requests, the Falcor Model dedupes requests. If a request is made for a value for which there is already an outstanding request, no additional request is made. This allows individual application views to retrieve their own data without having to coordinate with other views, just as if they were retrieving data from a fast in-memory JSON store.</p>
<p>除了 batching 对外的 requests，Falcor Model 也会对请求去重。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对 Falcor 的期望是：</p>
<ul>
<li>在 app state 和 backend service 之间做一个中间层</li>
<li>不要管理太多 data flow</li>
<li>不要侵入 view</li>
</ul>
<p>参考文章：<a hre]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[好于 REST 和 RPC 的设计]]></title>
    <link href="http://shane.hsi.rocks/2016/03/16/Transcending-REST-and-RPC/"/>
    <id>http://shane.hsi.rocks/2016/03/16/Transcending-REST-and-RPC/</id>
    <published>2016-03-16T00:04:07.000Z</published>
    <updated>2016-03-26T00:48:59.000Z</updated>
    <content type="html"><![CDATA[<p>It seems that a new paradigm is coming. Facebook and Netflix have come up with different implementations for that idea. Some people are calling it <a href="http://www.infoq.com/presentations/domain-driven-architecture" target="_blank" rel="external">Demand-Driven Architecture</a>, but before I show you some solutions, let’s go over some history to understand the problem. I will use the example that Netflix provides, but I think that most of us will find the patterns familiar.</p>
<p>来自 Netflix 的一个例子（应该是共性的）</p>
<p>Just for clarity, let’s assume that we have an on-demand streaming service — quite similar to Netflix :) — that has three microservices. One contains the genres, another one the titles and the last one contains the ratings that different users give to those titles. As we’re in 2015 we’ll discard RPC as architectural style and we’ll go with a RESTful design. Let’s briefly enumerate the characteristics of a RESTful design:</p>
<p>假设和 Netflix 一样，有一个即时流服务 - 有3个微服务。一个包含 种类，一个是 标题，一个是 （对标题的）评级。</p>
<p>在 2015 我们放弃了 RPC，选择了 RESTful。</p>
<p>简要列举下 RESTful 设计的特性：</p>
<ul>
<li><p>HTTP verbs have direct correspondence with CRUD verbs. One of the benefits is that clients can understand what is going on the server without digging into the implementation. For instance, we know that PUT is idempotent, so as there will not be any side effect, the client can call to that endpoint several times in a row without any issue.</p>
</li>
<li><p>We use extensive HTTP caching. Through headers like Cache-Control or ETag, we leverage one of the most juicy features of HTTP: caching resources.</p>
</li>
<li><p>HATEOAS for the win. Every single representation should have links to different representations so the clients can navigate through our backend like a graph. <a href="http://www.restapitutorial.com/" target="_blank" rel="external">Further reading</a></p>
</li>
</ul>
<blockquote>
<p>HATEOAS Hypermedia as the Engine of Application State</p>
</blockquote>
<ul>
<li>统一接口（理解起来方便）</li>
<li>直接利用 HTTP cache</li>
<li>HATEOAS</li>
</ul>
<h2 id="REST_limitations"><a href="#REST_limitations" class="headerlink" title="REST limitations"></a>REST limitations</h2><p>Let’s imagine that we send a GET to the genres endpoint. The response will include links to other GET requests like titles/1234 or ratings/6789. If we have the title “Titanic” in different genres (romance, drama and DiCaprioRules) you can see how the client is going to do at least two redundant requests. Apart from that the client is going to reshape the data whenever it comes back since it’s likely that the client won’t need every single field that those responses include. So, we have two problems with this design:</p>
<ul>
<li>High latency as we don’t optimize calls.</li>
<li><p>Large message sizes.</p>
</li>
<li><p>Round requests，没有做优化（通过 HATEOAS）</p>
</li>
<li>数据量太大，很多数据字段不需要</li>
</ul>
<h2 id="Patching_REST_with_RPC"><a href="#Patching_REST_with_RPC" class="headerlink" title="Patching REST with RPC"></a>Patching REST with RPC</h2><p>One way of overcoming these problems is customising our requests with query params. You can say to the server something like “give me only a couple of the fields that you expose on that representation“” or whatever arbitrary parameter. That means that you’ll lose the caching that HTTP offers as now you’ll have a ton of possible not-really-resources to cache.</p>
<p>通过 query params，这样就没有了 HTTP 提供的 cache。</p>
<p>Also you can create new abstractions ad-hoc that aggregate that for the client. In fact one of the benefits of CQRS is being able to create different views of your internal entities, so the demands of the client doesn’t affect your domain modeling. That has a problem though: there is a big a coupling with the server. Our system has a massive amount of fragmentation as you can stream over Android, iOS, TVs and also, different versions of the same client device. Therefore there are going to be different needs and rhythms and the coordination between backend and clients is going to be really messy.</p>
<p>Ad-hoc endpoint。由于终端太多，view model 太多，不好维护。</p>
<p>Also, CQRS is amazing in the fact that you could decide to model your system around different bounded contexts, i.e, different CQRS deployables. If your client needs a view that aggregate data from two CQRS units, you have the same problem.</p>
<h2 id="Demand_driven_architecture_to_the_rescue"><a href="#Demand_driven_architecture_to_the_rescue" class="headerlink" title="Demand driven architecture to the rescue"></a>Demand driven architecture to the rescue</h2><p>This leads to the point of Demand Driven Architectures. Conceptually the backend is just a single entity and, since it’s modeled using REST principles, it’s defining what is the shape of the data. However, we’re going to have tons of clients with different needs and all of them need to twist themselves in order to get the shape of the data that they want. Would it be great if clients could just send queries to the logical data unit called backend?</p>
<p>概念上，backend 只有一个入口，也是用 REST 原则建模。</p>
<p>If we think in a relational database the concept is similar. We have different tables (rest endpoints, resources, backend services) and we have a query language that allows us to join and shape the data easily. Some of the optimizations of that query will be done by the platform that runs those queries.</p>
<p>用一种 QL 来 query，join 多个 tables（rest endpoints，resources，backend services）。QL 也可以被优化。</p>
<h2 id="Falcor_and_JSON_Graph"><a href="#Falcor_and_JSON_Graph" class="headerlink" title="Falcor and JSON Graph"></a>Falcor and JSON Graph</h2><p>Netflix has created a tool called <a href="http://netflix.github.io/falcor" target="_blank" rel="external">Falcor</a> that tries to solve this concrete problem. Clients won’t talk with the backend services directly anymore, instead of they will send queries to a Falcor service that will do the routing, aggregations, projections and optimizations. This is an image from Falcor’s official documentation.</p>
<p>Clients 不在和 backend services 直接通信，而是先发送 queries 到一个 Falcor service，后者会进行 routing，aggragations（集合），projections（投影）和 optimizations（优化）。</p>
<img src="/2016/03/16/Transcending-REST-and-RPC/falcor-network-diagram.png" alt="Falcor Network Diagram" title="Falcor Network Diagram">
<p>They based that platform on the idea of JSON Graph. Let me explain it briefly. JSON is in essence a tree structure. However, most of our data has relationships so it should be modeled like a graph. Using REST design programmers usually solve that problem through ids, but that makes our life really difficult (think about problems like cache invalidation). As they say:</p>
<p>基于 JSON Graph。</p>
<p>JSON 本身是树结构，但是 data 一般有关系（relationships），所以应该建模成 graph。</p>
<p>RESTful 一般通过 ids 来解决。但是问题也有，比如 cache invalidation。</p>
<blockquote>
<p>JSON Graph is valid JSON and can be parsed by any JSON parser. However JSON Graph introduces new primitive types to JSON to allow JSON to be used to represent graph information in a simple and consistent way.</p>
</blockquote>
<p>JSON Graph 是有效的 JSON，可以被解析。但是 JSON Graph 引入了新的基本类型到 JSON，可以让其用简单一致的方式展示 graph 信息。</p>
<p>They borrow the idea from unix filesystem. That filesystem is a tree, but thanks to symlinks you can emulate the behaviour of a graph. That has massive implications in the way that Falcor optimises calls to backend services. Instead of keeping some values in a denormalised fashion, Falcor keeps references to that normalised value, so, if you ask for a value that has been already retrieved, Falcor will avoid that call. Also That makes cache invalidation much easier.</p>
<p>借鉴了 Unix 文件系统的思路。文件系统是 tree，但是通过 symlinks，可以模拟 graph。</p>
<p>Falcor 优化了对后端服务的调用：值通过标准化方式被引用，可以做缓存和缓存失效。</p>
<img src="/2016/03/16/Transcending-REST-and-RPC/falcor-services-diagram-1024x518.png" alt="falcor-services-diagram-1024x518.png" title="">
<p>As you can see in the example, we don’t store denormalised documents for titles inside of genres, but a reference through a titles map indexed by id. I can show you some code that I’ve been working on for a proof of concept. Falcor server side is currently only available on Node.js but there are <a href="https://twitter.com/falcorjs/status/575657256475189248" target="_blank" rel="external">plans to porting it into another platforms</a>.</p>
<p>没有存储非范式文档的 title 在 generes 里。而是通过 reference。(flatten javasript)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/model.json'</span>, falcorKoa.dataSourceRoute(<span class="keyword">new</span> FalcorRouter([</span><br><span class="line">        &#123;</span><br><span class="line">            route: <span class="string">"teamsById[&#123;integers:teamIds&#125;]['name', 'memberCount']"</span>,</span><br><span class="line">            get  : <span class="function"><span class="keyword">function</span>(<span class="params">pathSet</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> teamIds = pathSet.teamIds;</span><br><span class="line">                <span class="keyword">const</span> keys = pathSet[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">return</span> teamsService.getTeams()</span><br><span class="line">                        .then(<span class="function"><span class="keyword">function</span>(<span class="params">teams</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> results = [];</span><br><span class="line">                            teamIds.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">teamId</span>) </span>&#123;</span><br><span class="line">                                keys.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">var</span> team = teams[teamId];</span><br><span class="line">                                    results.push(&#123;</span><br><span class="line">                                        path : [<span class="string">'team'</span>, teamId, key],</span><br><span class="line">                                        value: team[key]</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;);</span><br><span class="line">                            <span class="keyword">return</span> results;</span><br><span class="line">                        &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ])));</span><br></pre></td></tr></table></figure>
<p>客户端：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> model = <span class="keyword">new</span> falcor.Model(&#123; source: <span class="keyword">new</span> falcor.HttpDataSource(<span class="string">'/model.json'</span>) &#125;);</span><br><span class="line">model.get(<span class="string">'teamsById['</span><span class="number">1234</span><span class="string">', '</span><span class="number">456</span><span class="string">'].name'</span>);</span><br><span class="line">model.get(<span class="string">'teamsById['</span><span class="number">789</span><span class="string">']['</span>name<span class="string">', '</span>memberCount<span class="string">']'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="IN_CONCLUSION"><a href="#IN_CONCLUSION" class="headerlink" title="IN CONCLUSION"></a>IN CONCLUSION</h2><p>There are no silver bullets in software and nobody is claiming than Falcor or GraphQL are going to solve every single problem with client/server integration. However, if you have an application with a lot of clients and your backend has a complex data model, it might be worth giving this new paradigm a try.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It seems that a new paradigm is coming. Facebook and Netflix have come up with different implementations for that idea. Some people are c]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redux APIs]]></title>
    <link href="http://shane.hsi.rocks/2016/03/15/Redux-APIs/"/>
    <id>http://shane.hsi.rocks/2016/03/15/Redux-APIs/</id>
    <published>2016-03-15T09:02:36.000Z</published>
    <updated>2016-03-16T01:09:10.000Z</updated>
    <content type="html"><![CDATA[<p>因为我在使用 rxjs 自己做一个简单的 flux。主要目的是做精细的 stream 控制。</p>
<p>这里想借鉴下 Redux 的 API 设计。</p>
<p>从例子看：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">Provider</span> <span class="attribute">store</span>=<span class="value">&#123;store&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">App</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span>,</span><br><span class="line">  document.getElementById('root') /&gt;</span><br><span class="line">)</span></span><br></pre></td></tr></table></figure>
<p>store 是通过 context 全局可见的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: state.counter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bindActionCreators(CounterActions, dispatch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Counter)</span><br></pre></td></tr></table></figure>
<p>connect 里主要的是 mapStateToProps。类似于 cursor 的功能。</p>
<h2 id="API_Design_2016-03-15_17_3A11_3A11"><a href="#API_Design_2016-03-15_17_3A11_3A11" class="headerlink" title="API Design 2016-03-15 17:11:11"></a>API Design 2016-03-15 17:11:11</h2><h3 id="store__u901A_u8FC7_context__u4F20_u9012"><a href="#store__u901A_u8FC7_context__u4F20_u9012" class="headerlink" title="store 通过 context 传递"></a>store 通过 context 传递</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state$.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Component</span> /&gt;</span>,</span><br><span class="line">    document.getElementById('root'));</span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>变成？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state$.subscribe( state =&gt; render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Provider</span> <span class="attribute">store</span>=<span class="value">&#123;state&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Component</span> /&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span> ,  document.getElementById('root')   /&gt;</span><br><span class="line">)</span>);</span><br></pre></td></tr></table></figure>
<p>让 state 全局可见。不用显式往下传递。</p>
<h3 id="cursor__u62FF_u503C"><a href="#cursor__u62FF_u503C" class="headerlink" title="cursor 拿值"></a>cursor 拿值</h3><p>view 直接修改 store（或者调用 store 里的方法）。暂时不觉得 actions 有什么特别大的作用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">@cursor(state =&gt; &#123;</span><br><span class="line">    return state.counter;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncrement, onDecrement &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    onIncrement(<span class="xml"><span class="tag">&lt;<span class="title">mutations</span>&gt;</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">p</span>&gt;</span> /&gt;</span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<p>因为 store 已经全局可见了。所以 <code>cursor</code> 肯定是可以拿到值的。</p>
<p>counter 的 model，或者 store</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;state&#125; animateStore=&#123;&#125;&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Component</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="title">Provider</span>&gt;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>还是使用 redux 的 API 吧。只不过是使用 RxJS 来实现。</p>
<img src="/2016/03/15/Redux-APIs/diagram.png" alt="diagram.png" title="">
]]></content>
    <summary type="html">
    <![CDATA[<p>因为我在使用 rxjs 自己做一个简单的 flux。主要目的是做精细的 stream 控制。</p>
<p>这里想借鉴下 Redux 的 API 设计。</p>
<p>从例子看：</p>
<figure class="highlight js"><table><tr><td]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[immutable-js 入门]]></title>
    <link href="http://shane.hsi.rocks/2016/03/15/immutable-js-getting-start/"/>
    <id>http://shane.hsi.rocks/2016/03/15/immutable-js-getting-start/</id>
    <published>2016-03-15T06:11:07.000Z</published>
    <updated>2016-03-15T08:47:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Immutable_collections_for_JavaScript"><a href="#Immutable_collections_for_JavaScript" class="headerlink" title="Immutable collections for JavaScript"></a>Immutable collections for JavaScript</h1><p><a href="https://travis-ci.org/facebook/immutable-js" target="_blank" rel="external"><img src="https://travis-ci.org/facebook/immutable-js.svg" alt="Build Status"></a></p>
<p><a href="http://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="external">Immutable</a> data cannot be changed once created, leading to much simpler<br>application development, no defensive copying, and enabling advanced memoization<br>and change detection techniques with simple logic. <a href="http://en.wikipedia.org/wiki/Persistent_data_structure" target="_blank" rel="external">Persistent</a> data presents<br>a mutative API which does not update the data in-place, but instead always<br>yields new updated data.</p>
<p>简化开发流程：</p>
<ul>
<li>不会出现防守型复制（defensive copying）。</li>
<li>可以进行高级的记忆（memoization）</li>
<li>简化变动监测（change detection）</li>
</ul>
<p>持久化（Persistent）data 提供了可变的 API ，不会更新 data，而是总是生成新的更新过的数据。</p>
<p>Immutable.js provides many Persistent Immutable data structures including:<br><code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code> and <code>Record</code>.</p>
<p>所以，提供的是：</p>
<p><strong> Persistent Immutable data structures </strong>，持久化不可变数据结构</p>
<p>包括： <code>List</code>，<code>Stack</code>，<code>Map</code>，<code>OrderedMap</code>，<code>Set</code>，<code>OrderedSet</code> 和 <code>Record</code>。</p>
<p>These data structures are highly efficient on modern JavaScript VMs by using<br>structural sharing via <a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="external">hash maps tries</a> and <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1" target="_blank" rel="external">vector tries</a> as popularized<br>by Clojure and Scala, minimizing the need to copy or cache data.</p>
<p>在现代的 JavaScript VMs 是非常高效的（通过使用 structural sharing，后者又是基于 hash map tries，和 vector tries，这些概念是因 Closure 和 Scala 流行的）。减少了复制或者缓存数据的需求。</p>
<p><code>Immutable</code> also provides a lazy <code>Seq</code>, allowing efficient<br>chaining of collection methods like <code>map</code> and <code>filter</code> without creating<br>intermediate representations. Create some <code>Seq</code> with <code>Range</code> and <code>Repeat</code>.</p>
<p>同时也提供了 lazy <code>Seq</code>，可以允许集合方法高效的 chaining，比如 <code>map</code>，<code>filter</code>，不用创造中介的展示。</p>
<h2 id="Getting_started"><a href="#Getting_started" class="headerlink" title="Getting started"></a>Getting started</h2><p>Install <code>immutable</code> using npm.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install immutable</span><br></pre></td></tr></table></figure>
<p>Then require it into any module.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</span><br><span class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</span><br><span class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></span><br><span class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>To use <code>immutable</code> from a browser, download <a href="https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js" target="_blank" rel="external">dist/immutable.min.js</a><br>or use a CDN such as <a href="https://cdnjs.com/libraries/immutable" target="_blank" rel="external">CDNJS</a><br>or <a href="http://www.jsdelivr.com/#!immutable.js" target="_blank" rel="external">jsDelivr</a>.</p>
<p>Then, add it as a script tag to your page:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"immutable.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> map2 = map1.<span class="keyword">set</span>(<span class="string">'b'</span>, <span class="number">50</span>);</span><br><span class="line">    map1.<span class="keyword">get</span>(<span class="string">'b'</span>); <span class="comment">// 2</span></span><br><span class="line">    map2.<span class="keyword">get</span>(<span class="string">'b'</span>); <span class="comment">// 50</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Or use an AMD loader (such as <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'./immutable.min.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Immutable</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</span><br><span class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></span><br><span class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>If you’re using <a href="http://browserify.org/" target="_blank" rel="external">browserify</a>, the <code>immutable</code> npm module<br>also works from the browser.</p>
<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>Use these Immutable collections and sequences as you would use native<br>collections in your <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> programs while still taking<br>advantage of type generics, error detection, and auto-complete in your IDE.</p>
<p>Just add a reference with a relative path to the type declarations at the top<br>of your file.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/&gt;</span></span><br><span class="line"><span class="keyword">import</span> Immutable = require(<span class="string">'immutable'</span>);</span><br><span class="line"><span class="keyword">var</span> map1: Immutable.Map&lt;string, number&gt;;</span><br><span class="line">map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</span><br><span class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></span><br><span class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>Map</code> 是数据结构。</p>
<p><code>set</code> 设置 key，<code>get</code> 获取 key。</p>
<h2 id="The_case_for_Immutability"><a href="#The_case_for_Immutability" class="headerlink" title="The case for Immutability"></a>The case for Immutability</h2><p>Much of what makes application development difficult is tracking mutation and<br>maintaining state. Developing with immutable data encourages you to think<br>differently about how data flows through your application.</p>
<p>应用开发之所以复杂，在于要跟踪 变动（tracking mutations），维护状态。</p>
<p>使用 immutable data 可以鼓励从不同的角度看 data flows。</p>
<p>Subscribing to data events throughout your application creates a huge overhead of<br>book-keeping which can hurt performance, sometimes dramatically, and creates<br>opportunities for areas of your application to get out of sync with each other<br>due to easy to make programmer error. Since immutable data never changes,<br>subscribing to changes throughout the model is a dead-end and new data can only<br>ever be passed from above.</p>
<ul>
<li>订阅 data events 会创建很多记忆（book-keeping）负担，影响到性能，有时是严重性的。</li>
<li>分布在多个区块的数据可能会不一致</li>
<li>由于 immutable data 会可变，所以，订阅 data evetns 是死路。</li>
</ul>
<p>This model of data flow aligns well with the architecture of <a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a><br>and especially well with an application designed using the ideas of <a href="http://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>.</p>
<p>这种 data flows 也催生出了 react 以及 flux 的设计</p>
<p>When data is passed from above rather than being subscribed to, and you’re only<br>interested in doing work when something has changed, you can use equality.</p>
<p>数据是 passed，不是 subscribed。</p>
<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While<br>objects represents some thing which could change over time, a value represents<br>the state of that thing at a particular instance of time. This principle is most<br>important to understanding the appropriate use of immutable data. In order to<br>treat Immutable.js collections as values, it’s important to use the<br><code>Immutable.is()</code> function or <code>.equals()</code> method to determine value equality<br>instead of the <code>===</code> operator which determines object reference identity.</p>
<p>Immutable 集合应该当做 <em>values</em>，而不是 <em>objects</em>。值不会变，代表着一个时间的一个实例。</p>
<p>所以，objects 相关的都不要用。</p>
<p>要用：</p>
<p><code>Immutable.is()</code> 或者 <code>equals()</code> 方法，不要用 <code>===</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">2</span>);</span><br><span class="line">assert(map1.equals(map2) === <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> map3 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</span><br><span class="line">assert(map1.equals(map3) === <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>Note: As a performance optimization <code>Immutable</code> attempts to return the existing<br>collection when an operation would result in an identical collection, allowing<br>for using <code>===</code> reference equality to determine if something definitely has not<br>changed. This can be extremely useful when used within memoization function<br>which would prefer to re-run the function if a deeper equality check could<br>potentially be more costly. The <code>===</code> equality check is also used internally by<br><code>Immutable.is</code> and <code>.equals()</code> as a performance optimization.</p>
<p>注意：性能优化原因，有时 <code>Immutable</code> 会返回一样的 collection（如果从值上看一样的话），这时候 <code>===</code> 的结果也是对的。<br>这个在 memoization function 运行 deep equality check 很有用，更简单了。</p>
<blockquote>
<p>注意：这里的 memoization function 就是 <code>shouldComponentUpdate</code>。</p>
</blockquote>
<p>If an object is immutable, it can be “copied” simply by making another reference<br>to it instead of copying the entire object. Because a reference is much smaller<br>than the object itself, this results in memory savings and a potential boost in<br>execution speed for programs which rely on copies (such as an undo-stack).</p>
<p>如果 object 是 immutable，就可以很简单的 copy，只要新建一个 reference，而不是复制整个对象。</p>
<p>reference 很小。也简化了内存，可能也会对依赖复制的应用增加执行速度。</p>
<p>这里的 copy，就是通过 <code>=</code>（赋值运算符）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> clone = map1;</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript-first_API"><a href="#JavaScript-first_API" class="headerlink" title="JavaScript-first API"></a>JavaScript-first API</h2><p>While <code>immutable</code> is inspired by Clojure, Scala, Haskell and other functional<br>programming environments, it’s designed to bring these powerful concepts to<br>JavaScript, and therefore has an Object-Oriented API that closely mirrors that<br>of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES6</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a>.</p>
<p>尽量接近 JavaScript 的标准。提供了镜像 Array，Map，Set 的面向对象的 API。</p>
<p>The difference for the immutable collections is that methods which would mutate<br>the collection, like <code>push</code>, <code>set</code>, <code>unshift</code> or <code>splice</code> instead return a new<br>immutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code><br>instead return new immutable collections.</p>
<p>区别是，<code>push</code>，<code>set</code>，<code>unshift</code>，<code>splice</code> 不会更改集合，而是返回一个系你的 immutable collection。</p>
<p>像 <code>slice</code> 和 <code>concat</code> 之前返回新的 arrays，会返回新的 immutable collections。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list1 = Immutable.List.of(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> list2 = list1.push(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> list3 = list2.unshift(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> list4 = list1.concat(list2, list3);</span><br><span class="line">assert(list1.size === <span class="number">2</span>);</span><br><span class="line">assert(list2.size === <span class="number">5</span>);</span><br><span class="line">assert(list3.size === <span class="number">6</span>);</span><br><span class="line">assert(list4.size === <span class="number">13</span>);</span><br><span class="line">assert(list4.get(<span class="number">0</span>) === <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>Almost all of the methods on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a> will be found in similar form on<br><code>Immutable.List</code>, those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> found on <code>Immutable.Map</code>, and those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a><br>found on <code>Immutable.Set</code>, including collection operations like <code>forEach()</code><br>and <code>map()</code>.</p>
<p>Array -&gt; Immuable.List<br>Map -&gt; Immutable.Map<br>Set -&gt; Immutable.Set</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alpha = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>, d:<span class="number">4</span>&#125;);</span><br><span class="line">alpha.map((v, k) =&gt; k.toUpperCase()).join();</span><br><span class="line"><span class="comment">// 'A,B,C,D'</span></span><br></pre></td></tr></table></figure>
<h3 id="Accepts_raw_JavaScript_objects"><a href="#Accepts_raw_JavaScript_objects" class="headerlink" title="Accepts raw JavaScript objects."></a>Accepts raw JavaScript objects.</h3><p>Designed to inter-operate with your existing JavaScript, <code>immutable</code><br>accepts plain JavaScript Arrays and Objects anywhere a method expects an<br><code>Iterable</code> with no performance penalty.</p>
<p>因为要和 JavaScript 代码交互，所以 <code>immutable</code> 可以接受 plain JavaScriptJavaScript Arrays 和 Objects（可以接收 <code>Iterable</code> 的方法）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>, d:<span class="number">4</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = Immutable.Map(&#123;c:<span class="number">10</span>, a:<span class="number">20</span>, t:<span class="number">30</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;d:<span class="number">100</span>, o:<span class="number">200</span>, g:<span class="number">300</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> map3 = map1.merge(map2, obj);</span><br><span class="line"><span class="comment">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></span><br></pre></td></tr></table></figure>
<p>This is possible because <code>immutable</code> can treat any JavaScript Array or Object<br>as an Iterable. You can take advantage of this in order to get sophisticated<br>collection methods on JavaScript Objects, which otherwise have a very sparse<br>native API. Because Seq evaluates lazily and does not cache intermediate<br>results, these operations can be extremely efficient.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>&#125;;</span><br><span class="line">Immutable.Seq(myObject).map(x =&gt; x * x).toObject();</span><br><span class="line"><span class="comment">// &#123; a: 1, b: 4, c: 9 &#125;</span></span><br></pre></td></tr></table></figure>
<p>Keep in mind, when using JS objects to construct Immutable Maps, that<br>JavaScript Object properties are always strings, even if written in a quote-less<br>shorthand, while Immutable Maps accept keys of any type.</p>
<p>记住一点，构造成 immutable 所有的 key 都会变成 string。即 <code>.get(key: string)</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">1</span>: <span class="string">"one"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// [ "1" ]</span></span><br><span class="line">obj[<span class="string">"1"</span>]; <span class="comment">// "one"</span></span><br><span class="line">obj[<span class="number">1</span>];   <span class="comment">// "one"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = Immutable.fromJS(obj);</span><br><span class="line">map.get(<span class="string">"1"</span>); <span class="comment">// "one"</span></span><br><span class="line">map.get(<span class="number">1</span>);   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>Property access for JavaScript Objects first converts the key to a string, but<br>since Immutable Map keys can be of any type the argument to <code>get()</code> is<br>not altered.</p>
<h3 id="Converts_back_to_raw_JavaScript_objects"><a href="#Converts_back_to_raw_JavaScript_objects" class="headerlink" title="Converts back to raw JavaScript objects."></a>Converts back to raw JavaScript objects.</h3><p>All <code>immutable</code> Iterables can be converted to plain JavaScript Arrays and<br>Objects shallowly with <code>toArray()</code> and <code>toObject()</code> or deeply with <code>toJS()</code>.<br>All Immutable Iterables also implement <code>toJSON()</code> allowing them to be passed to<br><code>JSON.stringify</code> directly.</p>
<p>变回 raw JavaScript objects。</p>
<p><code>toArray()</code>，<code>toObject()</code>，<code>toJS()</code>。</p>
<p><code>toJSON()</code>，可以直接传递给 <code>JSON.stringify</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deep = Immutable.Map(&#123; a: <span class="number">1</span>, b: <span class="number">2</span>, c: Immutable.List.of(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) &#125;);</span><br><span class="line">deep.toObject() <span class="comment">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125;</span></span><br><span class="line">deep.toArray() <span class="comment">// [ 1, 2, List [ 3, 4, 5 ] ]</span></span><br><span class="line">deep.toJS() <span class="comment">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125;</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(deep) <span class="comment">// '&#123;"a":1,"b":2,"c":[3,4,5]&#125;'</span></span><br></pre></td></tr></table></figure>
<h3 id="Embraces_ES6"><a href="#Embraces_ES6" class="headerlink" title="Embraces ES6"></a>Embraces ES6</h3><p><code>Immutable</code> takes advantage of features added to JavaScript in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES6</a>,<br>the latest standard version of ECMAScript (JavaScript), including <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol" target="_blank" rel="external">Iterators</a>,<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">Arrow Functions</a>, <a href="http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes" target="_blank" rel="external">Classes</a>, and <a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">Modules</a>. It’s also inspired by the<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a> collections added to ES6. The library is “transpiled” to ES3<br>in order to support all modern browsers.</p>
<p>All examples are presented in ES6. To run in all browsers, they need to be<br>translated to ES3.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">foo.map(x =&gt; x * x);</span><br><span class="line"><span class="comment">// ES3</span></span><br><span class="line">foo.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x; &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Nested_Structures"><a href="#Nested_Structures" class="headerlink" title="Nested Structures"></a>Nested Structures</h2><p>The collections in <code>immutable</code> are intended to be nested, allowing for deep<br>trees of data, similar to JSON.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nested = Immutable.fromJS(&#123;a:&#123;b:&#123;c:[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]&#125;&#125;&#125;);</span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<p>A few power-tools allow for reading and operating on nested data. The<br>most useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code>List</code>,<br><code>Map</code> and <code>OrderedMap</code>.</p>
<p>这是一些帮助方法，可以帮助读取，操作嵌套结构。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nested2 = nested.mergeDeep(&#123;a:&#123;b:&#123;d:<span class="number">6</span>&#125;&#125;&#125;);</span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nested2.getIn([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nested3 = nested2.updateIn([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], value =&gt; value + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nested4 = nested3.updateIn([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], list =&gt; list.push(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Lazy_Seq"><a href="#Lazy_Seq" class="headerlink" title="Lazy Seq"></a>Lazy Seq</h2><p><code>Seq</code> describes a lazy operation, allowing them to efficiently chain<br>use of all the Iterable methods (such as <code>map</code> and <code>filter</code>).</p>
<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be<br>changed, appended to, rearranged or otherwise modified. Instead, any mutative<br>method called on a Seq will return a new Seq.</p>
<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any<br>method call.</p>
<p>For example, the following does not perform any work, because the resulting<br>Seq is never used:</p>
<pre><code>var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)
  .filter(x =&gt; x % 2).map(x =&gt; x * x);
</code></pre><p>Once the Seq is used, it performs only the work necessary. In this<br>example, no intermediate arrays are ever created, filter is called three times,<br>and map is only called twice:</p>
<pre><code>console.log(oddSquares.get(1)); // 9
</code></pre><p>Any collection can be converted to a lazy Seq with <code>.toSeq()</code>.</p>
<pre><code>var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();
</code></pre><p>Seq allow for the efficient chaining of sequence operations, especially when<br>converting to a different concrete type (such as to a JS object):</p>
<pre><code>seq.flip().map(key =&gt; key.toUpperCase()).flip().toObject();
// Map { A: 1, B: 1, C: 1 }
</code></pre><p>As well as expressing logic that would otherwise seem memory-limited:</p>
<pre><code>Immutable.Range(1, Infinity)
  .skip(1000)
  .map(n =&gt; -n)
  .filter(n =&gt; n % 2 === 0)
  .take(2)
  .reduce((r, n) =&gt; r * n, 1);
// 1006008
</code></pre><p>Note: An iterable is always iterated in the same order, however that order may<br>not always be well defined, as is the case for the <code>Map</code>.</p>
<h2 id="Equality_treats_Collections_as_Data"><a href="#Equality_treats_Collections_as_Data" class="headerlink" title="Equality treats Collections as Data"></a>Equality treats Collections as Data</h2><p><code>Immutable</code> provides equality which treats immutable data structures as pure<br>data, performing a deep equality check if necessary.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">1</span>, c:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">1</span>, c:<span class="number">1</span>&#125;);</span><br><span class="line">assert(map1 !== map2); <span class="comment">// two different instances</span></span><br><span class="line">assert(Immutable.is(map1, map2)); <span class="comment">// have equivalent values</span></span><br><span class="line">assert(map1.equals(map2)); <span class="comment">// alternatively use the equals method</span></span><br></pre></td></tr></table></figure>
<p><code>Immutable.is()</code> uses the same measure of equality as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="external">Object.is</a><br>including if both are immutable and all keys and values are equal<br>using the same measure of equality.</p>
<h2 id="Batching_Mutations"><a href="#Batching_Mutations" class="headerlink" title="Batching Mutations"></a>Batching Mutations</h2><blockquote>
<p>If a tree falls in the woods, does it make a sound?</p>
<p>If a pure function mutates some local data in order to produce an immutable<br>return value, is that ok?</p>
<p>— Rich Hickey, Clojure</p>
</blockquote>
<p>Applying a mutation to create a new immutable object results in some overhead,<br>which can add up to a minor performance penalty. If you need to apply a series<br>of mutations locally before returning, <code>Immutable</code> gives you the ability to<br>create a temporary mutable (transient) copy of a collection and apply a batch of<br>mutations in a performant manner by using <code>withMutations</code>. In fact, this is<br>exactly how  <code>Immutable</code> applies complex mutations itself.</p>
<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new<br>immutable Lists.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list1 = Immutable.List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> list2 = list1.withMutations(<span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</span><br><span class="line">  list.push(<span class="number">4</span>).push(<span class="number">5</span>).push(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line">assert(list1.size === <span class="number">3</span>);</span><br><span class="line">assert(list2.size === <span class="number">6</span>);</span><br></pre></td></tr></table></figure>
<p>Note: <code>immutable</code> also provides <code>asMutable</code> and <code>asImmutable</code>, but only<br>encourages their use when <code>withMutations</code> will not suffice. Use caution to not<br>return a mutable copy, which could result in undesired behavior.</p>
<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including<br><code>set</code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a<br>persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,<br>and <code>splice</code> will always return new immutable data-structures and never mutate<br>a mutable collection.</p>
<h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p><a href="http://facebook.github.io/immutable-js/docs/" target="_blank" rel="external">Read the docs</a> and eat your vegetables.</p>
<p>Docs are automatically generated from <a href="https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts" target="_blank" rel="external">Immutable.d.ts</a>.<br>Please contribute!</p>
<p>Also, don’t miss the <a href="https://github.com/facebook/immutable-js/wiki" target="_blank" rel="external">Wiki</a> which<br>contains articles on specific topics. Can’t find something? Open an <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">issue</a>.</p>
<h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><p>Use <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">Github issues</a> for requests.</p>
<p>We actively welcome pull requests, learn how to <a href="./CONTRIBUTING.md">contribute</a>.</p>
<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>Changes are tracked as <a href="https://github.com/facebook/immutable-js/releases" target="_blank" rel="external">Github releases</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="https://www.youtube.com/watch?v=K2NYwP90bNs" target="_blank" rel="external">Phil Bagwell</a>, for his inspiration<br>and research in persistent data structures.</p>
<p><a href="https://github.com/hughfdjackson/" target="_blank" rel="external">Hugh Jackson</a>, for providing the npm package<br>name. If you’re looking for his unsupported package, see <a href="https://www.npmjs.org/package/immutable/1.4.1" target="_blank" rel="external">v1.4.1</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><code>Immutable</code> is <a href="./LICENSE">BSD-licensed</a>. We also provide an additional <a href="./PATENTS">patent grant</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Immutable_collections_for_JavaScript"><a href="#Immutable_collections_for_JavaScript" class="headerlink" title="Immutable collection]]>
    </summary>
    
  </entry>
  
</feed>
