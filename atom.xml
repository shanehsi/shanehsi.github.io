<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-01-15T09:11:01.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Write a Webpack Plugin]]></title>
    <link href="http://shane.hsi.rocks/2016/01/14/Write-a-Webpack-Plugin/"/>
    <id>http://shane.hsi.rocks/2016/01/14/Write-a-Webpack-Plugin/</id>
    <published>2016-01-14T09:56:38.000Z</published>
    <updated>2016-01-15T09:11:01.000Z</updated>
    <content type="html"><![CDATA[<p>Plugin 介入的是 Webpack build process。也就是说，在 Webpack build 时，做一些其他的工作（然后可以拿到 Webpack build 时的一些 context）。</p>
<p>Plugin 需要理解 Webpack 的一些 low-level 的内部机制，然后 hook into。要读一些 source code。</p>
<h2 id="Compiler_and_Compilation"><a href="#Compiler_and_Compilation" class="headerlink" title="Compiler and Compilation"></a>Compiler and Compilation</h2><p>开发 plugin 要知晓两个对象 <code>compiler</code>，<code>compilation</code>。</p>
<ul>
<li><p><code>compiler</code> 相当于 Webpck 的 context，并且是配置过的，也就是说，可以拿到 Webpack 的配置比如，options，loaders，plugins。每一个 plguin 都会获得一个对 <code>compiler</code> 的引用。</p>
</li>
<li><p><code>compilation</code> 对应于一个版本的 assets 的 build。因为在运行 Webpack development middleware 时，每次文件变动被探测到，都会有一个新的 compilation，生成一次新的 compiled assets。所以，<code>compilation</code> 代表了 module resources，compiled assets，changed files 和 watched dependencies 的当前状态。还提供了很多 callback points，让 plugin 来做些自定义操作。</p>
</li>
</ul>
<h2 id="Basic_plugin_architecture"><a href="#Basic_plugin_architecture" class="headerlink" title="Basic plugin architecture"></a>Basic plugin architecture</h2><p>Plugins 是实例化对象，prototype 上必须有 <code>apply</code> 方法，它会在 Webpack 安装这个 plugin 时调用。apply 会得到一个 Webpack compiler 的引用，并被赋权使用 compiler 的 callbacks。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorldPlugin</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Setup the plugin instance with options...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloWorldPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">  compiler.plugin(<span class="string">'done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World!'</span>); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HelloWorldPlugin;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloWorldPlugin = <span class="built_in">require</span>(<span class="string">'hello-world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpackConfig = &#123;</span><br><span class="line">  <span class="comment">// ... config settings here ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HelloWorldPlugin(&#123;options: <span class="literal">true</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Accessing_the_compilation"><a href="#Accessing_the_compilation" class="headerlink" title="Accessing the compilation"></a>Accessing the compilation</h2><p>如何访问 <code>compilation</code> 对象呢？通过使用 <code>compiler</code> 的回调。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloCompilationPlugin</span>(<span class="params">options</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">HelloCompilationPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置回调，访问 compilation</span></span><br><span class="line">  compiler.plugin(<span class="string">"compilation"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置回调，访问 compilation 的 steps</span></span><br><span class="line">    compilation.plugin(<span class="string">"optimize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Assets are being optimized."</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HelloCompilationPlugin;</span><br></pre></td></tr></table></figure>
<p>关于 <code>complier</code>，<code>compilation</code> 更多的信息参看 <a href="https://webpack.github.io/docs/plugins.html" target="_blank" rel="external">plugins API</a>。</p>
<h2 id="Async_compilation_plugins"><a href="#Async_compilation_plugins" class="headerlink" title="Async compilation plugins"></a>Async compilation plugins</h2><p>异步这块暂时不看。</p>
<h2 id="PLUGINS"><a href="#PLUGINS" class="headerlink" title="PLUGINS"></a>PLUGINS</h2><p>以上是 high-level 的文档，这里是具体的细节。</p>
<p>Webpack 的很多对象都继承 Tabable class，后者会暴露一个 <code>plugin</code> 方法。通过 <code>plugin</code> 方法，plugins 会 inject custom build steps。比如：<code>compiler.plugin</code> 和 <code>compilation.plugin</code>。</p>
<p>具体说，对于 plguin 的调用会绑定在 build process 的特定步骤。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/ MyPlugin.js</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPlugin</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Configure your plugin with options...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">  compiler.plugin(<span class="string">"compile"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 开始 compile</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The compiler is starting to compile..."</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">"compilation"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一个新的 compilation</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The compiler is starting a new compilation..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// optimize 步骤</span></span><br><span class="line">    compilation.plugin(<span class="string">"optimize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"The compilation is starting to optimize files..."</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">"emit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 开始emit 生成的 assets，此时是 plugin 往 c.assets (c: Compilation) 数组增加 assets 的最后机会</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The compilation is going to emit files..."</span>);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPlugin;</span><br></pre></td></tr></table></figure>
<p>全部的 steps，参见 <a href="https://webpack.github.io/docs/plugins.html#the-compiler-instance" target="_blank" rel="external">THE COMPILER INSTANCE</a>。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>该例子很简单，从文件系统拿到一个值，放入 compilation 的 assets。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlPlugin</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.options = options ? options : &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HtmlPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">"emit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation, callback</span>) </span>&#123;</span><br><span class="line">    that.addFileToWebpackAsset(compilation);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HtmlPlugin.prototype.addFileToWebpackAsset = <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> template = path.join(__dirname, <span class="string">'default-pc.html'</span>);</span><br><span class="line">  <span class="keyword">var</span> filename = path.resolve(template);</span><br><span class="line">  compilation.fileDependencies.push(filename);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> outFilename = path.basename(that.options.filename || <span class="string">'index.html'</span>);</span><br><span class="line">  compilation.assets[outFilename] = &#123;</span><br><span class="line">    source: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fs.readFileSync(filename).toString();</span><br><span class="line">    &#125;,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fs.statSync(filename).size;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HtmlPlugin;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Plugin 介入的是 Webpack build process。也就是说，在 Webpack build 时，做一些其他的工作（然后可以拿到 Webpack build 时的一些 context）。</p>
<p>Plugin 需要理解 Webpack 的一些 low-]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scaffold and Tools for Front-end (will update regularly)]]></title>
    <link href="http://shane.hsi.rocks/2016/01/13/Scaffold-and-Tools-for-Front-end-will-update-regularly/"/>
    <id>http://shane.hsi.rocks/2016/01/13/Scaffold-and-Tools-for-Front-end-will-update-regularly/</id>
    <published>2016-01-13T06:36:49.000Z</published>
    <updated>2016-01-15T09:11:04.000Z</updated>
    <content type="html"><![CDATA[<p>技术栈：</p>
<ul>
<li>TypeScript</li>
<li>React</li>
<li>Webpack</li>
<li>Babel</li>
<li>PostCSS &amp; CSS Modules</li>
</ul>
<h2 id="Only_TypeScript_u2019s_Type"><a href="#Only_TypeScript_u2019s_Type" class="headerlink" title="Only TypeScript’s Type"></a>Only TypeScript’s Type</h2><p>其中 TypeScript 借助 IDE（如 webstorm）或者直接命令行 <code>tsc --watch</code> 编译成 <code>/\.jsx?$/</code>。也就是说，虽然用了 Webpack，但是没有使用 Webpack 的 TypeScript loader，保证出去这一步外，和使用 ES6 开发相同。<code>tsconfig.json</code> 如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">target</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">jsx</span>": <span class="value"><span class="string">"preserve"</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>使用 TypeScript 并不会增加学习的曲线，目前仅仅是使用 TypeScript 中的 Type 系统，做 compile 期的类型检查，而不是在运行时（比如使用 PropTypes）。</p>
<h2 id="Based_on_react-transform-boilerplate"><a href="#Based_on_react-transform-boilerplate" class="headerlink" title="Based on react-transform-boilerplate"></a>Based on react-transform-boilerplate</h2><p>其余即基于 <a href="https://github.com/gaearon/react-transform-boilerplate" target="_blank" rel="external">react-transform-boilerplate</a>。</p>
<p>没有多余的配置，由渐入深。</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>对于移动端，参考 <a href="https://github.com/weui/weui/blob/master/dist/style/weui.css" target="_blank" rel="external">weui</a>，但是只初步将其中的 weui-rest.css 和 weui-font.css（本身并没有这些文件，这里只是逻辑分块）作为全局 css。</p>
<p>并参考 <a href="https://github.com/corysimmons/boy" target="_blank" rel="external">boy</a> 项目。</p>
<h2 id="To_be_continued"><a href="#To_be_continued" class="headerlink" title="To be continued"></a>To be continued</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>技术栈：</p>
<ul>
<li>TypeScript</li>
<li>React</li>
<li>Webpack</li>
<li>Babel</li>
<li>PostCSS &amp; CSS Modules</li>
</ul>
<h2 id="Only_Ty]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Read TypeScript Blog, Announcing TypeScript 1.7]]></title>
    <link href="http://shane.hsi.rocks/2016/01/13/Read-TypeScript-Blog-Announcing-TypeScript-1-7/"/>
    <id>http://shane.hsi.rocks/2016/01/13/Read-TypeScript-Blog-Announcing-TypeScript-1-7/</id>
    <published>2016-01-13T02:10:24.000Z</published>
    <updated>2016-01-15T09:11:07.000Z</updated>
    <content type="html"><![CDATA[<p>更新：</p>
<ul>
<li>对于 ES6 targets，默认打开 async/await</li>
<li>polymorphic ‘this’ typing</li>
<li>ES2016 的 exponentiation 语法</li>
<li>ES6 module targeting</li>
</ul>
<h2 id="Async/Await_for_ES6_targets"><a href="#Async/Await_for_ES6_targets" class="headerlink" title="Async/Await for ES6 targets"></a>Async/Await for ES6 targets</h2><p><a href="http://tc39.github.io/ecmascript-asyncawait/" target="_blank" rel="external">Asyc functions</a>，需要 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-generator-function-definitions" target="_blank" rel="external">ES6 generator</a> 支持（比如 node.js v4 及以上）。</p>
<p>函数通过 <code>async</code> 关键词指定它为一个 asynchronous function。</p>
<p><code>await</code>关键词用来停止执行（stop execution），直到 <code>async</code> 函数的 promise 已经 fulfilled。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"><span class="comment">// printDelayed is a 'Promise&lt;void&gt;'</span></span><br><span class="line">async <span class="function"><span class="keyword">function</span> <span class="title">printDelayed</span>(<span class="params">elements: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> element of elements) &#123;</span><br><span class="line">        await delay(<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">async <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">milliseconds: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise&lt;<span class="built_in">void</span>&gt;(resolve =&gt; &#123;</span><br><span class="line">        setTimeout(resolve, milliseconds);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printDelayed([<span class="string">"Hello"</span>, <span class="string">"beautiful"</span>, <span class="string">"asynchronous"</span>, <span class="string">"world"</span>]).then(() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Printed every element!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>对于目前对 async/await 的实现，参考上一篇<a href="http://blogs.msdn.com/b/typescript/archive/2015/11/03/what-about-async-await.aspx" target="_blank" rel="external">博客</a>。</p>
<h2 id="Polymorphic_this_Typing"><a href="#Polymorphic_this_Typing" class="headerlink" title="Polymorphic this Typing"></a>Polymorphic <code>this</code> Typing</h2><p>背景见 <a href="https://github.com/Microsoft/TypeScript/issues/229" target="_blank" rel="external">issue</a>。</p>
<p>这是 TypeScript 1.7 新增的类型。</p>
<p><code>this</code> 类型可以用在 classes 和 interfaces 里，表示某种类型，它是 containing type 的 subtype（而不是 containing type）。</p>
<p>关于多态这个计算机科学词汇，这里加深下理解。</p>
<p>我们先以 <a href="https://msdn.microsoft.com/zh-cn/library/ms173152.aspx" target="_blank" rel="external">C#中的多态性为例</a> 理解：</p>
<p>多态指两个方面：</p>
<ul>
<li>运行时，在 方法参数、集合或数组等位置，派生类的对象可以作为基类的对象处理。即，对象的声明类型不再与运行时相同。</li>
<li>基类可以定义并实现虚方法，派生类可以重写（override）这些方法，即派生类提供自己的定义和实现。运行时，CLR 查找对象的<strong>运行时</strong>定义，调用虚方法的重写方法。即，你可以调用基类的方法，但执行的是派生类版本。</li>
</ul>
<p>这些是在 C# 中的实践，再来看下<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9E%8B_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="external">维基百科</a>的定义：</p>
<blockquote>
<p>多态，是指计算机程序运行时，相同的消息可能会送给多个不同的类之对象，而系统可依据对象所属类，引发对应类的方法，而有不同的行为。<br>多态也可定义为“一种将不同的特殊行为和单个泛化记号相关联的能力”。</p>
</blockquote>
<p>这里先重点关于下<strong>动态多态（dynamic polymorphism）</strong>：通过类继承机制和虚函数机制生效于运行期。可以优雅地处理异质对象集合，只要其共同的基类定义了虚函数的接口。也被称为子类型多态（Subtype polymorphism）或包含多态（inclusion polymorphism）。在面向对象程序设计中，这被直接称为多态。</p>
<p>另外提及一点，静态多态中的参数化多态（Parametric polymorphism），把类型作为参数的多态。在面向对象程序设计中，这被称作<a href="https://zh.wikipedia.org/wiki/%E6%B3%9B%E5%9E%8B" target="_blank" rel="external">泛型编程</a>。</p>
<p>现在回头再看下 TypeScript 1.7 引入的多态 <code>this</code> 类型：</p>
<blockquote>
<p><code>this</code> 类型可以用在 classes 和 interfaces 里，表示某种类型，它是 containing type 的 subtype（而不是 containing type）。</p>
</blockquote>
<p>这个特性可以帮助容易写出某些 patterns，比如：hierachical fluent APIs，层级流式 API。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Model </span>&#123;</span><br><span class="line">    setupBase(): <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="interface"><span class="keyword">interface</span> AdvancedModel <span class="keyword">extends</span> Model </span>&#123;</span><br><span class="line">    setupAdvanced(): <span class="keyword">this</span>;  <span class="comment">// 返回值是 this，这个 this 既可以是指本身，也可以指基类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">createModel</span>(<span class="params"></span>): <span class="title">AdvancedModel</span></span>;</span><br><span class="line">newModel = newModel.setupBase().setupAdvanced(); <span class="comment">// fluent style works</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>问：TypeScript 中的 <code>declare</code> 关键词是指？</p>
</blockquote>
<p>关于 <code>this</code> 的更多信息，参考 <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#this-typing" target="_blank" rel="external">TypeScript Wiki</a>。</p>
<p>为了支持这个特性，TypeScript 1.7 对从 <code>this</code> 推导（inferring）type 做了些许变更。大致一些<a href="https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#TypeScript1.7" target="_blank" rel="external">潜在的 breaking changes</a>：</p>
<blockquote>
<p>In a class, the type of the value this will be inferred to the this type, and subsequent assignments from values of the original type can fail. As a workaround, you could add a type annotation for this. A code sample with recommended work around, along with a list of other potentially breaking changes is available at GitHub.</p>
</blockquote>
<h2 id="ES6_Module_Emitting"><a href="#ES6_Module_Emitting" class="headerlink" title="ES6 Module Emitting"></a>ES6 Module Emitting</h2><p>Node.js v4+，支持很多 ES6 特性，但是不支持 ES6 modules，可以如下配置，适应 Node.js v4+ 的 runtime。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//tsconfig.json targeting node.js v4 and beyond</span><br><span class="line">&#123;</span><br><span class="line">    "compilerOptions": &#123;</span><br><span class="line">        "module": "commonjs",</span><br><span class="line">        "target": "es6"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ES7_Exponentiation"><a href="#ES7_Exponentiation" class="headerlink" title="ES7 Exponentiation"></a>ES7 Exponentiation</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squared = <span class="number">2</span> ** <span class="number">2</span>;  <span class="comment">// same as: 2 * 2</span></span><br><span class="line"><span class="keyword">let</span> cubed = <span class="number">2</span> ** <span class="number">3</span>;  <span class="comment">// same as: 2 * 2 * 2</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">2</span>;</span><br><span class="line">num **= <span class="number">2</span>; <span class="comment">// same as: num = num * num;</span></span><br></pre></td></tr></table></figure>
<p>和 <code>Math.pow()</code> 说 Byebye。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>更新：</p>
<ul>
<li>对于 ES6 targets，默认打开 async/await</li>
<li>polymorphic ‘this’ typing</li>
<li>ES2016 的 exponentiation 语法</li>
<li>ES6 modu]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://shane.hsi.rocks/2015/12/21/hello-world/"/>
    <id>http://shane.hsi.rocks/2015/12/21/hello-world/</id>
    <published>2015-12-21T07:45:00.000Z</published>
    <updated>2015-12-26T08:01:23.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
