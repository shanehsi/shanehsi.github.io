<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-02-29T12:33:12.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[新部门，新角色，新目标]]></title>
    <link href="http://shane.hsi.rocks/2016/02/29/New-Department-New-Roles-New-Goals/"/>
    <id>http://shane.hsi.rocks/2016/02/29/New-Department-New-Roles-New-Goals/</id>
    <published>2016-02-29T12:05:48.000Z</published>
    <updated>2016-02-29T12:33:12.000Z</updated>
    <content type="html"><![CDATA[<p>今天正式转组。当前时间20:05，状态累。虽然现在有很多想法，由于状态不佳，所以想形成一篇博客，保留下自己的零碎想法。</p>
<ul>
<li>新组有很多新的业务领域知识需要摄入</li>
<li>Java 点评中间件需要熟悉，主要是 Cat</li>
<li>用户端 Java 的技术特点需要熟悉</li>
<li>这边技术团队的技术特点需要熟悉</li>
</ul>
<p>以上是近期，或者叫做直面的挑战。</p>
<blockquote>
<p>现在身体状况的确有些不好，很想睡觉。 然后过了5分钟左右，中间问了下妈妈外婆的身体状况。背景音乐从『IT 公论』换成中孝介的歌声。状态稍微恢复了点。</p>
</blockquote>
<p>不管挑战如何，都会有解决方案。有些自己参与即可，有些也急不来，需要和团队不断的沟通。</p>
<p>Cat 中间件的熟悉主要是自己。但是比较快速的方式是问他们看哪些指标？Cat 调试的方式也不多。Cat 的文档相对蛮多的。总结出一篇博客。这个基本上就可以标记为 done。</p>
<p>其他基本上通过沟通。要快速和团队融合。目标是2周，3月中旬找 Lead 沟通下年度目标。沟通的具体内容我需要找长辈和朋友商量下。</p>
<p>今天和一个同事聊天，他说一定要有目标。</p>
<p>所以，这才是我最大的挑战。</p>
<p>上周五在公司的目标管理课程上，讲师分享了一个例子。对一所学校的毕业生，30年后的现状进行了调查。</p>
<ul>
<li>依然坚持30年前定下的目标的极少部分人，成为了精英和上层人物</li>
<li>坚持了10年的，成为了专家</li>
<li>坚持了3年的，成为了中产</li>
<li>一直在更换目标的，成为了普通人</li>
</ul>
<p>出去其中的生搬硬造，道理却是出来了。</p>
<p>这才是我最大的挑战。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天正式转组。当前时间20:05，状态累。虽然现在有很多想法，由于状态不佳，所以想形成一篇博客，保留下自己的零碎想法。</p>
<ul>
<li>新组有很多新的业务领域知识需要摄入</li>
<li>Java 点评中间件需要熟悉，主要是 Cat</li>
<li>用户端 J]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[SSH Login with Saved Password]]></title>
    <link href="http://shane.hsi.rocks/2016/02/29/SSH-Login-with-Saved-Password/"/>
    <id>http://shane.hsi.rocks/2016/02/29/SSH-Login-with-Saved-Password/</id>
    <published>2016-02-29T11:30:41.000Z</published>
    <updated>2016-02-29T11:37:39.000Z</updated>
    <content type="html"><![CDATA[<p>参考文档：<a href="http://serverfault.com/questions/241588/how-to-automate-ssh-login-with-password" target="_blank" rel="external">How to automate SSH login with password?</a></p>
<p>参考文档：<a href="https://gist.github.com/arunoda/7790979" target="_blank" rel="external">Installing SSHPASS</a>。</p>
<p>之后可以编写脚本了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考文档：<a href="http://serverfault.com/questions/241588/how-to-automate-ssh-login-with-password" target="_blank" rel="external">How to auto]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 知识点 20160229]]></title>
    <link href="http://shane.hsi.rocks/2016/02/29/Java-Knowledge-Points-20160229/"/>
    <id>http://shane.hsi.rocks/2016/02/29/Java-Knowledge-Points-20160229/</id>
    <published>2016-02-29T08:30:04.000Z</published>
    <updated>2016-02-29T12:27:11.000Z</updated>
    <content type="html"><![CDATA[<p>注：未填充答案。</p>
<p>区分目录：</p>
<ul>
<li>src/main/resources/META-INF/</li>
<li>webapps下的那个META-INF</li>
</ul>
<p>错误：</p>
<p><code>java.lang.AbstractMethodError</code></p>
<p>这个问题是因为接口中定义的方法名和实现类的的方法名相同，但是参数的数据类型却不一致，而且实现类的方法没有 <code>@Override</code> 造成的。</p>
<p>所以在实现接口或覆写父类方法时，最好的实践是加上 <code>@Override</code>。</p>
<p>详细：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//www.google.com/search?q=java.lang.AbstractMethodError%3A+org.apache.xerces.dom.DocumentImpl.setXmlStandalone</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>注：未填充答案。</p>
<p>区分目录：</p>
<ul>
<li>src/main/resources/META-INF/</li>
<li>webapps下的那个META-INF</li>
</ul>
<p>错误：</p>
<p><code>java.lang.Abs]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[阅读 TypeScript Deep Dive]]></title>
    <link href="http://shane.hsi.rocks/2016/02/27/Read-TypeScript-Deep-Dive/"/>
    <id>http://shane.hsi.rocks/2016/02/27/Read-TypeScript-Deep-Dive/</id>
    <published>2016-02-27T01:28:10.000Z</published>
    <updated>2016-02-27T02:26:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="extends"><a href="#extends" class="headerlink" title="__extends"></a>__extends</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = <span class="keyword">this</span>.__extends || <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    __.prototype = b.prototype;</span><br><span class="line">    d.prototype = <span class="keyword">new</span> __();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>d - derived class<br>b - base class</p>
<p><strong>1.</strong> 将 static members 复制到 d。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br></pre></td></tr></table></figure>
<p><strong>2.</strong> 设置 d 的 class function 的 prototype 可选的查找 b 的 proto 的成员。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.prototype.__proto__ = b.prototype</span><br></pre></td></tr></table></figure>
<p>详细解释下 <strong>2</strong>。</p>
<p>首先解释为什么 <code>d.prototype.__proto__ = b.prototype</code> 和 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">__.prototype = b.prototype;</span><br><span class="line">d.prototype = <span class="keyword">new</span> __();</span><br></pre></td></tr></table></figure>
<p>等价。</p>
<p>然后解释这句话的重要性。</p>
<p>先了解这些概念：</p>
<ol>
<li><code>__proto__</code></li>
<li>prototype</li>
<li>effect of <code>new</code> on <code>this</code> inside the called function</li>
<li>effect of <code>new</code> on <code>prototype</code> and <code>__proto__</code></li>
</ol>
<p>每一个 JavaScript 对象都有 <code>__proto__</code>。其中一个目的是：当 <code>obj.property</code> 找不到，会找 <code>obj.__proto__.property</code>，然后 <code>obj.__proto__.__.proto__.property</code>。这就是原型继承。</p>
<p>另一个有用的信息是，所有的 JavaScript function 有一个 property 叫做 <code>prototype</code>。并且有一个 member 叫做 <code>constructor</code> 指向这个 function。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.constructor === Foo);</span><br></pre></td></tr></table></figure>
<p>现在再看下：<code>new</code> 对 <code>this</code> 的作用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newFoo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(newFoo.bar); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<p>大意是：<code>this</code> 会指向新创建的对象。原因是，<strong>在 Function 上使用 <code>new</code> 将 <code>prototype</code> 复制到新创建对象的 <code>__proto__</code></strong>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo.__proto__ === Foo.prototype); <span class="comment">// True</span></span><br></pre></td></tr></table></figure>
<p>以上。</p>
<p>现在看下： <code>__extends__</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">__.prototype = b.prototype;</span><br><span class="line">d.prototype = <span class="keyword">new</span> __();</span><br></pre></td></tr></table></figure>
<p>d.prototype.<strong>proto</strong> = __.prototype</p>
<p>-&gt; d.prototype = { <strong>proto</strong>: <strong>.prototype}<br>-&gt; d.prototype = { </strong>proto__: b.prototype }</p>
<p>等下，我们需要 d 的 prototype.constructor 保持原来的。</p>
<p>d.prototype.constructor = d;</p>
<p>注意：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || <span class="function"><span class="keyword">function</span>(<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b)</span><br><span class="line">        <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    d.prototype = b === <span class="literal">null</span> </span><br><span class="line">        ? <span class="built_in">Object</span>.create(b) </span><br><span class="line">        : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>多了一步判断。其中 <code>(__.prototype = b.prototype, new __())</code> 叫做逗号操作符，可以在一行运行多条语句。</p>
<p>其中，Object.create(null)：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个原型为null的空对象</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="literal">null</span>); <span class="comment">// o.__proto__ === undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);<span class="comment">// o.__proto__ === Object &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>弄懂上面的区别。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="extends"><a href="#extends" class="headerlink" title="__extends"></a>__extends</h2><figure class="highlight js"><table><tr><td class]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript Spec Version 1.8 - Other]]></title>
    <link href="http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Other/"/>
    <id>http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Other/</id>
    <published>2016-02-26T00:21:39.000Z</published>
    <updated>2016-02-26T00:27:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Type_Aliases"><a href="#Type_Aliases" class="headerlink" title="Type Aliases"></a><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#3.10" target="_blank" rel="external">Type Aliases</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type StringOrNumber = string | number;  </span><br><span class="line">type Text = string | &#123; text: string &#125;;  </span><br><span class="line">type NameLookup = Dictionary&lt;string, Person&gt;;  </span><br><span class="line">type ObjectStatics = <span class="keyword">typeof</span> <span class="built_in">Object</span>;  </span><br><span class="line">type Callback&lt;T&gt; = (data: T) =&gt; <span class="keyword">void</span>;  </span><br><span class="line">type Pair&lt;T&gt; = [T, T];  </span><br><span class="line">type Coordinates = Pair&lt;number&gt;;  </span><br><span class="line">type Tree&lt;T&gt; = T | &#123; left: Tree&lt;T&gt;, right: Tree&lt;T&gt; &#125;;</span><br></pre></td></tr></table></figure>
<p>Interface types have many similarities to type aliases for object type literals, but since interface types offer more capabilities they are generally preferred to type aliases. For example, the interface type</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Point &#123;  </span><br><span class="line">    x: number;  </span><br><span class="line">    y: number;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>could be written as the type alias</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Point = &#123;  </span><br><span class="line">    x: number;  </span><br><span class="line">    y: number;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>However, doing so means the following capabilities are lost:</p>
<ul>
<li>An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot. 可以用在 extend 和 implements 子句中</li>
<li>An interface can have multiple merged declarations, but a type alias for an object type literal cannot. interface 是 open-end，同名的会被 merge。 </li>
</ul>
<h2 id="Excess_Properties"><a href="#Excess_Properties" class="headerlink" title="Excess Properties"></a><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#3.11.5" target="_blank" rel="external"> Excess Properties</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface InputElement &#123;  </span><br><span class="line">    name: string;  </span><br><span class="line">    visible?: boolean;  </span><br><span class="line">    [x: string]: any;            <span class="comment">// Allow additional properties of any type  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> address: InputElement = &#123;  </span><br><span class="line">    name: <span class="string">"Address"</span>,  </span><br><span class="line">    visible: <span class="literal">true</span>,  </span><br><span class="line">    help: <span class="string">"Enter address here"</span>,  <span class="comment">// Allowed because of index signature  </span></span><br><span class="line">    shortcut: <span class="string">"Alt-A"</span>            <span class="comment">// Allowed because of index signature  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Type_Aliases"><a href="#Type_Aliases" class="headerlink" title="Type Aliases"></a><a href="https://github.com/Microsoft/TypeScript/b]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript Spec Version 1.8 - Classes]]></title>
    <link href="http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Classes/"/>
    <id>http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8-Classes/</id>
    <published>2016-02-25T23:54:14.000Z</published>
    <updated>2016-02-26T00:21:09.000Z</updated>
    <content type="html"><![CDATA[<p>本身，JavaScript practice has two very common design patterns: the module pattern and the class pattern.</p>
<p>简单来说，Roughly speaking, the module pattern uses closures to hide names and to encapsulate private data, while the class pattern uses prototype chains to implement many variations on object-oriented inheritance mechanisms. </p>
<p>module 模式是利用闭包。</p>
<p>class 模式用原型链来实现 OO 继承机制。</p>
<blockquote>
<p>但是注意，EC2015 引入了 module 机制和 module pattern 实现的原理不同，为了防止混淆，在 TypeScript 中，module pattern 对应的是 namespace。</p>
</blockquote>
<p><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#16-classes" target="_blank" rel="external">Classes</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    balance = <span class="number">0</span>;  </span><br><span class="line">    deposit(credit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的 JavaScript（TypeScript 的目标是生成 consistent，idiomatic 的 JavaScript 代码）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BankAccount = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">BankAccount</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    BankAccount.prototype.deposit = <span class="function"><span class="keyword">function</span>(<span class="params">credit</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="keyword">return</span> BankAccount;  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>OK，回过头看 <code>class BankAccount</code>，它做了：</p>
<ul>
<li>creates a variable named ‘BankAccount’</li>
<li>whose value is the constructor function for ‘BankAccount’ instances.</li>
<li>also creates an instance type of the same name. </li>
</ul>
<p>关于 instance type，如果用接口可以这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface BankAccount &#123;  </span><br><span class="line">    balance: number;  </span><br><span class="line">    deposit(credit: number): number;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we were to write out the function type declaration for the ‘BankAccount’ constructor variable, it would have the following form.</p>
<p>即，这是关于第一点，BankAccount 的值是一个 constructor 函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BankAccount: <span class="keyword">new</span>() =&gt; BankAccount;</span><br></pre></td></tr></table></figure>
<p>The function signature is prefixed with the keyword ‘new’ indicating that the ‘BankAccount’ function must be called as a constructor. It is possible for a function’s type to have both call and constructor signatures. For example, the type of the built-in JavaScript Date object includes both kinds of signatures.</p>
<p>在 constructor 里做些初始化：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    balance: number;  </span><br><span class="line">    constructor(initially: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance = initially;  </span><br><span class="line">    &#125;  </span><br><span class="line">    deposit(credit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简化版本：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    constructor(public balance: number) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    deposit(credit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance += credit;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The ‘public’ keyword denotes that the constructor parameter is to be retained as a field. </p>
<p>Public is the default accessibility for class members, but a programmer can also specify private or protected accessibility for a class member.</p>
<p>Section 8 provides additional information about classes.</p>
<p>继承。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckingAccount</span> <span class="keyword">extends</span> <span class="title">BankAccount</span> </span>&#123;  </span><br><span class="line">    constructor(balance: number) &#123;  </span><br><span class="line">        <span class="keyword">super</span>(balance);  </span><br><span class="line">    &#125;  </span><br><span class="line">    writeCheck(debit: number) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.balance -= debit;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的核心代码： In the emitted JavaScript code, the prototype of ‘CheckingAccount’ will chain to the prototype of ‘BankAccount’.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__extends(CheckingAccount, _super);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || <span class="function"><span class="keyword">function</span>(<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b)</span><br><span class="line">        <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>更多：</p>
<p>Since instance member variable initializers are equivalent to assignments to properties of this in the constructor, the example</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;  </span><br><span class="line">    public name: string;  </span><br><span class="line">    public address: string;  </span><br><span class="line">    public retired = <span class="literal">false</span>;  </span><br><span class="line">    public manager: Employee = <span class="literal">null</span>;  </span><br><span class="line">    public reports: Employee[] = [];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等价：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;  </span><br><span class="line">    public name: string;  </span><br><span class="line">    public address: string;  </span><br><span class="line">    public retired: boolean;  </span><br><span class="line">    public manager: Employee;  </span><br><span class="line">    public reports: Employee[];  </span><br><span class="line">    constructor() &#123;  </span><br><span class="line">        <span class="keyword">this</span>.retired = <span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">this</span>.manager = <span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">this</span>.reports = [];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多的见 <a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#8" target="_blank" rel="external">Classes</a></p>
<p>namespace：</p>
<h2 id="1-10_Namespaces"><a href="#1-10_Namespaces" class="headerlink" title="1.10 Namespaces"></a>1.10 Namespaces</h2><p>产生背景：</p>
<p>TypeScript enforces encapsulation of implementation in classes at design time (by restricting use of private and protected members), but cannot enforce encapsulation at runtime because all object properties are accessible at runtime. </p>
<p>JavaScript 怎么做到：</p>
<p>In JavaScript, a very common way to enforce encapsulation at runtime is to use the module pattern: encapsulate private fields and methods using closure variables.</p>
<p>其他好处：</p>
<p>The module pattern can also provide the ability to introduce namespaces, avoiding use of the global namespace for most software components.</p>
<p>在 JavaScript 是这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> key = generateSecretKey();  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">message</span>) </span>&#123;  </span><br><span class="line">        sendSecureMessage(message, key);  </span><br><span class="line">    &#125;  </span><br><span class="line">    exports.sendMessage = sendMessage;  </span><br><span class="line">&#125;)(MessageModule);</span><br></pre></td></tr></table></figure>
<p>在 TypeScript 这么做 </p>
<p>TypeScript namespaces provide a mechanism for succinctly expressing the module pattern. In TypeScript, programmers can combine the module pattern with the class pattern by nesting namespaces and classes within an outer namespace.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace M &#123;  </span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"hello"</span>;  </span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">M.f();  </span><br><span class="line">M.s;  <span class="comment">// Error, s is not exported</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>本身，JavaScript practice has two very common design patterns: the module pattern and the class pattern.</p>
<p>简单来说，Roughly speaking, the m]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript Spec Version 1.8 - Ambient Declarations (Object Types)]]></title>
    <link href="http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8/"/>
    <id>http://shane.hsi.rocks/2016/02/26/TypeScript-Spec-Version-1-8/</id>
    <published>2016-02-25T23:32:36.000Z</published>
    <updated>2016-02-27T01:26:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Ambient_Declaration"><a href="#Ambient_Declaration" class="headerlink" title="Ambient Declaration"></a>Ambient Declaration</h2><p><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#11-ambient-declarations" target="_blank" rel="external">Ambient Declaration</a></p>
<p>An ambient declaration introduces a variable into a TypeScript scope, but has zero impact on the emitted JavaScript program. </p>
<p>引入一个变量，仅在 TypeScript 范围，不会生成 JavaScript 代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">var</span> <span class="built_in">document</span>;  </span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">"Hello"</span></span><br></pre></td></tr></table></figure>
<p>Section 1.3 provides a more extensive example of how a programmer can add type information for jQuery and other libraries.</p>
<h2 id="Object_Types"><a href="#Object_Types" class="headerlink" title="Object Types"></a>Object Types</h2><p><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#1.3" target="_blank" rel="external">1.3 Object Types</a></p>
<p>TypeScript programmers use object types to declare their expectations of object behavior. </p>
<p>适用 object types 声明对象的行为。</p>
<p>主要接着 ambient declaration，对 jQuery 的声明。</p>
<p>先了解下 object tyeps：</p>
<h3 id="object_type_literal"><a href="#object_type_literal" class="headerlink" title="object type literal"></a>object type literal</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MakePoint: () =&gt; &#123;  </span><br><span class="line">    x: number; y: number;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Friend &#123;  </span><br><span class="line">    name: string;  </span><br><span class="line">    favoriteColor?: string;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">friend: Friend</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> name = friend.name;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(&#123; name: <span class="string">"Fred"</span> &#125;);  <span class="comment">// Ok  </span></span><br><span class="line">add(&#123; favoriteColor: <span class="string">"blue"</span> &#125;);  <span class="comment">// Error, name required  </span></span><br><span class="line">add(&#123; name: <span class="string">"Jill"</span>, favoriteColor: <span class="string">"green"</span> &#125;);  <span class="comment">// Ok</span></span><br></pre></td></tr></table></figure>
<h3 id="jQuery_Ambient_Declaration"><a href="#jQuery_Ambient_Declaration" class="headerlink" title="jQuery Ambient Declaration"></a>jQuery Ambient Declaration</h3><p>结果：</p>
<ul>
<li><code>$</code> 有 methods，fields</li>
<li><code>$</code> 本身也是 function</li>
<li><code>$</code> 作为 function 还可以被 overload</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface JQuery &#123;  </span><br><span class="line">    text(content: string);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">interface JQueryStatic &#123;  </span><br><span class="line">    get(url: string, callback: (data: string) =&gt; any);     </span><br><span class="line">    (query: string): JQuery;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">var</span> $: JQueryStatic;</span><br><span class="line"></span><br><span class="line">$.get(<span class="string">"http://mysite.org/divContent"</span>,  </span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">data: string</span>) </span>&#123;  </span><br><span class="line">          $(<span class="string">"div"</span>).text(data);  </span><br><span class="line">      &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>The ‘JQueryStatic’ interface references another interface: ‘JQuery’. </p>
<p>Finally, the ‘JQueryStatic’ interface contains a bare function signature</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(query: string): JQuery;</span><br></pre></td></tr></table></figure>
<p>The bare signature indicates that instances of the interface are callable. 接口的实例是可以被调用的。</p>
<p>This example illustrates that TypeScript function types are just special cases of TypeScript object types. Specifically, function types are object types that contain one or more call signatures. Function types 是 object types 的一种，即包含一个以上的 call signature。</p>
<p>Function types 也可以用 literal 表示。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f: &#123; (): string; &#125;;  </span><br><span class="line"><span class="keyword">var</span> sameType: () =&gt; string = f;     <span class="comment">// Ok  </span></span><br><span class="line"><span class="keyword">var</span> nope: () =&gt; number = sameType;  <span class="comment">// Error: type mismatch</span></span><br></pre></td></tr></table></figure>
<p>重载。To specify multiple behaviors, TypeScript supports overloading of function signatures in object types. </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface JQueryStatic &#123;  </span><br><span class="line">    get(url: string, callback: (data: string) =&gt; any);     </span><br><span class="line">    (query: string): JQuery;</span><br><span class="line">    (ready: () =&gt; any): any; <span class="comment">// overload</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Ambient_Declaration"><a href="#Ambient_Declaration" class="headerlink" title="Ambient Declaration"></a>Ambient Declaration</h2><p><a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Alternative to iFrames with HTML5]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Alternative-to-iFrames-with-HTML5/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Alternative-to-iFrames-with-HTML5/</id>
    <published>2016-02-25T11:31:54.000Z</published>
    <updated>2016-02-25T11:33:26.000Z</updated>
    <content type="html"><![CDATA[<p>不知道 Facebook 一个页面是怎么放多个团队的页面的。</p>
<p>可以找时间思考下。</p>
<p>参考下：<a href="http://stackoverflow.com/questions/8702704/alternative-to-iframes-with-html5" target="_blank" rel="external">Alternative to iFrames with HTML5</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不知道 Facebook 一个页面是怎么放多个团队的页面的。</p>
<p>可以找时间思考下。</p>
<p>参考下：<a href="http://stackoverflow.com/questions/8702704/alternative-to-iframes-wit]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[再读 TypeScript Handbook 2016年02月25日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Read-Again-The-TypeScript-Handbook-2016-02-25/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Read-Again-The-TypeScript-Handbook-2016-02-25/</id>
    <published>2016-02-25T09:30:23.000Z</published>
    <updated>2016-02-26T00:21:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Basic_Types"><a href="#Basic_Types" class="headerlink" title="Basic Types"></a>Basic Types</h2><p>Array</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list:number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list:<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>Function Types</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">  (source: string, subString: string): boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Array Types - Array types have an ‘index’ type that describes the types allowed to index the object, along with the corresponding return type for accessing the index.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface StringArray &#123;</span><br><span class="line">  [index: number]: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br></pre></td></tr></table></figure>
<p>There are two types of supported index types: string and number. It is possible to support both types of index, with the restriction that the type returned from the numeric index must be a subtype of the type returned from the string index.</p>
<p>While index signatures are a powerful way to describe the array and ‘dictionary’ pattern, they also enforce that all properties match their return type. In this example, the property does not match the more general index, and the type-checker gives an error:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Dictionary &#123;</span><br><span class="line">  [index: string]: string;</span><br><span class="line">  length: number;    <span class="comment">// error, the type of 'length' is not a subtype of the indexer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Class Types - Implementing an interface</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span>  </span>&#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor(h: number, m: number) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    private name:string;</span><br><span class="line">    constructor(theName: string) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    move(meters: number) &#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">" moved "</span> + meters + <span class="string">"m."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Parameter properties - 对上的简化写法，The properties let you can create and initialize a member in one step.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    constructor(private name: string) &#123; &#125;</span><br><span class="line">    move(meters: number) &#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">" moved "</span> + meters + <span class="string">"m."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Accessors - TypeScript supports getters/setters as a way of intercepting accesses to a member of an object.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passcode = <span class="string">"secret passcode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    private _fullName: string;</span><br><span class="line"></span><br><span class="line">    get fullName(): string &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    set fullName(newName: string) &#123;</span><br><span class="line">        <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"secret passcode"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Basic_Types"><a href="#Basic_Types" class="headerlink" title="Basic Types"></a>Basic Types</h2><p>Array</p>
<figure class="highlight]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 的一些高级语法和使用场景]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Some-Advanced-Syntax-in-TypeScript/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Some-Advanced-Syntax-in-TypeScript/</id>
    <published>2016-02-25T08:49:34.000Z</published>
    <updated>2016-02-25T09:29:31.000Z</updated>
    <content type="html"><![CDATA[<p>直接从 <a href="https://github.com/Microsoft/TypeScript/" target="_blank" rel="external">Microsoft/TypeScript</a> 和 <a href="https://github.com/angular/angular" target="_blank" rel="external">angular</a> 找。也会从 RxJS 中找。</p>
<h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namespace ts.formatting &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface TextRange &#123;</span><br><span class="line">    pos: number;</span><br><span class="line">    end: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface TextRangeWithKind extends TextRange &#123;</span><br><span class="line">    kind: SyntaxKind;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="generics__u548C_u58F0_u660E"><a href="#generics__u548C_u58F0_u660E" class="headerlink" title="generics 和声明"></a>generics 和声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="built_in">Map</span>&lt;T&gt; &#123;</span><br><span class="line">    [index: string]: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<code>[index: string]</code> 这种声明 Dictionary 的方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface SymbolTable &#123;</span><br><span class="line">    [index: string]: <span class="built_in">Symbol</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u9AD8_u7EA7_u7C7B_u578B"><a href="#u9AD8_u7EA7_u7C7B_u578B" class="headerlink" title="高级类型"></a>高级类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type Path = string &amp; &#123; __pathBrand: any &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="enums"><a href="#enums" class="headerlink" title="enums"></a>enums</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum NodeFlags &#123;</span><br><span class="line">    None =               <span class="number">0</span>,</span><br><span class="line">    Export =             <span class="number">1</span> &lt;&lt; <span class="number">0</span>,  <span class="comment">// Declarations</span></span><br><span class="line">    Ambient =            <span class="number">1</span> &lt;&lt; <span class="number">1</span>,  <span class="comment">// Declarations</span></span><br><span class="line">    Public =             <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// Property/Method</span></span><br><span class="line">    Private =            <span class="number">1</span> &lt;&lt; <span class="number">3</span>,  <span class="comment">// Property/Method</span></span><br><span class="line">    Protected =          <span class="number">1</span> &lt;&lt; <span class="number">4</span>,  <span class="comment">// Property/Method</span></span><br><span class="line"></span><br><span class="line">    Modifier = Export | Ambient | Public | Private | Protected | Static | Abstract | Default | Async,</span><br><span class="line">    AccessibilityModifier = Public | Private | Protected,</span><br><span class="line">    BlockScoped = Let | Const,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和不加 <code>const</code> 的区别：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> enum ExitStatus &#123;</span><br><span class="line">    Success = <span class="number">0</span>,</span><br><span class="line">    DiagnosticsPresent_OutputsSkipped = <span class="number">1</span>,</span><br><span class="line">    DiagnosticsPresent_OutputsGenerated = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type EntityName = Identifier | QualifiedName;</span><br></pre></td></tr></table></figure>
<h2 id="u7B2C_u4E00_u770B_u5230_toString"><a href="#u7B2C_u4E00_u770B_u5230_toString" class="headerlink" title="第一看到 toString"></a>第一看到 toString</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path='references.ts' /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @internal */</span></span><br><span class="line">namespace ts.formatting &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule</span> </span>&#123;</span><br><span class="line">        constructor(</span><br><span class="line">            public Descriptor: RuleDescriptor,</span><br><span class="line">            public Operation: RuleOperation,</span><br><span class="line">            public Flag: RuleFlags = RuleFlags.None) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public toString() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"[desc="</span> + <span class="keyword">this</span>.Descriptor + <span class="string">","</span> +</span><br><span class="line">                <span class="string">"operation="</span> + <span class="keyword">this</span>.Operation + <span class="string">","</span> +</span><br><span class="line">                <span class="string">"flag="</span> + <span class="keyword">this</span>.Flag + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">CoreOperators</span>&lt;<span class="title">T</span>&gt;  </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>直接从 <a href="https://github.com/Microsoft/TypeScript/" target="_blank" rel="external">Microsoft/TypeScript</a> 和 <a href="https://github.]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[准备学习 TypeScript 语法帮助理解 React 接口]]></title>
    <link href="http://shane.hsi.rocks/2016/02/25/Prepare-to-Know-TypeScript-and-React-Interface/"/>
    <id>http://shane.hsi.rocks/2016/02/25/Prepare-to-Know-TypeScript-and-React-Interface/</id>
    <published>2016-02-25T00:16:20.000Z</published>
    <updated>2016-02-25T00:26:23.000Z</updated>
    <content type="html"><![CDATA[<p>题外话，或者说是引子。因为 React 我对前端和程序产生了扩散性的兴趣，具体不在此言。尝试阅读 React 源码也有 2 次，从不同的角度。效率和方法上都不会完美，不过每次都有收获，不断扩充对前端的认识。</p>
<p>这次我希望了解 React 的 interface。ES6 才引入 class 的概念，让我一个从 C#/Java 后台开发者开发 JavaScript 开始有设计感（沿用后台语言开发的思维）。</p>
<blockquote>
<p>当然，ES5 以及去年函数式编程的推广也让我摄入了些非 OO 的知识。不过，我对 lambda 表达式肯定没有 OO 熟练。所以函数式上，我目前只会编写些 utility 来处理 Collection。让可读性增强。</p>
</blockquote>
<p>这次我是第 3 次尝试阅读 React 源码。并使用 TypeScript 写 interface，第一步不具体实现。</p>
<p>我希望能够学习 TypeScript 的语法和摸清 React 的设计架构。</p>
<p>TypeScript 语法我准备参照目前最火的 TypeScript 开源项目：<a href="https://github.com/Microsoft/TypeScript/" target="_blank" rel="external">Microsoft/TypeScript</a> 和 <a href="https://github.com/angular/angular" target="_blank" rel="external">angular</a>。前者历时更长，后者更新。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>题外话，或者说是引子。因为 React 我对前端和程序产生了扩散性的兴趣，具体不在此言。尝试阅读 React 源码也有 2 次，从不同的角度。效率和方法上都不会完美，不过每次都有收获，不断扩充对前端的认识。</p>
<p>这次我希望了解 React 的 interface。]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 知识点 2016年02月24日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/24/Java-Knowledge-Points-20160224/"/>
    <id>http://shane.hsi.rocks/2016/02/24/Java-Knowledge-Points-20160224/</id>
    <published>2016-02-24T03:30:33.000Z</published>
    <updated>2016-02-24T06:29:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="MethodInvokingFactoryBean"><a href="#MethodInvokingFactoryBean" class="headerlink" title="MethodInvokingFactoryBean"></a>MethodInvokingFactoryBean</h2><p>从配置文件开始看。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mnsInvokerBean"</span> <span class="attribute">class</span>=<span class="value">"com.*.*.MnsInvoker"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span> <span class="attribute">ref</span>=<span class="value">"mnsInvokerBean"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>registerHttpService<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"arguments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;tesla_appkey&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;jetty.port&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>主要是这个 <code>MethodInvokingFactoryBean</code>。</p>
<p>参考：<a href="http://blog.csdn.net/kongxx/article/details/6011441" target="_blank" rel="external">Spring实战之org.springframework.beans.factory.config.MethodInvokingFactoryBean</a>。</p>
<p>讲解的很直观。</p>
<p>在用spring管理我们的类的时候有时候希望有些属性值是</p>
<ul>
<li>来源于一些配置文件，</li>
<li>系统属性，</li>
<li>或者一些方法调用的结果</li>
</ul>
<p>对于前两种使用方式可以使用spring的PropertyPlaceholderConfigurer类来注入，对于后一种则可以使用org.springframework.beans.factory.config.MethodInvokingFactoryBean类来生成需要注入的bean的属性。</p>
<p>通过MethodInvokingFactory Bean类，可注入方法返回值。 MethodInvokingFactoryBean用来 <strong>获得某个方法的返回值</strong>，该方法既可以是静态方法，也可以是实例方法。该方法的返回值 <strong>可以注入bean实例属性</strong>，<strong>也可以直接定义成bean实例</strong>。</p>
<p>另参考：<a href="http://blog.sina.com.cn/s/blog_72ef7bea0102wa0v.html" target="_blank" rel="external">Spring Boot Hello MethodInvokingFactoryBean and MethodInvokingBean</a>。</p>
<h2 id="bean__u914D_u7F6E_u4E4B_init-method__u548C_lazy-init_u3002"><a href="#bean__u914D_u7F6E_u4E4B_init-method__u548C_lazy-init_u3002" class="headerlink" title="bean 配置之 init-method 和 lazy-init。"></a>bean 配置之 init-method 和 lazy-init。</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mtConfigClient"</span> <span class="attribute">class</span>=<span class="value">"com.*.*.config.MtConfigClient"</span> <span class="attribute">init-method</span>=<span class="value">"init"</span> <span class="attribute">lazy-init</span>=<span class="value">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关于 <code>init-method</code> 和 <code>lazy-init</code>。</p>
<p>其中关于 <code>init-method</code>，涉及到的概念是 <a href="http://sexycoding.iteye.com/blog/1046775" target="_blank" rel="external">Spring bean 的生命周期</a>。Spring 允许 Bean 在初始化完成后以及销毁前执行特定的操作。</p>
<p>常用的三种指定特定操作的方法：</p>
<ul>
<li>通过实现InitializingBean/DisposableBean 接口来定制初始化之后/销毁之前的操作方法；</li>
<li>通过 <bean> 元素的 init-method/destroy-method属性指定初始化之后 /销毁之前调用的操作方法；</bean></li>
<li>在指定方法上加上@PostConstruct或@PreDestroy注解来制定该方法是在初始化之后还是销毁之前调用。</li>
</ul>
<p>这几种方法的先后顺序为（参考：<a href="http://blog.csdn.net/caihaijiang/article/details/8629725" target="_blank" rel="external">Spring容器中的Bean几种初始化方法和销毁方法的先后顺序</a>)：</p>
<p><strong>Bean在实例化的过程中：Constructor &gt; @PostConstruct &gt;InitializingBean &gt; init-method</strong></p>
<p><strong>Bean在销毁的过程中：@PreDestroy &gt; DisposableBean &gt; destroy-method</strong></p>
<p>其中关于 <code>lazy-init</code>，默认是 false。可以在 applicationContext.xml 里配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span> &gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span> =<span class="value">"org.xxxx.bean"</span> &gt;</span>   </span><br><span class="line">      ......</span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个应该只在开发环境中可以使用。</p>
<blockquote>
<p>ApplicationContext实现的默认行为就是在启动时将所有singleton bean提前进行实例化。提前实例化意味着作为初始化过程的一部分，ApplicationContext实例会创建并配置所有的singleton bean。通常情况下这是件好事，因为这样在配置中的任何错误就会即刻被发现（否则的话可能要花几个小时甚至几天）。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="MethodInvokingFactoryBean"><a href="#MethodInvokingFactoryBean" class="headerlink" title="MethodInvokingFactoryBean"></a>MethodInvok]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读一些 Tweet 2016年02月24日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/"/>
    <id>http://shane.hsi.rocks/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/</id>
    <published>2016-02-24T02:53:55.000Z</published>
    <updated>2016-02-24T03:24:27.000Z</updated>
    <content type="html"><![CDATA[<p>主要是 React Conf 2016 刚刚结束，视频还没有上传到 Youtube，先看看 Twitter 上的更新。</p>
<p>react-armor，virtual-dom 和 真是 dom 之间的一些同步保证。Utility。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_171.png" alt="Snip20160224_171.png" title="">
<hr>
<p>和之前在 Why I No Longer Use MVC Frameworks 看到的公式写法类似。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_173.png" alt="Snip20160224_173.png" title="">
<hr>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_174.png" alt="Snip20160224_174.png" title="">
<hr>
<p>Pete Hunt 对最近 MVC 的一个讨论。<a href="https://twitter.com/floydophone/status/702236018687086592" target="_blank" rel="external">View conversation</a>。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_176.png" alt="Snip20160224_176.png" title="">
<hr>
<p>gl-react，文档很全。<a href="https://projectseptemberinc.gitbooks.io/gl-react/content/index.html" target="_blank" rel="external">gl-react</a>。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_177.png" alt="Snip20160224_177.png" title="">
<hr>
<p>有一个 UI Shell 的概念。可以模拟 Service Worker 实现。</p>
<img src="/2016/02/24/Do-Some-Tweet-Reading-2016-02-24/Snip20160224_178.png" alt="Snip20160224_178.png" title="">
]]></content>
    <summary type="html">
    <![CDATA[<p>主要是 React Conf 2016 刚刚结束，视频还没有上传到 Youtube，先看看 Twitter 上的更新。</p>
<p>react-armor，virtual-dom 和 真是 dom 之间的一些同步保证。Utility。</p>
<img src="/201]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[时间管理知乎话题下的问答的学习]]></title>
    <link href="http://shane.hsi.rocks/2016/02/23/Time-Management-Reading-from-Zhihu/"/>
    <id>http://shane.hsi.rocks/2016/02/23/Time-Management-Reading-from-Zhihu/</id>
    <published>2016-02-23T14:00:33.000Z</published>
    <updated>2016-02-24T01:44:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F"><a href="#u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F" class="headerlink" title="如何长时间高效学习？"></a><a href="https://www.zhihu.com/question/28358499" target="_blank" rel="external">如何长时间高效学习？</a></h1><p>题干：</p>
<p>需要长时间学习，但经常时间还有（才到下午六七点）但精力已经没了，感觉很疲惫，无法集中精力有效思考，不停走神。饮食还算健康，睡眠基本能保持7小时。现状是保持自己的生活（跑步，爬山，逛街，跟朋友玩等等）就必然完不成学习任务，要坚持完成任务生活就只剩下吃饭睡觉，因为效率很低。<br>很多朋友谈高考的学习方法，但作为成年人没法像高中生一样有纯粹的学习环境，没法一门心思只学习。很多杂事要处理，比如车，房子，找工作，签证，必要的社交等等。<br>另外，不带手机也不现实，在等 offer，随时会有电话打来不想漏接…谢谢大家！</p>
<blockquote>
<p>跑步 - 准备购买下运动时穿的衣服。</p>
</blockquote>
<h2 id="u56DE_u7B541_uFF1A"><a href="#u56DE_u7B541_uFF1A" class="headerlink" title="回答1："></a>回答1：</h2><p><a href="https://www.zhihu.com/question/28358499/answer/43002343" target="_blank" rel="external">https://www.zhihu.com/question/28358499/answer/43002343</a></p>
<p>首先不能通过高中的学习方式：</p>
<blockquote>
<p>高中的学习呢，简单地讲就是重复重复重复，就那么些知识点，反反复复练三年，其实收获甚微，而且，高中时外界干扰不多，可以专心学习。</p>
</blockquote>
<p>但是，至少表明，有些基础知识点，是需要不断反反复复联系很久（半年，一年）。</p>
<blockquote>
<p>对于题主所说的长时间，是不是可以理解成需要一些好的学习习惯，就把之前在Coursera看到的一些和大家分享，希望对看到的人有所帮助，并感谢vancexu</p>
</blockquote>
<p><a href="https://link.zhihu.com/?target=https%3A//www.coursera.org/learn/learning-how-to-learn/outline" target="_blank" rel="external">Learning How to Learn: Powerful mental tools to help you master tough subjects</a>是UCSD开的一门课。</p>
<p>1.1 专注模式和发散模式</p>
<p>大脑很复杂，了解一些关于大脑的工作原理可以让我们更好地学习，减少困惑。</p>
<p><strong>专注模式 (Focused mode) 和发散模式 (Diffuse mode)</strong>。</p>
<p><strong>专注模式</strong>，集中精力学习或理解某事，局部的神经链接激活状态，利于解决实际问题。</p>
<p>比方说你熟悉四则运算，那么解决算数题的时候就主要靠那部分神经出力。</p>
<p><strong>发散模式</strong>，人脑放松，神经信号脑内大面积移动，利于发挥创造性。</p>
<p>比方说你洗澡的时候突然想到一个久攻不破的问题的解决方案。</p>
<p>当你面对熟悉的事物时，一般处于专注模式，而当你需要新想法和办法时，或者你需要从宏观上把握某件事时就切换到发散模式，这两个模式是可以互相切换的，但不能同时进行。可以在紧张的学习新知识的时候通过洗澡、散步等让自己放松的事情主动进入发散模式来帮助加深理解。</p>
<p>大脑是一个昂贵的器官，需要消耗同等体重躯干部分10倍的能量。</p>
<p>1.2 拖延、记忆和睡眠</p>
<p>当你做一件你不想做的事情比如学习时，大脑中和痛苦相关的区域被激活 (insular cortex), 大脑就趋向于将注意力转移到其他不那么痛苦的事情。</p>
<img src="/2016/02/23/Time-Management-Reading-from-Zhihu/ec0707c02e63642b4f969f150e88f576_b.jpg" alt="ec0707c02e63642b4f969f150e88f576_b.jpg" title="">
<p>介绍一个应对拖延症的简单办法：番茄工作法 (Pomodoro)。番茄工作法由Francesco Cirillo发明，听上去很简单：</p>
<blockquote>
<p>个人实践过 番茄工作法，得出一个经验，只有当真正你会焦虑而可能会拖延的事情，才应该使用番茄工作法。否则，认为切断时间碎片反而不开心。</p>
</blockquote>
<p>记忆。</p>
<p>Practice makes permanent.</p>
<p>你需要不断的练习来增强大脑中的连接，形成比较深刻的记忆模式。</p>
<blockquote>
<p>记忆就是要重复，不断重复。</p>
</blockquote>
<p>记忆分为长期记忆 (Lone-term memory) 和工作记忆 (Working memory)。</p>
<p>工作记忆也就是短期记忆，一般认为可以存放4块。</p>
<p>长期记忆的容量很大。</p>
<p>从工作记忆转化到长期记忆需要时间以及不断的重复。</p>
<p>这里提到了一个小技巧：<strong>spaced repetition</strong>, 就是一晚上重复20遍的效果不如你每天重复几遍。</p>
<p><strong>睡眠对学习也十分重要。</strong></p>
<p>我们觉醒时大脑会产生有毒的物质，而睡觉时大脑细胞收缩，细胞间隙变大，脑脊液可以通过并且清理掉这些东西。睡眠的意义不止于此，它也是学习与记忆的重要的一部分。睡眠时大脑会整理你的想法和你学习的内容，不重要的记忆会被清理掉，而你想要记住的会得到加强。睡眠时大脑还可以重复你白天学习的复杂知识，对解决难题和理解知识都有帮助。在睡觉之前看的东西更容易进入你的梦境，而梦到它又有助于你对它的理解，关于睡觉对学习的作用具体可见我的另一个回答：<a href="http://www.zhihu.com/question/28714587/answer/41873436" target="_blank" rel="external">睡眠可以帮助大脑整理白天学过的知识吗？ - 知乎用户的回答</a>。</p>
<p>另外，<strong>锻炼身体</strong> 很重要。除了散步洗澡听音乐等让你放松的方式会帮助你进入发散模式，锻炼身体能让你从之前集中精力的地方解放出来，使得发散模式有机会呈现，锻炼身体对大脑生长新的神经元有益。</p>
<p><strong>隐喻和类比是强大的学习技巧。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F"><a href="#u5982_u4F55_u957F_u65F6_u95F4_u9AD8_u6548_u5B66_u4E60_uFF1F" ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 知识点 2016年02月23日]]></title>
    <link href="http://shane.hsi.rocks/2016/02/23/Java-Knowledge-Points-20160223/"/>
    <id>http://shane.hsi.rocks/2016/02/23/Java-Knowledge-Points-20160223/</id>
    <published>2016-02-23T03:14:01.000Z</published>
    <updated>2016-02-23T13:47:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Jetty__u542F_u52A8_u4EE3_u7801"><a href="#Jetty__u542F_u52A8_u4EE3_u7801" class="headerlink" title="Jetty 启动代码"></a>Jetty 启动代码</h2><h3 id="Bootstrap-java"><a href="#Bootstrap-java" class="headerlink" title="Bootstrap.java"></a>Bootstrap.java</h3><h4 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.*.cfg.Config;</span><br><span class="line"><span class="keyword">import</span> com.*.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bootstrap</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.info(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        initClasspath();</span><br><span class="line">        loadConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()&#123; 配置 logs 地址 &#125; -&gt; logs</span></span><br><span class="line">        String logs = Config.get(<span class="string">"jetty.logs"</span>);</span><br><span class="line">        <span class="keyword">if</span> (logs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> File(<span class="string">"/opt/logs/mobile"</span>).exists()) &#123;</span><br><span class="line">                logs = <span class="string">"/opt/logs/mobile"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logs = <span class="string">"./logs"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">new</span> File(logs).exists()) &#123;</span><br><span class="line">            <span class="keyword">new</span> File(logs).mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()&#123; 配置 webroot &#125; -&gt; void</span></span><br><span class="line">        String webroot = Config.get(<span class="string">"jetty.webroot"</span>);</span><br><span class="line">        <span class="keyword">if</span> (webroot == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> File(<span class="string">"webroot"</span>).exists()) &#123;</span><br><span class="line">                webroot = <span class="string">"./webroot"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">new</span> File(<span class="string">"src/main/webapp"</span>).exists()) &#123;</span><br><span class="line">                webroot = <span class="string">"./src/main/webapp"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                webroot = <span class="string">"."</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Config.set(<span class="string">"jetty.webroot"</span>, webroot);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ()&#123; 配置 context，并作 path normalize &#125; -&gt; void</span></span><br><span class="line">        String context = Config.get(<span class="string">"jetty.context"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((context == <span class="keyword">null</span>) || (context.isEmpty())) &#123;</span><br><span class="line">            context = <span class="string">"/"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context.charAt(<span class="number">0</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">            context = <span class="string">"/"</span> + context;</span><br><span class="line">        &#125;</span><br><span class="line">        Config.set(<span class="string">"jetty.context"</span>, context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ? System.getProperty</span></span><br><span class="line">        Log.info(<span class="string">"user.dir="</span> + System.getProperty(<span class="string">"user.dir"</span>));</span><br><span class="line">        Log.info(<span class="string">"jetty.webroot="</span> + webroot);</span><br><span class="line">        Log.info(<span class="string">"jetty.context="</span> + context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// () &#123; 加载 jetty.xml，或者使用 jetty8.xml &#125; -&gt; jettyConfig</span></span><br><span class="line">        InputStream input = Bootstrap.class.getResourceAsStream(<span class="string">"/jetty/jetty.xml"</span>);</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            input = Bootstrap.class.getResourceAsStream(<span class="string">"/jetty8.xml"</span>);</span><br><span class="line">            Log.info(<span class="string">"Booting with /jetty8.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.info(<span class="string">"Booting with /jetty/jetty.xml"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        XmlConfiguration jettyConfig = <span class="keyword">new</span> XmlConfiguration(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ? XmlConfiguration#configure()</span></span><br><span class="line">        Object server = jettyConfig.configure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ? Pattern.compile</span></span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">"jetty-[\\w]+.xml"</span>);</span><br><span class="line">        <span class="comment">// 数组 aggregate initialization 集初始化 [link](http://book.51cto.com/art/201304/388900.htm)</span></span><br><span class="line">        <span class="comment">// ? WEB-INF/classes/jetty 确认下 classes 目录的生成时间，内容</span></span><br><span class="line">        File[] paths = &#123; <span class="keyword">new</span> File(<span class="string">"src/main/resources/jetty"</span>), <span class="keyword">new</span> File(<span class="string">"src/test/resources/jetty"</span>), <span class="keyword">new</span> File(webroot, <span class="string">"WEB-INF/classes/jetty"</span>) &#125;;</span><br><span class="line">        <span class="keyword">for</span> (File path: paths) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((path.exists()) &amp;&amp; (path.isDirectory())) &#123;</span><br><span class="line">                File[] jettys = path.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// ? this 是什么？</span></span><br><span class="line">                        <span class="comment">// ? this.val$p</span></span><br><span class="line">                        <span class="comment">// ? val$p.matcher().matches()</span></span><br><span class="line">                        <span class="keyword">return</span> (file.isFile()) &amp;&amp; (<span class="keyword">this</span>.val$p.matcher(file.getName()).matches());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// ? 奇怪为什么是 break？不应该是 continue？继续看逻辑</span></span><br><span class="line">                <span class="keyword">if</span> (jettys == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (File jf: jettys) &#123;</span><br><span class="line">                    <span class="comment">// ? File#getName()</span></span><br><span class="line">                    Log.info(<span class="string">"Plusing "</span> + jf.getName());</span><br><span class="line">                    XmlConfiguration cfg = <span class="keyword">new</span> XmlConfiguration(<span class="keyword">new</span> FileInputStream(jf));</span><br><span class="line">                    <span class="comment">// XmlConfiguration.#configure(XmlConfiguration#configure())</span></span><br><span class="line">                    cfg.configure(server);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.info(<span class="string">"\n\n"</span>);</span><br><span class="line">        <span class="comment">// ? Object#getClass().getMethod()</span></span><br><span class="line">        <span class="comment">// ? new Class[0]</span></span><br><span class="line">        <span class="comment">// getMethod().invoke(Object, new Object[0])</span></span><br><span class="line">        server.getClass().getMethod(<span class="string">"start"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(server, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E1A_u52A1_u903B_u8F91"><a href="#u4E1A_u52A1_u903B_u8F91" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">() </span><span class="expression">&#123; </span><br><span class="line">    创建 <span class="variable">logs</span> 目录，</span><br><span class="line"></span><br><span class="line">    配置 <span class="variable">jetty.webroot</span>，<span class="variable">jetty.context</span> 到 <span class="variable">System.setProperty</span>，</span><br><span class="line"></span><br><span class="line">    加载 <span class="variable">jetty.xml</span>，并尝试在 <span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/resources</span><span class="end-block">/jetty</span>，<span class="variable">src</span><span class="end-block">/test</span><span class="end-block">/resources</span><span class="end-block">/jetty</span>，</span><br><span class="line">    $&#123;<span class="variable">webroot</span>&#125;</span><span class="xml">/"WEB-INF/classes/jetty 找 jetty-[\\w]+.xml 文件，</span><br><span class="line">    找到之后会 XmlConfiguration.#configure(server)，</span><br><span class="line">    其中 server 是 jettyConfig.configure()，</span><br><span class="line"></span><br><span class="line">    "start"</span><br><span class="line">&#125; -&gt; void</span></span><br></pre></td></tr></table></figure>
<h3 id="u5176_u4E2D_initClasspath_28_29_3A"><a href="#u5176_u4E2D_initClasspath_28_29_3A" class="headerlink" title="其中 initClasspath():"></a>其中 <code>initClasspath()</code>:</h3><p>注意，感觉这段代码并没有对应用状态产生系统。既没有返回值，也没有 Side Effects。</p>
<h4 id="u4EE3_u7801-1"><a href="#u4EE3_u7801-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ? System#getProperty</span></span><br><span class="line">    <span class="comment">// ? java.class.path</span></span><br><span class="line">    String projectClassPath = System.getProperty(<span class="string">"java.class.path"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// () &#123; 字符串去除 '/jre' &#125; -&gt; javaHome</span></span><br><span class="line">    <span class="comment">// ? java.home</span></span><br><span class="line">    String javaHome = System.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">    <span class="keyword">if</span> (javaHome.endsWith(<span class="string">"/jre"</span>)) &#123;</span><br><span class="line">        javaHome = javaHome.substring(<span class="number">0</span>, javaHome.length() - <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Log.info(<span class="string">"JAVA_HOME="</span> + javaHome);</span><br><span class="line">    Log.info(<span class="string">"CLASSPATH="</span> + projectClassPath);</span><br><span class="line">    <span class="comment">// ProjectClassLoader 是项目代码</span></span><br><span class="line">    List &lt; String &gt; classpaths = ProjectClassLoader.getClasspaths();</span><br><span class="line">    <span class="keyword">boolean</span> logger = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (projectClassPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">        StringBuffer excludedString = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// ? File.pathSeperatorChar</span></span><br><span class="line">        String[] tokens = projectClassPath.split(String.valueOf(File.pathSeparatorChar));</span><br><span class="line">        <span class="keyword">for</span> (String entry: tokens) &#123;</span><br><span class="line">            <span class="comment">// ? String 赋值是 clone？</span></span><br><span class="line">            String path = entry;</span><br><span class="line">            <span class="comment">// 删除 '-y-'，或 '-n-'</span></span><br><span class="line">            <span class="keyword">if</span> ((path.startsWith(<span class="string">"-y-"</span>)) || (path.startsWith(<span class="string">"-n-"</span>))) &#123;</span><br><span class="line">                path = path.substring(<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果开始于 '-n-' 或者 javaHome</span></span><br><span class="line">            <span class="keyword">if</span> ((entry.startsWith(<span class="string">"-n-"</span>)) || (entry.startsWith(javaHome))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger) &#123;</span><br><span class="line">                    excludedString.append((excludedString.length() &gt; <span class="number">0</span> ? <span class="string">"\n"</span> : <span class="string">""</span>) + <span class="string">"Excluded entry="</span> + path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger) &#123;</span><br><span class="line">                    Log.info(<span class="string">"ProjectClassLoader: entry="</span> + path);</span><br><span class="line">                &#125;</span><br><span class="line">                classpaths.add(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.info(excludedString.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E1A_u52A1_u903B_u8F91-1"><a href="#u4E1A_u52A1_u903B_u8F91-1" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">() &#123;</span><br><span class="line">    获得 java.<span class="keyword">class</span>.path -&gt; projectClassPath，和 java.home -&gt; javaHome，</span><br><span class="line">    然后 split projectClassPath，并根据 path 的开头来增加到 classpaths.add(path)</span><br><span class="line">&#125; -&gt; void</span><br></pre></td></tr></table></figure>
<h3 id="u5176_u4E2D_loadConfig__u4EE3_u7801_uFF1A"><a href="#u5176_u4E2D_loadConfig__u4EE3_u7801_uFF1A" class="headerlink" title="其中 loadConfig 代码："></a>其中 <code>loadConfig</code> 代码：</h3><h4 id="u4EE3_u7801-2"><a href="#u4EE3_u7801-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadConfig</span><span class="params">()</span></span><br><span class="line"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// System.getProperties.load()</span></span><br><span class="line">    InputStream input = Bootstrap.class.getResourceAsStream(<span class="string">"/jetty/boot.properties"</span>);</span><br><span class="line">    <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.getProperties().load(input);</span><br><span class="line">        Log.info(<span class="string">"Boot Loaded..."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.info(<span class="string">"No /jetty/boot.properties found to load..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 项目代码</span></span><br><span class="line">    Config.reload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E1A_u52A1_u903B_u8F91-2"><a href="#u4E1A_u52A1_u903B_u8F91-2" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">()</span> &#123;</span><br><span class="line">    拿到 /jetty/boot.properties，并 <span class="type">System</span>.getProperties<span class="literal">()</span>.load<span class="literal">()</span> 进来，</span><br><span class="line"></span><br><span class="line">    <span class="type">Config</span>.reload<span class="literal">()</span></span><br><span class="line">&#125; -&gt; void</span><br></pre></td></tr></table></figure>
<h3 id="u6574_u4F53_u4E1A_u52A1_u903B_u8F91"><a href="#u6574_u4F53_u4E1A_u52A1_u903B_u8F91" class="headerlink" title="整体业务逻辑"></a>整体业务逻辑</h3><ol>
<li>jetty 配置与启动</li>
<li>自定义的初始化 classpath 逻辑</li>
<li>加载 jetty 的 boot 属性配置</li>
</ol>
<h3 id="u6574_u4F53_u9700_u8981_u5B66_u4E60_u7684_u77E5_u8BC6_u70B9"><a href="#u6574_u4F53_u9700_u8981_u5B66_u4E60_u7684_u77E5_u8BC6_u70B9" class="headerlink" title="整体需要学习的知识点"></a>整体需要学习的知识点</h3><h4 id="System-getProperty_28_29"><a href="#System-getProperty_28_29" class="headerlink" title="System.getProperty()"></a><code>System.getProperty()</code></h4><p><code>System.getProperty()</code>，参考链接 <a href="http://www.cnblogs.com/sigh-differ/archive/2012/12/25/java-system-getproperty.html" target="_blank" rel="external">Java 中System里getProperty 方法获得系统参数</a></p>
<h4 id="org-eclipse-jetty-xml-XmlConfiguration"><a href="#org-eclipse-jetty-xml-XmlConfiguration" class="headerlink" title="org.eclipse.jetty.xml.XmlConfiguration"></a><code>org.eclipse.jetty.xml.XmlConfiguration</code></h4><p><code>configure()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object server = jettyConfig.configure();</span><br><span class="line"></span><br><span class="line">XmlConfiguration cfg = <span class="keyword">new</span> XmlConfiguration(<span class="keyword">new</span> FileInputStream(jf));</span><br><span class="line">cfg.configure(server);</span><br><span class="line"></span><br><span class="line">server.getClass().getMethod(<span class="string">"start"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(server, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="http://www.blogjava.net/DLevin/archive/2014/05/24/414061.html" target="_blank" rel="external">深入Jetty源码之XmlConfiguration实现</a></p>
<blockquote>
<p>XmlConfiguration可以使用一个XML文件初始化一个Object实例，它支持属性设置、方法调用、新建新实例等</p>
<p>可以使用带Object实例的参数或不带参数两种方式调用configure方法，带参数表示将XML中内容配置实例中的属性，不带参数则先在内部创建class属性指定的类实例，然后使用XML的内容配置该新创建的实例的属性。</p>
</blockquote>
<h4 id="System-getProperties_28_29-load_28_29"><a href="#System-getProperties_28_29-load_28_29" class="headerlink" title="System.getProperties().load()"></a><code>System.getProperties().load()</code></h4><p>使用Properties的load方法，将这个文件先加载进来，之后可以使用getProperty方法将对应键的值得到。</p>
<h2 id="u5176_u4ED6_u77E5_u8BC6_u70B9"><a href="#u5176_u4ED6_u77E5_u8BC6_u70B9" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="spring__u914D_u7F6E"><a href="#spring__u914D_u7F6E" class="headerlink" title="spring 配置"></a>spring 配置</h3><h4 id="PropertyPlaceholderConfigurer"><a href="#PropertyPlaceholderConfigurer" class="headerlink" title="PropertyPlaceholderConfigurer"></a>PropertyPlaceholderConfigurer</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"propertyConfigurer"</span> </span><br><span class="line">        <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath:*-common-config.properties<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath:*-custom-config.properties<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="http://blog.csdn.net/zh417/article/details/1728874" target="_blank" rel="external">浅析Spring框架下PropertyPlaceholderConfigurer类</a></p>
<blockquote>
<p>首先要弄清楚一个概念：bean factory post-processor。<br>A bean factory post-processor is a java class which implements the<br>org.springframework.beans.factory.config.BeanFactoryPostProcessor interface. It is executed manually  (in the case of the BeanFactory) or automatically (in the case of the ApplicationContext) to apply changes of some sort to an entire BeanFactory, after it has been constructed.</p>
<ol>
<li>首先bean factory post-processor实现了org.springframework.beans.factory.config.BeanFactoryPostProcessor接口。</li>
<li>在BeanFactory的情况下它被手动的执行。</li>
<li>在ApplicationContext的条件下它会自动的执行。</li>
<li>最关键的一点是，是在一个类的实例被构造出来之后，对整个BeanFactory进行修改。</li>
</ol>
</blockquote>
<p>那么PropertyPlaceholderConfigurer类就是bean factory post-processor的一种，它的作用是一个资源属性的配置器，能够将BeanFactory的里定义的内容放在一个以.propertis后缀的文件中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClassName"</span>&gt;</span><span class="tag">&lt;<span class="title">value</span>&gt;</span>$&#123;driver&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span>&gt;</span><span class="tag">&lt;<span class="title">value</span>&gt;</span>jdbc:$&#123;dbname&#125;<span class="tag">&lt;/<span class="title">value</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>而 jdbc.propertis：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=org.hsqldb.jdbcDriver</span><br><span class="line">jdbc.url=<span class="string">jdbc:</span><span class="string">hsqldb:</span><span class="string">hsql:</span><span class="comment">//production:9002</span></span><br><span class="line">jdbc.username=sa</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure>
<p>引用就是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"propertyConfigurer"</span>  <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">value</span>&gt;</span>/WEB-INF/jdbc.properties<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将上边一段配置注册在web.xml中就可以了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>/WEB-INF/spring-context.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，不要忘了spring的监听器注册：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。来源：<a href="http://blog.csdn.net/ysughw/article/details/8992322" target="_blank" rel="external">ContextLoaderListener作用详解</a>。</p>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><h4 id="WEB-INF"><a href="#WEB-INF" class="headerlink" title="WEB-INF"></a>WEB-INF</h4><p>WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。来源：<a href="http://baike.baidu.com/link?url=lXauen8uR9fVVAOBticfuWrBNz0s65cto_raI_B9ugUUB0uCuEENR3_rjApc2LeEcTkynqrphIEHOwN9e3xTlq" target="_blank" rel="external">web-inf</a>。</p>
<h4 id="web-xml__u8BE6_u89E3"><a href="#web-xml__u8BE6_u89E3" class="headerlink" title="web.xml 详解"></a>web.xml 详解</h4><h5 id="u52A0_u8F7D_u987A_u5E8F"><a href="#u52A0_u8F7D_u987A_u5E8F" class="headerlink" title="加载顺序"></a>加载顺序</h5><p>参考：<a href="http://www.cnblogs.com/hellojava/archive/2012/12/28/2835730.html" target="_blank" rel="external">web.xml文件详解</a></p>
<p>web.xml主要用来配置 Filter、Listener、Servlet 等。</p>
<p>WEB容器的加载顺序是： ServletContext -&gt; context-param -&gt; listener -&gt; filter -&gt; servlet。并且这些元素可以配置在文件中的任意位置。</p>
<p>加载过程顺序如下：</p>
<ol>
<li>启动一个 WEB 项目的时候，WEB 容器会去读取它的配置文件 web.xml，读取 <listener> 和 <context-param> 两个结点。 </context-param></listener></li>
<li>紧接着，容创建一个 ServletContext（servlet上下文），这个web项目的所有部分都将共享这个上下文。 </li>
<li>容器将 <context-param> 转换为键值对，并交给servletContext。 </context-param></li>
<li>容器创建 <listener> 中的类实例，创建监听器。 </listener></li>
</ol>
<blockquote>
<p>所以，是现有 ServletContext，然后将 context-param 交给 ServletContext，然后创建 listener 实例</p>
</blockquote>
<h5 id="u6587_u4EF6_u5143_u7D20_u8BE6_u89E3"><a href="#u6587_u4EF6_u5143_u7D20_u8BE6_u89E3" class="headerlink" title="文件元素详解"></a>文件元素详解</h5><p><strong>1.</strong> schema</p>
<p><strong>2.</strong> <display-name> Web应用名称</display-name></p>
<p>提供GUI工具可能会用来标记这个特定的Web应用的一个名称</p>
<p><strong>3.</strong> <context-param>上下文参数</context-param></p>
<p>声明应用范围内的初始化参数。它用于向 ServletContext提供键值对，即应用程序上下文信息。我们的listener, filter等在初始化时会用到这些上下文中的信息。在servlet里面可以通过getServletContext().getInitParameter(“context/param”)得到。</p>
<p><strong>4.</strong> <filter>过滤器</filter></p>
<p><strong>5.</strong> <listener>监听器</listener></p>
<p><strong>6.</strong> <servlet></servlet></p>
<p><servlet></servlet> 用来声明一个servlet的数据，主要有以下子元素：</p>
<ul>
<li><servlet-name></servlet-name> 指定servlet的名称</li>
<li><servlet-class></servlet-class> 指定servlet的类名称</li>
<li><init-param></init-param> 用来定义参数，可有多个init-param。在servlet类中通过getInitParamenter(String name)方法访问初始化参数</li>
<li><load-on-startup></load-on-startup>指定当Web应用启动时，装载Servlet的次序。当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet。当值为负或未定义：Servlet容器将在Web客户首次访问这个servlet时加载它。</li>
</ul>
<p><servlet-mapping></servlet-mapping> 用来定义servlet所对应的URL，包含两个子元素</p>
<ul>
<li><servlet-name></servlet-name> 指定servlet的名称</li>
<li><url-pattern></url-pattern> 指定servlet所对应的URL</li>
</ul>
<p>其他参考文章：<a href="http://zhxing.iteye.com/blog/399668" target="_blank" rel="external">web.xml 中的listener、 filter、servlet 加载顺序及其详解</a></p>
<h3 id="jetty__u914D_u7F6E"><a href="#jetty__u914D_u7F6E" class="headerlink" title="jetty 配置"></a>jetty 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>org.eclipse.jetty.servlet.SessionIdPathParameterName<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>none<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="http://ykgarfield.github.io/jetty-9.2.3.v20140905-zh/session-management.html" target="_blank" rel="external">Session 管理</a></p>
<blockquote>
<p>Session URL 参数名称.默认为 jsessionid,但是可以使用这个 context 参数为一个特定 webapp 进行设置. 设置为 “none” 禁用 URL 重写.</p>
</blockquote>
<h3 id="u81EA_u5DF1_u5199_listener"><a href="#u81EA_u5DF1_u5199_listener" class="headerlink" title="自己写 listener"></a>自己写 listener</h3><p>例子：</p>
<p>配置 xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>com.meituan.service.mobile.tesla.core.listener.ContextListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        WebApplicationContext webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());</span><br><span class="line">        <span class="comment">// 服务启动时，初始化context</span></span><br><span class="line">        LogService.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53E6_u5916_u4E00_u4E9B_u9AD8_u7EA7_u7528_u6CD5"><a href="#u53E6_u5916_u4E00_u4E9B_u9AD8_u7EA7_u7528_u6CD5" class="headerlink" title="另外一些高级用法"></a>另外一些高级用法</h3><h4 id="u53CD_u5C04"><a href="#u53CD_u5C04" class="headerlink" title="反射"></a>反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? Object#getClass().getMethod()</span></span><br><span class="line"><span class="comment">// ? new Class[0]</span></span><br><span class="line"><span class="comment">// getMethod().invoke(Object, new Object[0])</span></span><br><span class="line">server.getClass().getMethod(<span class="string">"start"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).invoke(server, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<h4 id="Pattern-compile"><a href="#Pattern-compile" class="headerlink" title="Pattern.compile"></a>Pattern.compile</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pattern p = Pattern.compile(<span class="string">"jetty-[\\w]+.xml"</span>);</span><br><span class="line"><span class="keyword">return</span> (file.isFile()) &amp;&amp; (<span class="keyword">this</span>.val$p.matcher(file.getName()).matches());</span><br></pre></td></tr></table></figure>
<p>完全没有遇见过 <code>this.val$p</code> 这种用法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Jetty__u542F_u52A8_u4EE3_u7801"><a href="#Jetty__u542F_u52A8_u4EE3_u7801" class="headerlink" title="Jetty 启动代码"></a>Jetty 启动代码</h2><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[知乎理财话题整理]]></title>
    <link href="http://shane.hsi.rocks/2016/02/22/Financing-Knownledge-from-Zhihu/"/>
    <id>http://shane.hsi.rocks/2016/02/22/Financing-Knownledge-from-Zhihu/</id>
    <published>2016-02-22T10:26:18.000Z</published>
    <updated>2016-02-23T13:59:56.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读 Why I No Longer Use MVC Frameworks]]></title>
    <link href="http://shane.hsi.rocks/2016/02/19/Reading-Why-I-No-Longer-Use-MVC-Frameworks/"/>
    <id>http://shane.hsi.rocks/2016/02/19/Reading-Why-I-No-Longer-Use-MVC-Frameworks/</id>
    <published>2016-02-19T02:40:25.000Z</published>
    <updated>2016-02-20T12:58:48.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.infoq.com/articles/no-more-mvc-frameworks" target="_blank" rel="external">Why I No Longer Use MVC Frameworks</a></p>
<p>HN 讨论链接：<a href="https://news.ycombinator.com/item?id=11104356" target="_blank" rel="external">https://news.ycombinator.com/item?id=11104356</a></p>
<p><strong>PS</strong>：这篇文章非常不直观地透露出民科和专科的区别。</p>
<blockquote>
<p>The worst part of my job these days is designing APIs for front-end developers. </p>
</blockquote>
<p>笑尿。前端程序员首先要是个程序员。程序员的专业素养需要有。</p>
<p>是的，作者直接答应了前端的没有设计的 API，然后项目完成后，就会有超级多的 API。</p>
<blockquote>
<p>and where I touched the sheer power of reactive and functional programming, a journey focused on simplicity and scraping the bloat that our industry is so good at producing.</p>
</blockquote>
<p>好吧，这篇文章是推销 Functional 和 Reactive 的。作者认为它们是专注于简洁性的。</p>
<blockquote>
<p>Facebook, so far, has resisted fixing that gap at the framework level.</p>
</blockquote>
<p>Facebook 拒绝在 React 的框架级别引入 MVC 这些解决数据（API）的特性。</p>
<blockquote>
<p>After using React and seeing what was coming in Angular2, I felt depressed: these frameworks systematically force me to use the BFF “Screen Scraping” pattern where every server-side API matches the dataset of a screen, in and out.</p>
</blockquote>
<p>作者又叹息了。每一个服务端的 API 对应屏幕上的一个 dataset。</p>
<blockquote>
<p>That’s when I had my “to hell with it” moment. I’ll just build a Web app without React, without Angular, no MVC framework whatsoever, to see if I could find a better articulation between the View and the underlying APIs.</p>
</blockquote>
<p>所以，这篇文章要探讨的就是，View 和底层 APIs 的关系。</p>
<blockquote>
<p>What I really liked about React was the relationship between the model and the view. The fact that React is not template based and that the view itself has no way to request data felt like a reasonable path to explore (you can only to pass data to the view).</p>
</blockquote>
<p>作者很喜欢 React 处理 Model 和 View 的方式，是传递，而不是请求。职责解耦。sole purpose。</p>
<blockquote>
<p>When you look long enough, you realize that the sole purpose of React is to decompose the view in a series of (pure) functions and the JSX syntax:</p>
<p><v params="{M}/"><br>is nothing different than:<br>V = f( M )</v></p>
</blockquote>
<p>非常精简的 <code>V=f(M)</code>。</p>
<blockquote>
<p> GraphQL is nothing more than a declarative way to create a view-model. Being forced to shape the model to match the view is the problem, not the solution. </p>
</blockquote>
<p>对作者的这个观点持保留态度。继续看。</p>
<blockquote>
<p>Unlike templates or “queries written by front-end engineers”, functions do not require the model to fit the view.<br>When the view is created from a function (as opposed to a template or a query) you can transform the model as needed to best represent the view without adding artificial constraints on the shape of the model.</p>
</blockquote>
<p>这是作者对上述观点的继续解答。因为 View 是 function，而不是 templates 或者 query。而 function 是不需要 model 来符合 view 的。因为你可以按需改变 model 的形状来符合 view。</p>
<blockquote>
<p>For instance, if the view displays a value v and a graphical indicator as to whether this value is great, good or bad, there is no reason to have the indicator’s value in your model: the function should simply compute the value of the indicator from the value v provided by the model.<br> V = f( vm(M) )</p>
</blockquote>
<p>根据作者举得这个例子，我理解了。作者认为根据一个 v，来计算 great，good，bad。这个 great，good，bad 不应该放在 model。</p>
<p>但是应该放在 view model 里啊。问题是，model -&gt; view model 的这层逻辑应该放在哪里？</p>
<p>其实很简单，以网络传输最小字节数为基准。我 view 只应该要我想要的。我不要有逻辑。给我什么就显示什么。逻辑意味着维护成本，浏览器端维护意味着可能的泄露。</p>
<blockquote>
<p>As a veteran MDE practitioner, I can assure you that you are infinitely better off writing code than metadata, be it as a template or a complex query language like GraphQL.</p>
</blockquote>
<p>那是因为 metadata 做的语义化的东西概念太多太杂。</p>
<blockquote>
<p>The natural interface they create allows you to “theme” your Web app or Website or render the view in different technologies (native for instance).</p>
</blockquote>
<p>theme 这个词很吸引我。</p>
<blockquote>
<p>The function implementations have the potential to enhance the way we implement responsive design as well.</p>
</blockquote>
<p>作者说，函数式实现也有利于增强响应式设计的实现方式。</p>
<blockquote>
<p>But most importantly, this approach allows the view to declare the minimum contract with the model and leaves the decision to the model as to what it the best way to bring this data to the view. Aspects like caching, lazy loading, orchestration, consistency are entirely under the control of the model. Unlike templates or GraphQL there is never a need to serve a direct request crafted from the view perspective.</p>
</blockquote>
<p>最重要的就是，view 可以对 model 声明尽可能少的 contract。model 来负责一些切面需求，比如缓存，延迟加载，组合，一致性。</p>
<p>注：model，不希望有 model 这个粒度，而是类似于 GraphQL 的，property 粒度的。这块的确会复杂，但是如果把数据结构图理清的话，会把这块完全抽象出去。</p>
<blockquote>
<p>The core issue here is, as Andre Medeiros so eloquently puts it, that the MVC pattern is “interactive” (as opposed to Reactive). In traditional MVC, the action (controller) would call an update method on the model and upon success (or error) decide how to update the view. As he points out, it does not have to be that way, there is another equally valid, Reactive, path if you consider that actions should merely pass values to the model, regardless of the outcome, rather than deciding how the model should be updated.</p>
</blockquote>
<p>MVC 模式是交互式的。在传统的 MVC 模式中，action (controller) 会调用 model 上的 update 方法。然后根据是 success 或者 error 来更新 view。Andre Medeiros 也指出，可以使用另一种同样有效的，响应式的方案，只要你把 action 只是传递值给 model，不用关心结果。</p>
<blockquote>
<p>The key question then becomes: how do you integrate actions in the reactive flow?</p>
</blockquote>
<p>这的确是很多人争论的，flux 中的 action 需不需要？</p>
<blockquote>
<p>If you want to understand a thing or two about Actions, you may want to take a look at TLA+. TLA stands for “Temporal Logic of Actions”, a formalism invented by Dr. Lamport, who got a Turing award for it.<br> In TLA+, actions are pure functions:<br>            data’ = A (data)</p>
<p>I really like the TLA+ prime notation because it reinforces the fact that functions are mere transformations on a given data set.</p>
</blockquote>
<p>作者首先引入了 TLA 的概念。Actions 是纯函数。并且强化了事实，函数只是所给数据集的转化。</p>
<blockquote>
<p>With that in mind, a reactive MVC would probably look like:<br>            V = f( M.present( A(data) ) ) </p>
<p>Actions, again, are pure functions, with no state and no side effect (with respect to the model, not counting logging for instance).</p>
</blockquote>
<p>Actions 是纯函数，没有状态和副作用。比如没有计数日志这些。</p>
<blockquote>
<p>This paragraph is very important, so please read carefully. We have seen that, in TLA+, the actions have no side effects and the resulting state is computed, once the model processed the action outputs and updated itself. That is a fundamental departure from the traditional state-machine semantics where the action specifies the resulting state, i.e. the resulting state is independent of the model. In TLA+, the actions that are enabled and therefore available to be triggered in the state representation (i.e. the view) are not linked directly to the action that triggered the state change. In other words, state machines should not be specified as tuples that connect two states (S1, A, S2) as they traditionally are, they are rather tuples of the form (Sk, Ak1, Ak2,…) that specify all the actions enabled, given a state Sk, with the resulting state being computed after an action has been applied to the system, and the model has processed the updates.</p>
</blockquote>
<p>这一段很重要，我也全段摘出解读。</p>
<p>在 TLA+ 中，actions 是没有副作用的，结果状态是计算出来的，有 model 来处理 actions outputs，自己更新自己。这和传统的状态机语法有本质的区别，在状态机中，结果状态是有 action 指定的，和 model 是独立的。</p>
<p>在 TLA+ 中，可以在 state representation（比如 view）被触发的 actions  不是用来触发 state change 的 action。</p>
<p>所以，状态机不能再表示为连接两种状态的管道（tuple），即 <code>(S1, A, S2)</code>，而是，给定一个状态，<code>Sk</code>，然后再给定所有的启用的 actions，即 <code>(Sk, Ak1, Ak2, ...)</code>。结果状态是在一个 action 被用于应用后计算出来的，由 model 来处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接：<a href="http://www.infoq.com/articles/no-more-mvc-frameworks" target="_blank" rel="external">Why I No Longer Use MVC Frameworks</a>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近在做的事情]]></title>
    <link href="http://shane.hsi.rocks/2016/02/19/Some-Recent-Doings/"/>
    <id>http://shane.hsi.rocks/2016/02/19/Some-Recent-Doings/</id>
    <published>2016-02-19T00:15:55.000Z</published>
    <updated>2016-02-20T13:43:49.000Z</updated>
    <content type="html"><![CDATA[<p>整理下最近在做的事情。</p>
<blockquote>
<p>不求快，也不求精美。这个博客，目前只是一种能方便记录的地方（这么说，电脑是我目前的主要生产力工具了）。<br>这是第一篇，整理最近在做的事情。我准备挑几个点，或者整理出依赖关系，找到一些目标。然后梳理下2016年的规划。</p>
</blockquote>
<p>一篇一篇的看下。</p>
<ul>
<li>2015 Annual Retro 记录了我2015年的努力。前端，JavaScript，CSS，甚至想涉足设计方面。以及简单的看了下 Webkit 导论。和一些 Functional，Reactive 的学习。</li>
<li><p>2015 Annual Retro 文学类书单和旅行。</p>
</li>
<li><p>2016 The Shawshank Redemption 我其实想说的是，要有理想，要有远见。远见这种东西，顾名思义，能见远。然而，一是，目力难及，二是我更倾向于做好当前事。所以，如果要有远见，必须在每天繁杂的事务中，节余出一些时间来，看书也好，其他方式也好，每天少量的积累。这就需要很好的规划性。</p>
</li>
<li><p>2016 The Shawshank Redemption 关于规划性和时间的利用上，希望再次探讨下娱乐的意义。娱乐对于我来说，主要就是看动漫，看知乎等等，能不能把这些从心态上规避掉。</p>
</li>
<li><p>ISP in Front-end Component Development 这是我的一个设想。我认为前端目前比较没有设计性，很多东西得不到积累。所谓的很多东西，如果前端能抽象出标准和实现来，可能就相对容易积累一点。只可惜由于动态语言的特性，大家都不喜欢抽象出细粒度的接口，仅仅提供最终的实现。我希望能找出，React.js 的 View 层的接口等等。</p>
</li>
<li><p>JavaScript new constructor this from zhihu 气宗。这块必须要修炼，难度也不大，概念相对来说是最少，只是坑坑洼洼的细节较多（相比于有用的细节）。再次强调，这块肯定是后面要积累的。也不要说，即使之后不做 JavaScript 了，不需要。即使之后学习 Java 了，这块也不能丢。练好了，夯实了，确保融入记忆里了，再说。不要一件事做一半。</p>
</li>
<li><p>Thoughts on Web Development (To Update) 这个是我去年到现在一直在思考的问题，越思考发现涉及到的细节越多，也就有了一系列的思考。这个话题比较大，基本涉及了我工作的领域前端所有需求。这块希望能根据区别分解下，然后找到每个点的依赖，联系。</p>
</li>
<li><p>Use Router5 自己写 Router，实际上是奔着 Navigator Stack 去的。</p>
</li>
<li><p>You don’t Know JS - this &amp; prototype note 气宗修炼最佳秘籍。必须看完，复习，复读。</p>
</li>
</ul>
<hr>
<p>2016年02月20日21:38:27 更新</p>
<p>由于读了这篇文章：<a href="http://www.infoq.com/articles/no-more-mvc-frameworks" target="_blank" rel="external">Why I No Longer Use MVC Frameworks</a> ，感觉有很多东西需要学习。</p>
<p>好多事情。写这一篇文章的原因 – 整理。</p>
<p>所以，今天明天花时间系统学习如何使用 Omni Focus，材料来自 <a href="https://www.zhihu.com/topic/19568532/top-answers" target="_blank" rel="external">知乎</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理下最近在做的事情。</p>
<blockquote>
<p>不求快，也不求精美。这个博客，目前只是一种能方便记录的地方（这么说，电脑是我目前的主要生产力工具了）。<br>这是第一篇，整理最近在做的事情。我准备挑几个点，或者整理出依赖关系，找到一些目标。然后梳理下2016]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CS 的数学要求]]></title>
    <link href="http://shane.hsi.rocks/2016/02/06/Math-Requirements-for-Computer-Science/"/>
    <id>http://shane.hsi.rocks/2016/02/06/Math-Requirements-for-Computer-Science/</id>
    <published>2016-02-06T07:53:23.000Z</published>
    <updated>2016-02-20T12:57:54.000Z</updated>
    <content type="html"><![CDATA[<p>有感于这篇回答（<a href="https://www.zhihu.com/question/19635359" target="_blank" rel="external">什么是 Monad (Functional Programming)？</a>）的这一句话：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不就是自函子范畴里的幺半群么</span><br></pre></td></tr></table></figure>
<p>对计算机所需要的数学或者就是纯粹的数学产生了一些兴趣。</p>
<p>学习数学一直是我心中的小小的欲望，奈何能力有限，资源不足。不过，数学的魅力的确深远，如果能够知道自己平日里做的很多工作、很多想法都可以有一种模式或是一种解释，真是一件幸事。</p>
<p>来自：<a href="http://www.guokr.com/question/146597/" target="_blank" rel="external">计算机专业的数学应学到什么水平？应该学习数学的那些分支？</a></p>
<p>应用比较广泛的基础课：</p>
<ul>
<li><p>微积分（计算机建立模型的时候常常会用到）</p>
</li>
<li><p>线性代数（像著名的 page rank 就是特征值理论的一个重要应用. 很多问题最终都能化为求解线性方程组问题(例如, 用有限差分法或有限元法解偏微分方程, 用最小二乘法求最佳逼近,等等). 线性代数知识还常在机器学习或数据挖掘中被用来降低数据的维度. 还有很多其他的应用.）</p>
</li>
<li><p>概率论，数理统计，随机过程（在最近的人工智能的各个领域则是非常重要的基础, 很多机器学习算法都是基于统计模型的, 像 Bayes 统计什么的应用极为广泛(例如垃圾邮件过滤.)）</p>
</li>
</ul>
<p>和计算机相关的：</p>
<ul>
<li>离散数学（离散数学不同的书选取的内容不大一样, 不过一般都有逻辑阿, 图论阿, 有的还有自动机什么的, 一看就和计算机关系紧密.）</li>
<li>数值分析（数学理论大多是抽象的, 想在计算机上用就离不开数值分析了; 用数值方法解一些无法求出解析解的方程也很有实用价值.）</li>
</ul>
<p>和不同专业相关的数学知识：</p>
<ul>
<li><p>像是信息安全, 编码方面的, <strong>数论</strong> 知识自然不可缺少, 建议多学一些代数知识, 也包括代数几何啊什么的. (<strong>复变函数</strong> 什么的都是基础啊….)</p>
</li>
<li><p>像是(离散)算法方面的, 可以学学 Knuth 的具体数学, 另外还得学些运筹学, 图论, 组合数学什么的.</p>
</li>
<li><p>像是图形处理方面, 恐怕就需要很多几何知识了, 学几何这玩意代数和分析都得好, 像解析几何, 射影几何, 微分几何, 黎曼几何, 代数几何, 拓扑学呀都在这个领域用的上. 还得熟悉样条理论, 曲线与曲面的表示啊等等.</p>
</li>
<li><p>图像处理, 也需要不少数学. 最近利用偏微分方程,反问题啊来研究图像处理的很热门. 还有傅立叶分析, 小波分析呀都很有用.</p>
</li>
<li><p>人工智能相关的话, 得把概率, 统计, 随机过程什么的学的更深入一些.</p>
</li>
</ul>
<hr>
<p>另外在维基百科里也有一些猎奇：</p>
<p>这些是由 monad（单子） 引出的？</p>
<ul>
<li>范畴论</li>
<li>抽象代数</li>
</ul>
<p>另外这一篇非常全面：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%AD%A6%E7%A7%91%E5%88%86%E7%B1%BB%E6%A0%87%E5%87%86" target="_blank" rel="external">数学学科分类标准</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有感于这篇回答（<a href="https://www.zhihu.com/question/19635359" target="_blank" rel="external">什么是 Monad (Functional Programming)？</a>）的这一句话：</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Execution in the Kingdom of Nouns 译]]></title>
    <link href="http://shane.hsi.rocks/2016/02/05/Execution-in-the-Kingdom-of-Nouns-zh-cn/"/>
    <id>http://shane.hsi.rocks/2016/02/05/Execution-in-the-Kingdom-of-Nouns-zh-cn/</id>
    <published>2016-02-05T08:35:12.000Z</published>
    <updated>2016-02-20T12:56:41.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://steve-yegge.blogspot.tw/2006/03/execution-in-kingdom-of-nouns.html" target="_blank" rel="external">Execution in the Kingdom of Nouns</a></p>
<blockquote>
<p>他们脾气火爆，某些人-特别是动词（verbs）：他们极度自负-可以用形容词（adjectives）来做任何事，但不能用动词-然而，我却能掌控所有！深不可测吧！我就把话放这了！<br>矮胖子</p>
</blockquote>
<p>你好，世界！今天我们来听一个故事，关于邪恶的国王 Java 和他对世界大同的动词（verb）邮票停运（stamp-outage）。</p>
<p>注意：故事不是好结局。不建议有心脏病和嘴炮的人士阅读。如果你易怒，或极可能在评论区无理取闹，请立刻停止阅读。</p>
<p>在开始这个故事前，先来些模糊的概念。</p>
<h2 id="u5783_u573E_u6EA2_u51FA_uFF08The_Garbage_Overfloweth_uFF09"><a href="#u5783_u573E_u6EA2_u51FA_uFF08The_Garbage_Overfloweth_uFF09" class="headerlink" title="垃圾溢出（The Garbage Overfloweth）"></a>垃圾溢出（The Garbage Overfloweth）</h2><p>Java 党喜欢 “使用案例（use cases）”，所以我们也从一个案例开始：即，快点倒垃圾。如：”囧尼，快倒垃圾！都溢出来了！”</p>
<p>如果你是正常的，日常的，打理各种花园的，说英语的人，现在你被要求形容倒垃圾这个行为，你也许这样粗略地描述：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span> <span class="operator">the</span> garbage bag <span class="built_in">from</span> under <span class="operator">the</span> sink</span><br><span class="line">carry <span class="keyword">it</span> out <span class="operator">of</span> <span class="operator">the</span> garage</span><br><span class="line">dump <span class="keyword">it</span> <span class="operator">in</span> <span class="operator">the</span> garbage can</span><br><span class="line">wakl back inside</span><br><span class="line">wash your hands</span><br><span class="line">plop back down <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">couch</span></span></span><br><span class="line">resume playing your video game (<span class="operator">or</span> whatever you were doing)</span><br></pre></td></tr></table></figure>
<p>即使你不说英语，大概也是这么想的，只不过换做你最爱的语言。暂且忽略语言，也不抠细节，倒垃圾就是一系列动作，先到摆在外面的垃圾桶，然后再进来，因为你还要做刚刚被迫停止的事情。</p>
<p>我们的思维充斥着勇敢、恐惧和激情：我们生活、呼吸、走路、交流、哭泣、祈祷、恐惧、进食、饮水、停止、行进，当然也包括倒垃圾。其他时间，我们是自由，想干什么就可以干什么。如果我们是阳光下的石头，也能凑合过日子，但却不是自由的。自由来源于，我们可以做事情。</p>
<p>当然，我们的思维也充斥着名词。我们吃名词，从商店里买名词，坐在名词上，睡在名词上。名词可以窜到你脑海里，在名词上再创建一个大名词。名词就是事物，如果没有事物，我们又将如何存在？但是，它们也就仅仅是事物，或者只是我们观察到的对象的名字而已。那里有建筑物，这里有石头。小孩子都能指认出名词。不过，名词身上发生的变化让它们变得值得玩味。</p>
<p>变化需要动作，动作催生变化。动作是生活的调味品。动作甚至可以给调味品的调味品。总之，只有你吃了才是好吃的。名词无处不在，生命却亘古变迁，原力源于动词。</p>
<p>当然，除了动词和名词，我们也有形容词，介词，代词，冠词，不可或缺的连接词，可口的感叹词，所有这些组合起来才能让我们思考或诉说有趣的事情。任何语音都扮演一个角色，个个都很重要，一个都不能少。</p>
<p>所以，如果我们突然决定不用动词了，是不是很奇怪？</p>
<p>就有一个地方是这样做的…</p>
<h2 id="u540D_u8BCD_u738B_u56FD_uFF08The_Kindom_of_Nouns_uFF09"><a href="#u540D_u8BCD_u738B_u56FD_uFF08The_Kindom_of_Nouns_uFF09" class="headerlink" title="名词王国（The Kindom of Nouns）"></a>名词王国（The Kindom of Nouns）</h2><p>在 Javaland 王国，国王 Java 施行硅（silicon）拳统治，人们不能有个人意识。在 Javaland，名词很重要，这是国王 Java 立下的规矩。名词是王国里的一等公民。他们穿着由形容词提供的华美服饰，生活地轻松愉快。形容词虽然不能进入高等级种群，但是他们也庆幸自己不是动词。</p>
<p>因为动词在王国里处境非常非常糟糕。</p>
<p>在 Javaland，国王 Java 国王法令中，动词是名词的所有之物。不仅仅是宠物，还做其他杂事，苦力。它们是王国的奴隶阶层，或者是农奴，签了卖身契的仆人。Javaland 的其他公民都满意它们的生活现状，基本上都认为这种生活是理所当然的。</p>
<p>动词要负责 Javaland 里所有的工作，但因为言论禁止，没有一个动词想过追求自由。如果你看到大街上有动词出没，它身边必须有名词监管。</p>
<p>既然要”陪同”名词，作为动词也要假装不是动词，它必须被授予 <code>VerbEscorter</code>的身份来行使这份工作。不过”被授予（procure）”，”行使(facilitate<br>)”也是动词啊？如果发生这种事情，就有”授予者(Procurer)”和”行使者(Facilitator)”来做这些低层次的事情（分别佳作 Procurement 和 Facilitation）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://steve-yegge.blogspot.tw/2006/03/execution-in-kingdom-of-nouns.html" target="_blank" rel="external">Execution in the Ki]]>
    </summary>
    
  </entry>
  
</feed>
