<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-02-04T09:09:08.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[React performance zh_cn]]></title>
    <link href="http://shane.hsi.rocks/2016/02/04/React-performance-zh-cn/"/>
    <id>http://shane.hsi.rocks/2016/02/04/React-performance-zh-cn/</id>
    <published>2016-02-04T07:31:26.000Z</published>
    <updated>2016-02-04T09:09:08.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/react-performance.html" target="_blank" rel="external">React performance</a></p>
<p>React is a JavaScript library for building user interfaces developed by Facebook. It has been designed from the ground up with performance in mind. In this article I will present how the diff algorithm and rendering work in React so you can optimize your own apps.</p>
<p>这里展示下 React 用的 diff 算法和 rendering。</p>
<h2 id="Diff_Algorithm"><a href="#Diff_Algorithm" class="headerlink" title="Diff Algorithm"></a>Diff Algorithm</h2><p>Before we go into the implementation details it is important to get an overview of how React works.</p>
<p>大致看下 React 的 overview。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.first) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>A Span<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"second"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>A Paragraph<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>At any point in time, you describe how you want your UI to look like. It is important to understand that the result of render is not an actual DOM node. Those are just lightweight JavaScript objects. We call them the virtual DOM.</p>
<p>首先先记住，render 返回的不是 DOM，是轻量级的 JavaScript 对象，也就是 Virtual DOM。</p>
<p>React is going to use this representation to try to find the minimum number of steps to go from the previous render to the next. For example, if we mount <mycomponent first="{true}">, replace it with <mycomponent first="{false}">, then unmount it, here are the DOM instructions that result:</mycomponent></mycomponent></p>
<p>React 尝试找到最小修改内容。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">None to first</span><br><span class="line">    - <span class="operator"><span class="keyword">Create</span> node: &lt;<span class="keyword">div</span> className=<span class="string">"first"</span>&gt;&lt;span&gt;A Span&lt;/span&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">First</span> <span class="keyword">to</span> <span class="keyword">second</span></span><br><span class="line">    - <span class="keyword">Replace</span> <span class="keyword">attribute</span>: className=<span class="string">"first"</span> <span class="keyword">by</span> className=<span class="string">"second"</span></span><br><span class="line">    - <span class="keyword">Replace</span> node: &lt;span&gt;A Span&lt;/span&gt; <span class="keyword">by</span> &lt;<span class="keyword">p</span>&gt;A Paragraph&lt;/<span class="keyword">p</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Second</span> <span class="keyword">to</span> <span class="keyword">none</span></span><br><span class="line">    - Remove node: &lt;<span class="keyword">div</span> className=<span class="string">"second"</span>&gt;&lt;<span class="keyword">p</span>&gt;A Paragraph&lt;/<span class="keyword">p</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Level_by_Level"><a href="#Level_by_Level" class="headerlink" title="Level by Level"></a>Level by Level</h4><p>Finding the minimal number of modifications between two arbitrary trees is a O(n4) problem. As you can imagine, this isn’t tractable for our use case. React uses simple and yet powerful heuristics to find a very good approximation in O(n).</p>
<p>在两颗 arbitrary trees 找到最小修改数量是 O(n4)。当然，React 使用的不是这种方案。而是使用了一个简单强大的启发算法，时间复杂度接近 O(n)。</p>
<p>React only tries to reconcile trees level by level. This drastically reduces the complexity and isn’t a big loss as it is very rare in web applications to have a component being moved to a different level in the tree. They usually only move laterally among children.</p>
<p>React 只会一层一层的合并 trees。这样就会大大减少复杂性，丢失的场景也不多，因为在 web 应用中，component 很少会移到其他的层级，只是在 children 间移动。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_diff.png" alt="React Diff Algorithm" title="React Diff Algorithm">
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>Let say that we have a component that on one iteration renders 5 components and the next inserts a new component in the middle of the list. This would be really hard with just this information to know how to do the mapping between the two lists of components.</p>
<p>假设这样一个场景：在一次迭代中，会渲染 5 个 components。然后再在中间插入一个新的 component。</p>
<p>By default, React associates the first component of the previous list with the first component of the next list, etc. You can provide a key attribute in order to help React figure out the mapping. In practice, this is usually easy to find out a unique key among the children.</p>
<p>默认，React 会结合前面一个 list 的第一个 component 和后面 list 的第一个 component。可以提供一个 <code>key</code> 属性，来帮助 React 解析映射。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_list.png" alt="List" title="List">
<h4 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h4><p>A React app is usually composed of many user defined components that eventually turns into a tree composed mainly of divs. This additional information is being taken into account by the diff algorithm as React will match only components with the same class.</p>
<p>React 只会匹配相同 class 的 components。就不会浪费时间匹配肯定不同的元素。</p>
<p>For example if a <header> is replaced by an <exampleblock>, React will remove the header and create an example block. We don’t need to spend precious time trying to match two components that are unlikely to have any resemblance.</exampleblock></header></p>
<img src="/2016/02/04/React-performance-zh-cn/react_components.png" alt="Components" title="Components">
<h2 id="Event_Delegation"><a href="#Event_Delegation" class="headerlink" title="Event Delegation"></a>Event Delegation</h2><p>Attaching event listeners to DOM nodes is painfully slow and memory-consuming. Instead, React implements a popular technique called “event delegation”. React goes even further and re-implements a W3C compliant event system. This means that Internet Explorer 8 event-handling bugs are a thing of the past and all the event names are consistent across browsers.</p>
<p>将 event listeners 附着到 DOM 节点是很慢的，也耗内存。React 实现了一种时髦的技术叫做 『事件委托』。React 走的更远，重新实现了一套 W3C 兼容的事件系统。也就是 IE8 的 event-handling bug 也解决了。</p>
<p>Let me explain how it’s implemented. A single event listener is attached to the root of the document. When an event is fired, the browser gives us the target DOM node. In order to propagate the event through the DOM hierarchy, React doesn’t iterate on the virtual DOM hierarchy.</p>
<p>解释下实现机制。一个单独的 event listener 会赋给 document 的 root。当一个 event 触发时，browser 会给出 target DOM node。为了能 propagate 这个 event 沿着 DOM 层级，React 并不会迭代 Virtual DOM 层级。</p>
<p>Instead we use the fact that every React component has a unique id that encodes the hierarchy. We can use simple string manipulation to get the id of all the parents. By storing the events in a hash map, we found that it performed better than attaching them to the virtual DOM. Here is an example of what happens when an event is dispatched through the virtual DOM.</p>
<p>而是，我们利用到 React component 有一个 id 来编码了层级。可以使用简单的 string 操作拿到所有 parents 的 ids。通过将 events 保存在一个 hash map 中，我们会发现要比附着到 Virtual DOM 中要快。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dispatchEvent('click', 'a.b.c', event)</span></span><br><span class="line">clickCaptureListeners[<span class="string">'a'</span>](event);</span><br><span class="line">clickCaptureListeners[<span class="string">'a.b'</span>](event);</span><br><span class="line">clickCaptureListeners[<span class="string">'a.b.c'</span>](event);</span><br><span class="line">clickBubbleListeners[<span class="string">'a.b.c'</span>](event);</span><br><span class="line">clickBubbleListeners[<span class="string">'a.b'</span>](event);</span><br><span class="line">clickBubbleListeners[<span class="string">'a'</span>](event);</span><br></pre></td></tr></table></figure>
<p>The browser creates a new event object for each event and each listener. This has the nice property that you can keep a reference of the event object or even modify it. However, this means doing a high number of memory allocations. React at startup allocates a pool of those objects. Whenever an event object is needed, it is reused from that pool. This dramatically reduces garbage collection.</p>
<p>browser 会为每一个 event 和每个 listener 创建一个 event object。React 为了减少内存使用，会在启动分配一个 pool。</p>
<h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2><h4 id="Batching"><a href="#Batching" class="headerlink" title="Batching"></a>Batching</h4><p>Whenever you call setState on a component, React will mark it as dirty. At the end of the event loop, React looks at all the dirty components and re-renders them.</p>
<p>当你调用 setState 时，React 会将该 component 标记为脏，在 event loop 的末尾，React 会找到这些 dirty component，重新渲染。</p>
<blockquote>
<p>event loop 找时间理解下</p>
</blockquote>
<p>This batching means that during an event loop, there is exactly one time when the DOM is being updated. This property is key to building a performant app and yet is extremely difficult to obtain using commonly written JavaScript. In a React application, you get it by default.</p>
<p>batching 也就意味着，一次 event loop 只会更新一次 DOM。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_batching.png" alt="Batching" title="Batching">
<h4 id="Sub-tree_Rendering"><a href="#Sub-tree_Rendering" class="headerlink" title="Sub-tree Rendering"></a>Sub-tree Rendering</h4><p>When setState is called, the component rebuilds the virtual DOM for its children. If you call setState on the root element, then the entire React app is re-rendered. All the components, even if they didn’t change, will have their render method called. This may sound scary and inefficient but in practice, this works fine because we’re not touching the actual DOM.</p>
<p>当调用 setState 时，会重新构建（rebuild）它 children 的 virtual DOM。如果你调用了 setState 在 root 元素，整个 React app 会 re-rendered。听起来很恐怖，但是 work fine，因为没碰到真正的 DOM。</p>
<p>First of all, we are talking about displaying the user interface. Because screen space is limited, you’re usually displaying on the orders of hundreds to thousands of elements at a time. JavaScript has gotten fast enough business logic for the whole interface is manageable.</p>
<p>首先，屏幕大小有限，JavaScript 处理这种量级的用户界面还是够快的。</p>
<p>Another important point is that when writing React code, you usually don’t call setState on the root node every time something changes. You call it on the component that received the change event or couple of components above. You very rarely go all the way to the top. This means that changes are localized to where the user interacts</p>
<p>另外就是，一般不会再 root 调用 setState（and Redux 就是这么做的，虽然做了很多判断）。</p>
<img src="/2016/02/04/React-performance-zh-cn/react_re_render.png" alt="Sub-tree Rendering" title="Sub-tree Rendering">
<h4 id="Selective_Sub-tree_Rendering"><a href="#Selective_Sub-tree_Rendering" class="headerlink" title="Selective Sub-tree Rendering"></a>Selective Sub-tree Rendering</h4><p>Finally, you have the possibility to prevent some sub-trees to re-render. If you implement the following method on a component:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean shouldComponentUpdate(object nextProps, object nextState)</span><br></pre></td></tr></table></figure>
<p>The techniques that make React fast are not new. We’ve known for a long time that touching the DOM is expensive, you should batch write and read operations, event delegation is faster …</p>
<p>People still talk about them because in practice, they are very hard to implement in regular JavaScript code. What makes React stand out is that all those optimizations happen by default. This makes it hard to shoot yourself in the foot and make your app slow.</p>
<p>The performance cost model of React is also very simple to understand: every setState re-renders the whole sub-tree. If you want to squeeze out performance, call setState as low as possible and use shouldComponentUpdate to prevent re-rendering an large sub-tree.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/react-performance.html" target="_blank" rel="external">React performance</a></p>
<p>Rea]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scroll Position with React zh_cn]]></title>
    <link href="http://shane.hsi.rocks/2016/02/04/Scroll-Position-with-React-zh-cn/"/>
    <id>http://shane.hsi.rocks/2016/02/04/Scroll-Position-with-React-zh-cn/</id>
    <published>2016-02-04T07:00:38.000Z</published>
    <updated>2016-02-04T07:28:22.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html" target="_blank" rel="external">Scroll Position with React</a></p>
<blockquote>
<p>通过阅读 vjeux 的博客来学习下 React 的设计理念</p>
</blockquote>
<p>Dealing with scroll position when you insert content is usually a difficult problem to solve. We’ll see how to use React life cycle methods to solve it elegantly.</p>
<p>当插入 content 时会改变 scroll position 一般来说是比较复杂的问题。我们来看下如何使用 React life cycle 方法来优雅解决。</p>
<h2 id="Insertion_at_the_bottom__u5728_u5E95_u90E8_u63D2_u5165"><a href="#Insertion_at_the_bottom__u5728_u5E95_u90E8_u63D2_u5165" class="headerlink" title="Insertion at the bottom 在底部插入"></a>Insertion at the bottom 在底部插入</h2><p>The first example is to maintain the scroll position at the bottom when an element is inserted at the bottom. A common use case is a chat application.</p>
<p>当插入新的元素到底部，继续保持在底部。比如聊天应用。</p>
<p>In order to scroll at the bottom, we can do that on componentDidUpdate. It happens every time the element is re-rendered.</p>
<p>为了滚动到底部，可以在 componentDidUpdate 来做。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.getDOMNode();</span><br><span class="line">  node.scrollTop = node.scrollHeight;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><code>Element.scrollTop</code> 指拿到 element 向上滑动的像素。关键这个操作有 side effect，scrollTop 修改之后，会触发一个动作。应该叫做 node.scrollTop(node.scrollHeight)</p>
<p><code>Element.scrollHeight</code> 只读属性，是指元素内容的高度，包括看不见的（滚动的）。</p>
<p>But this is going to always scroll to the bottom, which can be very annoying if you want to read what was above. Instead you want to scroll only if the user was already at the bottom. To do that, we can check the scroll position before the component has updated with componentWillUpdate and scroll if necessary at componentDidUpdate</p>
<p>但是这样做的话，会始终滚到底部（比如当你想滚动到上面看内容，来了条新的内容，就滚到下面）。现在的需求是，只有已经在底部，才滚动。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">componentWillUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.getDOMNode();</span><br><span class="line">  <span class="comment">// 搞了一个实例变量在保存状态</span></span><br><span class="line">  <span class="keyword">this</span>.shouldScrollBottom = node.scrollTop + node.offsetHeight === node.scrollHeight;</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">componentDidUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.shouldScrollBottom) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.getDOMNode();</span><br><span class="line">    node.scrollTop = node.scrollHeight</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>发现盒模型的各种 Height 概念挺多的<br>读一下文档</p>
</blockquote>
<h2 id="Conclusion__u7ED3_u8BBA"><a href="#Conclusion__u7ED3_u8BBA" class="headerlink" title="Conclusion 结论"></a>Conclusion 结论</h2><p>React has not been designed to handle scroll position natively. However, it provides escape hatches from the declarative paradigm in order to be able to implement them.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html" target="_blank" rel="external">Scroll Position with Re]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript new constructor this from zhihu]]></title>
    <link href="http://shane.hsi.rocks/2016/02/04/JavaScript-new-constructor-this-from-zhihu/"/>
    <id>http://shane.hsi.rocks/2016/02/04/JavaScript-new-constructor-this-from-zhihu/</id>
    <published>2016-02-04T02:22:19.000Z</published>
    <updated>2016-02-04T02:40:54.000Z</updated>
    <content type="html"><![CDATA[<p>知乎链接：<a href="https://www.zhihu.com/question/19951896" target="_blank" rel="external">JavaScript 中对象的 constructor 属性的作用是什么？</a></p>
<p>主要解释：<code>constructor</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params">arg1,arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.b=<span class="number">2</span>; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  A.prototype.log = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  &#125;</span><br><span class="line">  a = <span class="keyword">new</span> A();</span><br><span class="line">  b = <span class="keyword">new</span> A();</span><br><span class="line">&#125;)()</span><br><span class="line">a.log();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">b.log();</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>a 是 A 的实例，a 的 constructor 就是 A</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; a.constructor</span><br><span class="line">&lt; <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">arg1,arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.b=<span class="number">2</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>所以，可以这样给『类A』增加新方法：</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.constructor.prototype 在chrome,firefox中可以通过 a.__proto__ 直接访问</span></span><br><span class="line"><span class="transposed_variable">a.</span><span class="transposed_variable">constructor.</span><span class="transposed_variable">prototype.</span><span class="built_in">log2</span> = <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="transposed_variable">console.</span>log(<span class="transposed_variable">this.</span>b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="transposed_variable">a.</span><span class="built_in">log2</span>();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="transposed_variable">b.</span><span class="built_in">log2</span>();</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>继续：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; a.constructor.prototype === a.__proto__</span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; a.constructor.prototype.constructor === a.constructor</span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>知乎链接：<a href="https://www.zhihu.com/question/19636194" target="_blank" rel="external">如何理解 JavaScript 中的 this 关键字？</a></p>
<p>详细：<a href="http://otakustay.com/object-lookup-in-javascript/" target="_blank" rel="external">JavaScript中的对象查找</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>知乎链接：<a href="https://www.zhihu.com/question/19951896" target="_blank" rel="external">JavaScript 中对象的 constructor 属性的作用是什么？</a></p>
<p>主要]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Read React Structure]]></title>
    <link href="http://shane.hsi.rocks/2016/02/02/Read-React-Structure/"/>
    <id>http://shane.hsi.rocks/2016/02/02/Read-React-Structure/</id>
    <published>2016-02-02T10:00:25.000Z</published>
    <updated>2016-02-04T07:29:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u58F0_u660E"><a href="#u58F0_u660E" class="headerlink" title="声明"></a>声明</h2><ul>
<li>解读的是结构</li>
</ul>
<h2 id="u8BA1_u5212"><a href="#u8BA1_u5212" class="headerlink" title="计划"></a>计划</h2><ul>
<li>读下 react.d.ts，目的是会写复杂的 definition 文件。</li>
<li>会画结构图，这个优先级低了，初期用纸笔</li>
</ul>
<h2 id="u5F00_u59CB_u5427"><a href="#u5F00_u59CB_u5427" class="headerlink" title="开始吧"></a>开始吧</h2><h4 id="npm_dependencies"><a href="#npm_dependencies" class="headerlink" title="npm dependencies"></a>npm dependencies</h4><p><a href="https://www.npmjs.com/package/esprima" target="_blank" rel="external">esprima</a></p>
<p>这个似乎有更快的。在 webpack 还是 rollup 的依赖里有。</p>
<p><a href="https://www.npmjs.com/package/commoner" target="_blank" rel="external">commoner</a></p>
<p>Flexible tool for translating any dialect of JavaScript into Node-readable CommonJS modules。这个是 React 团队维护的包。</p>
<p><a href="https://www.npmjs.com/package/recast" target="_blank" rel="external">recast</a></p>
<p>JavaScript syntax tree transformer, nondestructive pretty-printer, and automatic source map generator</p>
<p>commoner，recast 的主要作者都是 <a href="https://github.com/benjamn" target="_blank" rel="external">@benjamn</a>。曾经在 Facebook 工作。<a href="https://github.com/tc39" target="_blank" rel="external">TC39</a> 成员。</p>
<h4 id="react-d-ts"><a href="#react-d-ts" class="headerlink" title="react.d.ts"></a>react.d.ts</h4><h5 id="declare__u5173_u952E_u5B57"><a href="#declare__u5173_u952E_u5B57" class="headerlink" title="declare 关键字"></a>declare 关键字</h5><p>有时我们需要对相关定义进行补充, 但又不希望这些内容生成相关 JS 代码 (也许是本身某些对象或者值就已经存在在运行环境里, 另在用于桥接 TypeScript 和原有 JavaScript 的声明文件 *.d.ts 中就会大量使用 declare).</p>
<p>关键词是：补充，不会生成 JS 代码</p>
<p>另外 TypeScript 专门为一些 JS 类库扩展了 declare module, 以适应一些包含特殊字符的包/模块名称.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">'some-package'</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="namespaces"><a href="#namespaces" class="headerlink" title="namespaces"></a>namespaces</h5><p>Class 和 interface 做了些 design time 的限制（private，protected），但是没有做 runtime。</p>
<p>在 JavaScript 中，runtime 的 封装是用了 module pattern。即用闭包封装 private 的 fields 和 methods。</p>
<p>module pattern 是很清晰的方式，用来组织化结构（ organizational structure ），以及动态加载选项（dynamic loading options）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">namespace M &#123;  </span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"hello"</span>;  </span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">M.f();  </span><br><span class="line">M.s;  <span class="comment">// Error, s is not exported</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译出来的是</span></span><br><span class="line"><span class="keyword">var</span> M;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">M</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    M.f = f;</span><br><span class="line">&#125;)(M || (M = &#123;&#125;));</span><br><span class="line">M.f();</span><br><span class="line">M.s; <span class="comment">// Error, s is not exported</span></span><br></pre></td></tr></table></figure>
<h5 id="u770B_u4EE3_u7801"><a href="#u770B_u4EE3_u7801" class="headerlink" title="看代码"></a>看代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface ReactElement&lt;P extends Props&lt;any&gt;&gt; &#123;</span><br><span class="line">        type: string | ComponentClass&lt;P&gt; | StatelessComponent&lt;P&gt;;</span><br><span class="line">        props: P;</span><br><span class="line">        key: string | number;</span><br><span class="line">        ref: string | ((component: Component&lt;P, any&gt; | Element) =&gt; any);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中看下 <code>Component&lt;P, any&gt;</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base component for plain JS classes</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>&lt;<span class="title">P</span>, <span class="title">S</span>&gt; <span class="title">implements</span> <span class="title">ComponentLifecycle</span>&lt;<span class="title">P</span>, <span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">    constructor(props?: P, context?: any);</span><br><span class="line">    setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">    setState(state: S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">    forceUpdate(callBack?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">    render(): JSX.Element;</span><br><span class="line">    props: P;</span><br><span class="line">    state: S;</span><br><span class="line">    context: &#123;&#125;;</span><br><span class="line">    refs: &#123;</span><br><span class="line">        [key: string]: ReactInstance</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面还有重载：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br><span class="line">setState(state: S, callback?: () =&gt; any): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure>
<p>任意参数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface Factory&lt;P&gt; &#123;</span><br><span class="line">    (props?: P, ...children: ReactNode[]): ReactElement&lt;P&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要就是： <code>...children: ReactNode[]</code>。</p>
<p>这些也是重载：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>&lt;<span class="title">P</span>&gt;(<span class="params"></span><br><span class="line">        type: string,</span><br><span class="line">        props?: P,</span><br><span class="line">        ...children: ReactNode[]</span>): <span class="title">DOMElement</span>&lt;<span class="title">P</span>&gt;;</span><br><span class="line"><span class="title">function</span> <span class="title">createElement</span>&lt;<span class="title">P</span>&gt;(<span class="params"></span><br><span class="line">    type: ClassicComponentClass&lt;P&gt;,</span><br><span class="line">    props?: P,</span><br><span class="line">    ...children: ReactNode[]</span>): <span class="title">ClassicElement</span>&lt;<span class="title">P</span>&gt;;</span><br><span class="line"><span class="title">function</span> <span class="title">createElement</span>&lt;<span class="title">P</span>&gt;(<span class="params"></span><br><span class="line">    type: ComponentClass&lt;P&gt; | StatelessComponent&lt;P&gt;,</span><br><span class="line">    props?: P,</span><br><span class="line">    ...children: ReactNode[]</span>): <span class="title">ReactElement</span>&lt;<span class="title">P</span>&gt;;</span></span><br></pre></td></tr></table></figure>
<p>看下整体的 module 写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">declare namespace __React &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">"react"</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> = __React;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，如何定义 function interface？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">declare type ClassValue = string | number | ClassDictionary | ClassArray;</span><br><span class="line"></span><br><span class="line">interface ClassDictionary &#123;</span><br><span class="line">    [id: string]: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ClassArray extends <span class="built_in">Array</span>&lt;ClassValue&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line">interface ClassNamesFn &#123;</span><br><span class="line">    (...classes: ClassValue[]): string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">var</span> classNames: ClassNamesFn;</span><br><span class="line"></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">"classnames"</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> = classNames</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface ClassNamesFn &#123;</span><br><span class="line">    (...classes: ClassValue[]): string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u7B2C_u4E00_u6B21_u516C_u5F00_u53D1_u5E03_u7684_React__u6E90_u7801"><a href="#u7B2C_u4E00_u6B21_u516C_u5F00_u53D1_u5E03_u7684_React__u6E90_u7801" class="headerlink" title="第一次公开发布的 React 源码"></a>第一次公开发布的 React 源码</h4><p>因为这时候，代码量相对是最精简的。</p>
<h5 id="core/React-js"><a href="#core/React-js" class="headerlink" title="core/React.js"></a>core/React.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactCompositeComponent = <span class="built_in">require</span>(<span class="string">'ReactCompositeComponent'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactComponent = <span class="built_in">require</span>(<span class="string">'ReactComponent'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'ReactDOM'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactMount = <span class="built_in">require</span>(<span class="string">'ReactMount'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个看起来是比较独立的代码</span></span><br><span class="line"><span class="keyword">var</span> ReactDefaultInjection = <span class="built_in">require</span>(<span class="string">'ReactDefaultInjection'</span>);</span><br><span class="line"></span><br><span class="line">ReactDefaultInjection.inject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = &#123;</span><br><span class="line">  DOM: ReactDOM,</span><br><span class="line">  initializeTouchEvents: <span class="function"><span class="keyword">function</span>(<span class="params">shouldUseTouch</span>) </span>&#123;</span><br><span class="line">    ReactMount.useTouchEvents = shouldUseTouch;</span><br><span class="line">  &#125;,</span><br><span class="line">  autoBind: ReactCompositeComponent.autoBind,</span><br><span class="line">  createClass: ReactCompositeComponent.createClass,</span><br><span class="line">  createComponentRenderer: ReactMount.createComponentRenderer,</span><br><span class="line">  constructAndRenderComponent: ReactMount.constructAndRenderComponent,</span><br><span class="line">  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,</span><br><span class="line">  renderComponent: ReactMount.renderComponent,</span><br><span class="line">  unmountAndReleaseReactRootNode: ReactMount.unmountAndReleaseReactRootNode,</span><br><span class="line">  isValidComponent: ReactComponent.isValidComponent</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = React;</span><br></pre></td></tr></table></figure>
<h5 id="core/ReactDefaultInjection-js"><a href="#core/ReactDefaultInjection-js" class="headerlink" title="core/ReactDefaultInjection.js"></a>core/ReactDefaultInjection.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'ReactDOM'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOMForm = <span class="built_in">require</span>(<span class="string">'ReactDOMForm'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultEventPluginOrder = <span class="built_in">require</span>(<span class="string">'DefaultEventPluginOrder'</span>);</span><br><span class="line"><span class="keyword">var</span> EnterLeaveEventPlugin = <span class="built_in">require</span>(<span class="string">'EnterLeaveEventPlugin'</span>);</span><br><span class="line"><span class="keyword">var</span> EventPluginHub = <span class="built_in">require</span>(<span class="string">'EventPluginHub'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactInstanceHandles = <span class="built_in">require</span>(<span class="string">'ReactInstanceHandles'</span>);</span><br><span class="line"><span class="keyword">var</span> SimpleEventPlugin = <span class="built_in">require</span>(<span class="string">'SimpleEventPlugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Inject module for resolving DOM hierarchy and plugin ordering.</span><br><span class="line">   * 注入用来解析 DOM 层级和 plugin 顺序的模块</span><br><span class="line">   */</span></span><br><span class="line">  EventPluginHub.injection.injectEventPluginOrder(DefaultEventPluginOrder);</span><br><span class="line">  EventPluginHub.injection.injectInstanceHandle(ReactInstanceHandles);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Two important event plugins included by default (without having to require</span><br><span class="line">   * them).</span><br><span class="line">   * 默认注入的两个重要的 plugins</span><br><span class="line">   */</span></span><br><span class="line">  EventPluginHub.injection.injectEventPluginsByName(&#123;</span><br><span class="line">    <span class="string">'SimpleEventPlugin'</span>: SimpleEventPlugin,</span><br><span class="line">    <span class="string">'EnterLeaveEventPlugin'</span>: EnterLeaveEventPlugin</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * This is a bit of a hack. We need to override the &lt;form&gt; element</span><br><span class="line">   * to be a composite component because IE8 does not bubble or capture</span><br><span class="line">   * submit to the top level. In order to make this work with our</span><br><span class="line">   * dependency graph we need to inject it here.</span><br><span class="line">   * 这是hack，因为 IE8 的 form 标签不会 bubble 或者 capture submit 操作到 top level。</span><br><span class="line">   * 为了让 dependency grapth 能够工作，这里覆盖下 &lt;form&gt;</span><br><span class="line">   */</span></span><br><span class="line">  ReactDOM.injection.injectComponentClasses(&#123;</span><br><span class="line">    form: ReactDOMForm</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露 inject</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  inject: inject</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里面基本做了很多 module 之间的组合。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventPluginHub - inject - DefaultEventPluginOrder</span><br><span class="line">                        -<span class="ruby"> <span class="constant">ReactInstanceHandles</span></span><br><span class="line"></span>                        -<span class="ruby"> <span class="constant">SimpleEventPlugin</span></span><br><span class="line"></span>                        -<span class="ruby"> <span class="constant">EnterLeaveEventPlugin</span></span><br><span class="line"></span>                        -<span class="ruby"> injectComponentClasses - <span class="constant">ReactDOMForm</span></span></span><br></pre></td></tr></table></figure>
<h5 id="core/ReactDOM-js"><a href="#core/ReactDOM-js" class="headerlink" title="core/ReactDOM.js"></a>core/ReactDOM.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi"></span><br><span class="line">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactNativeComponent = <span class="built_in">require</span>(<span class="string">'ReactNativeComponent'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用第二个参数的同key值修改第一个的</span></span><br><span class="line"><span class="keyword">var</span> mergeInto = <span class="built_in">require</span>(<span class="string">'mergeInto'</span>);</span><br><span class="line"><span class="keyword">var</span> objMapKeyVal = <span class="built_in">require</span>(<span class="string">'objMapKeyVal'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates a new React class that is idempotent and capable of containing other</span><br><span class="line"> * React components. It accepts event listeners and DOM properties that are</span><br><span class="line"> * valid according to `DOMProperty`.</span><br><span class="line"> *</span><br><span class="line"> *  - Event listeners: `onClick`, `onMouseDown`, etc.</span><br><span class="line"> *  - DOM properties: `className`, `name`, `title`, etc.</span><br><span class="line"> *</span><br><span class="line"> * The `style` property functions differently from the DOM API. It accepts an</span><br><span class="line"> * object mapping of style properties to values.</span><br><span class="line"> *</span><br><span class="line"> * 创建一个新的 React class。它是幂等的，可以包含其他的 React Component。可以接受 event listeners 和 DOM properties（右 DOMProperty 校验）</span><br><span class="line"> * 已经开了一篇新的博客，学习下 this constructor prototype, __proto__，暂时不求甚解。</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;string&#125; tag Tag name (e.g. `div`).</span><br><span class="line"> * @param &#123;boolean&#125; omitClose True if the close tag should be omitted.</span><br><span class="line"> * @private</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDOMComponentClass</span>(<span class="params">tag, omitClose</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Constructor = <span class="function"><span class="keyword">function</span>(<span class="params">initialProps, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.construct(initialProps, children);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Constructor.prototype = <span class="keyword">new</span> ReactNativeComponent(tag, omitClose);</span><br><span class="line">  Constructor.prototype.constructor = Constructor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">props, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Constructor(props, children);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates a mapping from supported HTML tags to `ReactNativeComponent` classes.</span><br><span class="line"> * This is also accessible via `React.DOM`.</span><br><span class="line"> *</span><br><span class="line"> * @public</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ReactDOM = objMapKeyVal(&#123;</span><br><span class="line">  <span class="comment">// 略去一些 tag，紧凑下代码</span></span><br><span class="line">  a: <span class="literal">false</span>,</span><br><span class="line">  footer: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// Danger: this gets monkeypatched! See ReactDOMForm for more info.</span></span><br><span class="line">  form: <span class="literal">false</span>,</span><br><span class="line">  h1: <span class="literal">false</span>,</span><br><span class="line">  h6: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// SVG</span></span><br><span class="line">  circle: <span class="literal">false</span>,</span><br><span class="line">  g: <span class="literal">false</span>,</span><br><span class="line">  path: <span class="literal">false</span>,</span><br><span class="line">&#125;, createDOMComponentClass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> injection = &#123;</span><br><span class="line">  injectComponentClasses: <span class="function"><span class="keyword">function</span>(<span class="params">componentClasses</span>) </span>&#123;</span><br><span class="line">    mergeInto(ReactDOM, componentClasses);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.injection = injection;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ReactDOM;</span><br></pre></td></tr></table></figure>
<p>关于 <code>objMap</code> 和 <code>objMapKeyVal.js</code>：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">objMap.js</span><br><span class="line">For <span class="keyword">each</span> key/<span class="built_in">value</span> pair, invokes callback func <span class="operator">and</span> constructs <span class="operator">a</span> resulting</span><br><span class="line"> * object which <span class="operator">contains</span>, <span class="keyword">for</span> every key <span class="operator">in</span> obj, values that are <span class="operator">the</span> <span class="built_in">result</span> <span class="operator">of</span></span><br><span class="line"> * <span class="operator">of</span> invoking <span class="operator">the</span> <span class="function"><span class="keyword">function</span>:</span></span><br><span class="line"></span><br><span class="line"> *   func(<span class="built_in">value</span>, key, iteration)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objMapKeyVal.js</span><br><span class="line">Behaves <span class="operator">the</span> same <span class="keyword">as</span> `objMap` but invokes func <span class="operator">with</span> <span class="operator">the</span> key <span class="keyword">first</span>, <span class="operator">and</span> <span class="built_in">value</span></span><br><span class="line"> * <span class="keyword">second</span>. Use `objMap` unless you need this special <span class="keyword">case</span>.</span><br><span class="line"> * Invokes func <span class="keyword">as</span>:</span><br><span class="line"> *</span><br><span class="line"> *   func(key, <span class="built_in">value</span>, iteration)</span><br></pre></td></tr></table></figure>
<img src="/2016/02/02/Read-React-Structure/objMap.png" alt="objMap vs objMapKeyVal" title="objMap vs objMapKeyVal">
<p>以 <code>objMapKeyVal(obj, func, context)</code> 为例，就是，对一个 <code>obj</code>，调用 <code>func</code> 重新求各 key 的 value。</p>
<p>在关于：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> injection = &#123;</span><br><span class="line">  injectComponentClasses: <span class="function"><span class="keyword">function</span>(<span class="params">componentClasses</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用后者替换前者</span></span><br><span class="line">    mergeInto(ReactDOM, componentClasses);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 <code>core/ReactDefaultInjection.js</code> 使用到：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.injection.injectComponentClasses(&#123;</span><br><span class="line">  form: ReactDOMForm</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="core/ReactMount-js"><a href="#core/ReactMount-js" class="headerlink" title="core/ReactMount.js"></a>core/ReactMount.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ReactEvent = <span class="built_in">require</span>(<span class="string">'ReactEvent'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactInstanceHandles = <span class="built_in">require</span>(<span class="string">'ReactInstanceHandles'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactEventTopLevelCallback = <span class="built_in">require</span>(<span class="string">'ReactEventTopLevelCallback'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'$'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> globalMountPointCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Mapping from reactRoot DOM ID to React component instance. </span><br><span class="line"> * reactRoot DOM ID : React component instace</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> instanceByReactRootID = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Mapping from reactRoot DOM ID to `container` nodes. </span><br><span class="line"> *  reactRoot DOM ID : `container` node</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> containersByReactRootID = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * @param &#123;DOMElement&#125; container DOM element that may contain a React component.</span><br><span class="line"> * @return &#123;?string&#125; A "reactRoot" ID, if a React component is rendered.</span><br><span class="line"> * 可能包含一个 React component 的 container DOM element</span><br><span class="line"> * 可能返回 reactRoot ID，如果这个 React component 已经渲染了</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReactRootID</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> container.firstChild &amp;&amp; container.firstChild.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Mounting is the process of initializing a React component by creatings its</span><br><span class="line"> * representative DOM elements and inserting them into a supplied `container`.</span><br><span class="line"> * Any prior content inside `container` is destroyed in the process.</span><br><span class="line"> * Mounting 是初始化 React component 的过程，通过创建它的代理 DOM 元素，然后插入到提供的 container。</span><br><span class="line"> * 并且，之前如果在 container 里有内容，会被 destroyed。</span><br><span class="line"> *</span><br><span class="line"> *   ReactMount.renderComponent(component, $('container'));</span><br><span class="line"> *</span><br><span class="line"> *   &lt;div id="container"&gt;         &lt;-- Supplied `container`.</span><br><span class="line"> *     &lt;div id=".reactRoot[3]"&gt;   &lt;-- Rendered reactRoot of React component.</span><br><span class="line"> *       // ...</span><br><span class="line"> *     &lt;/div&gt;</span><br><span class="line"> *   &lt;/div&gt;</span><br><span class="line"> *</span><br><span class="line"> * Inside of `container`, the first element rendered is the "reactRoot".</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ReactMount = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Time spent generating markup. 创建 markup 的时间 */</span></span><br><span class="line">  totalInstantiationTime: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Time spent inserting markup into the DOM. 将 markup 插入到 DOM 的时间 */</span></span><br><span class="line">  totalInjectionTime: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Whether support for touch events should be initialized. 是否要支持 touch events */</span></span><br><span class="line">  <span class="comment">// 可以在外面修改 </span></span><br><span class="line">  <span class="comment">// initializeTouchEvents: function(shouldUseTouch) &#123;</span></span><br><span class="line">  <span class="comment">//    ReactMount.useTouchEvents = shouldUseTouch;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  useTouchEvents: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * This is a hook provided to support rendering React components while</span><br><span class="line">   * ensuring that the apparent scroll position of its `container` does not</span><br><span class="line">   * change.</span><br><span class="line">   * 提供的一个 hook，来支持渲染 React components 时保证 container 的 scroll positon 不变。</span><br><span class="line">   * vjeux 有一篇博客讲解 [Scroll Position with React](http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html)</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;DOMElement&#125; container The `container` being rendered into.</span><br><span class="line">   * @param &#123;function&#125; renderCallback This must be called once to do the render.</span><br><span class="line">   */</span></span><br><span class="line">  scrollMonitor: <span class="function"><span class="keyword">function</span>(<span class="params">container, renderCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 怎么没用到 container</span></span><br><span class="line">    renderCallback();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Ensures tht the top-level event delegation listener is set up. This will be</span><br><span class="line">   * invoked some time before the first time any React component is rendered.</span><br><span class="line">   * 保证顶级的 event delegation listener 被设置。这个会被调用几次，知道有一个 React component 被渲染。</span><br><span class="line">   * @param &#123;object&#125; TopLevelCallbackCreator</span><br><span class="line">   * @private</span><br><span class="line">   */</span></span><br><span class="line">  prepareTopLevelEvents: <span class="function"><span class="keyword">function</span>(<span class="params">TopLevelCallbackCreator</span>) </span>&#123;</span><br><span class="line">    ReactEvent.ensureListening(</span><br><span class="line">      ReactMount.useTouchEvents,</span><br><span class="line">      TopLevelCallbackCreator</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Renders a React component into the DOM in the supplied `container`.</span><br><span class="line">   *</span><br><span class="line">   * If the React component was previously rendered into `container`, this will</span><br><span class="line">   * perform an update on it and only mutate the DOM as necessary to reflect the</span><br><span class="line">   * latest React component.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;ReactComponent&#125; nextComponent Component instance to render.</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element to render into.</span><br><span class="line">   * @return &#123;ReactComponent&#125; Component instance rendered in `container`.</span><br><span class="line">   * 这个就是 mouting 的过程了。</span><br><span class="line">   * 详细说来，如果一个 React component 之前已经渲染过了，会执行 update，并只更改必要的 DOM 变更</span><br><span class="line">   * 会暴露 React.renderComponent</span><br><span class="line">   */</span></span><br><span class="line">  renderComponent: <span class="function"><span class="keyword">function</span>(<span class="params">nextComponent, container</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 首先尝试是否在 container 里有没有 React component instance</span></span><br><span class="line">    <span class="keyword">var</span> prevComponent = instanceByReactRootID[getReactRootID(container)];</span><br><span class="line">    <span class="comment">// 如果有</span></span><br><span class="line">    <span class="keyword">if</span> (prevComponent) &#123;</span><br><span class="line">      <span class="comment">// 拿到 props</span></span><br><span class="line">      <span class="keyword">var</span> nextProps = nextComponent.props;</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      ReactMount.scrollMonitor(container, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 所以要做的更新是在 React component 上的方法，replaceProps</span></span><br><span class="line">        prevComponent.replaceProps(nextProps);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> prevComponent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有，就...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保证下顶级的 event delegation listener 被设置</span></span><br><span class="line">    ReactMount.prepareTopLevelEvents(ReactEventTopLevelCallback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存下 React component instace 到 map 里</span></span><br><span class="line">    <span class="keyword">var</span> reactRootID = ReactMount.registerContainer(container);</span><br><span class="line">    instanceByReactRootID[reactRootID] = nextComponent;</span><br><span class="line">    <span class="comment">// 将 component 加载到 Node 中</span></span><br><span class="line">    nextComponent.mountComponentIntoNode(reactRootID, container);</span><br><span class="line">    <span class="keyword">return</span> nextComponent;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Creates a function that accepts a `container` and renders the supplied</span><br><span class="line">   * React component instance into it.</span><br><span class="line">   *</span><br><span class="line">   *   var renderInto = ReactMount.createComponentRenderer(component);</span><br><span class="line">   *   // ...</span><br><span class="line">   *   var component = renderInto($('container'));</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;ReactComponent&#125; component Component instance to render.</span><br><span class="line">   * @return &#123;function(DOMElement): ReactComponent&#125;</span><br><span class="line">   * 创建的是一个 Renderer，还差一个 container</span><br><span class="line">   * 返回一个函数，参数是 `container`，并将提供的 React component 实例渲染进去</span><br><span class="line">   * 这个会暴露在 React.createComponentRenderer</span><br><span class="line">   */</span></span><br><span class="line">  createComponentRenderer: <span class="function"><span class="keyword">function</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ReactMount.renderComponent(component, container);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Constructs a component instance of `constructor` with `initialProps` and</span><br><span class="line">   * renders it into the supplied `container`.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;function&#125; constructor React component constructor.</span><br><span class="line">   * @param &#123;?object&#125; props Initial props of the component instance.</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element to render into.</span><br><span class="line">   * @return &#123;ReactComponent&#125; Component instance rendered in `container`.</span><br><span class="line">   * 提供的是 React component constructor</span><br><span class="line">   * 会暴露 React.constructAndRenderComponent</span><br><span class="line">   */</span></span><br><span class="line">  constructAndRenderComponent: <span class="function"><span class="keyword">function</span>(<span class="params">constructor, props, container</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReactMount.renderComponent(constructor(props), container);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Constructs a component instance of `constructor` with `initialProps` and</span><br><span class="line">   * renders it into a container node identified by supplied `id`.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;function&#125; componentConstructor React component constructor</span><br><span class="line">   * @param &#123;?object&#125; props Initial props of the component instance.</span><br><span class="line">   * @param &#123;string&#125; id ID of the DOM element to render into.</span><br><span class="line">   * @return &#123;ReactComponent&#125; Component instance rendered in the container node.</span><br><span class="line">   * container 是用提供的 id 获取的</span><br><span class="line">   * 会暴露 React.constructAndRenderComponentByID</span><br><span class="line">   */</span></span><br><span class="line">  constructAndRenderComponentByID: <span class="function"><span class="keyword">function</span>(<span class="params">constructor, props, id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReactMount.constructAndRenderComponent(constructor, props, $(id));</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Registers a container node into which React components will be rendered.</span><br><span class="line">   * This also creates the "reatRoot" ID that will be assigned to the element</span><br><span class="line">   * rendered within.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element to register as a container.</span><br><span class="line">   * @return &#123;string&#125; The "reactRoot" ID of elements rendered within.</span><br><span class="line">   * 注册一个 container node 到 container 里。</span><br><span class="line">   * 会创建一个 reactRoot Id，并赋给被渲染的 element</span><br><span class="line">   */</span></span><br><span class="line">  registerContainer: <span class="function"><span class="keyword">function</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// container.firstChild.id</span></span><br><span class="line">    <span class="keyword">var</span> reactRootID = getReactRootID(container);</span><br><span class="line">    <span class="keyword">if</span> (reactRootID) &#123;</span><br><span class="line">      <span class="comment">// If one exists, make sure it is a valid "reactRoot" ID.</span></span><br><span class="line">      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!reactRootID) &#123;</span><br><span class="line">      <span class="comment">// No valid "reactRoot" ID found, create one.</span></span><br><span class="line">      reactRootID = ReactInstanceHandles.getReactRootID(</span><br><span class="line">        globalMountPointCounter++</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    containersByReactRootID[reactRootID] = container;</span><br><span class="line">    <span class="keyword">return</span> reactRootID;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Unmounts and destroys the React component rendered in the `container`.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;DOMElement&#125; container DOM element containing a React component.</span><br><span class="line">   * 卸载和销毁，就通过 reactRootId（container first child Id）拿到，然后调用 component.unmountComponentFromNode</span><br><span class="line">   * 会暴露 React.unmountAndReleaseReactRootNode</span><br><span class="line">   */</span></span><br><span class="line">  unmountAndReleaseReactRootNode: <span class="function"><span class="keyword">function</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reactRootID = getReactRootID(container);</span><br><span class="line">    <span class="keyword">var</span> component = instanceByReactRootID[reactRootID];</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Consider throwing if no `component` was found.</span></span><br><span class="line">    component.unmountComponentFromNode(container);</span><br><span class="line">    <span class="comment">// 删除 container 里的 component</span></span><br><span class="line">    <span class="keyword">delete</span> instanceByReactRootID[reactRootID];</span><br><span class="line">    <span class="comment">// 删除 container，container 的 id 也是用 first child id 表示的</span></span><br><span class="line">    <span class="keyword">delete</span> containersByReactRootID[reactRootID];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Finds the container DOM element that contains React component to which the</span><br><span class="line">   * supplied DOM `id` belongs.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;string&#125; id The ID of an element rendered by a React component.</span><br><span class="line">   * @return &#123;?DOMElement&#125; DOM element that contains the `id`.</span><br><span class="line">   */</span></span><br><span class="line">  findReactContainerForID: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reatRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Consider throwing if `id` is not a valid React element ID.</span></span><br><span class="line">    <span class="keyword">return</span> containersByReactRootID[reatRootID];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Given the ID of a DOM node rendered by a React component, finds the root</span><br><span class="line">   * DOM node of the React component.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;string&#125; id ID of a DOM node in the React component.</span><br><span class="line">   * @return &#123;?DOMElement&#125; Root DOM node of the React component.</span><br><span class="line">   */</span></span><br><span class="line">  findReactRenderedDOMNodeSlow: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先找到 container</span></span><br><span class="line">    <span class="keyword">var</span> reactRoot = ReactMount.findReactContainerForID(id);</span><br><span class="line">    <span class="keyword">return</span> ReactInstanceHandles.findComponentRoot(reactRoot, id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ReactMount;</span><br></pre></td></tr></table></figure>
<p>这里先看下 <code>$.js</code> 和 <code>ge.js</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Find a node by ID. 通过 ID 获取 node</span><br><span class="line"> *</span><br><span class="line"> * If your application code depends on the existence of the element, use $,</span><br><span class="line"> * which will throw if the element doesn't exist.</span><br><span class="line"> * 如果你的应用程序依赖 element 的存在性，使用 $，它会 throw 如果不存在。</span><br><span class="line"> *</span><br><span class="line"> * If you're not sure whether or not the element exists, use ge instead, and</span><br><span class="line"> * manually check for the element's existence in your application code.</span><br><span class="line"> * 如果不要 throw，使用 ge，然后手动检查</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = ge(arg);</span><br><span class="line">  <span class="keyword">if</span> (!element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      arg = <span class="string">'undefined'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg === <span class="literal">null</span>) &#123;</span><br><span class="line">      arg = <span class="string">'null'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Tried to get element "'</span> + arg.toString() + <span class="string">'" but it is not present '</span> +</span><br><span class="line">      <span class="string">'on the page.'</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下 <code>ge.js</code>：</p>
<p>重点是这句：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(arg)</span><br></pre></td></tr></table></figure>
<p>Mounting 的意思：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   ReactMount.renderComponent(component, $(<span class="string">'container'</span>));</span><br><span class="line">*</span><br><span class="line">*   &lt;<span class="keyword">div</span> id=<span class="string">"container"</span>&gt;         &lt;-- Supplied `<span class="keyword">container</span>`.</span><br><span class="line">*     &lt;<span class="keyword">div</span> id=<span class="string">".reactRoot[3]"</span>&gt;   &lt;-- Rendered reactRoot of React component.</span><br><span class="line">*       <span class="comment">// ...</span></span><br><span class="line">*     &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">*   &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<p>关于 scroll position，vjeux 有一篇博客讲解， <a href="http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html" target="_blank" rel="external">Scroll Position with React</a>。</p>
<h5 id="core/ReactCompositeComponent-js"><a href="#core/ReactCompositeComponent-js" class="headerlink" title="core/ReactCompositeComponent.js"></a>core/ReactCompositeComponent.js</h5><p>在要阅读源码前。Composite Component 是有相关文档的，先看下文档。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u58F0_u660E"><a href="#u58F0_u660E" class="headerlink" title="声明"></a>声明</h2><ul>
<li>解读的是结构</li>
</ul>
<h2 id="u8BA1_u5212"><a href]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 Annual Retro]]></title>
    <link href="http://shane.hsi.rocks/2016/02/02/2015-Annual-Retro/"/>
    <id>http://shane.hsi.rocks/2016/02/02/2015-Annual-Retro/</id>
    <published>2016-02-02T09:21:32.000Z</published>
    <updated>2016-02-02T09:21:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5DE5_u4F5C"><a href="#u5DE5_u4F5C" class="headerlink" title="工作"></a>工作</h2><p>2015 年最大的收获就是 <strong>前端</strong> 技能的提升。事实上，从 2015 年 2 月开始，基本上就专注在此，至此有 1 年全职前端经验。</p>
<p>由于进入了 <strong>前端</strong> 这个领域，今年学习了很多东西，并且由于前端社区相对未到成熟阶段，也思考了很多东西。</p>
<p>先列个书单：</p>
<h2 id="u4E66_u5355"><a href="#u4E66_u5355" class="headerlink" title="书单"></a>书单</h2><h4 id="u6280_u672F/_u65B9_u6CD5_u8BBA"><a href="#u6280_u672F/_u65B9_u6CD5_u8BBA" class="headerlink" title="技术/方法论"></a>技术/方法论</h4><ul>
<li>《Spring 3.x企业应用开发实战》（始于14年，阅读70%）</li>
<li>《Java RESTful Web Service实战》</li>
<li>《JavaScript 语言精粹》（重读）</li>
<li>《Effective JavaScript》</li>
<li>《实现领域驱动设计》（重读）</li>
<li>《WebKit技术内幕》</li>
<li>《思考软件，创新设计：A段架构师的思考技术》（阅读50%）</li>
<li>《JavaScript函数式编程》（阅读60%）</li>
<li>《你不知道的JavaScript（上卷）》</li>
<li>《编写可测试的JavaScript代码》</li>
<li>《响应式Web设计：HTML5和CSS3实战》（阅读30%）</li>
<li>《图解CSS3 核心技术与案例实战》（阅读70%）</li>
<li>《Clojure Reactive Programming》（阅读40%）</li>
<li>《Reactive Programming with Rxjs》</li>
</ul>
<p>2015 年看得最多的就是 JavaScript 相关的书籍。源于两点，一定对 JavaScript 语法的陌生迫使我必须熟悉基础，二是在使用了很多框架（React，Redux 等）之后(自上而下)，再结合基础(自下而上)，互补地学习。</p>
<p>关于前端学习还要重点推荐下 《WebKit技术内幕》，它打破了 HTML/CSS 于我的神秘性。HTML/CSS 都是 DSL，通过 WebKit 的底层技术实现，能更宏观地理解这两种声明式语言。有些玄乎，但是建议前端都来看下，由于可以不求甚解，甚至可以当做小说来读。</p>
<p>另外就是这本《Reactive Programming with RxJS》，是花了 11 美元购入的电子书，纪念一下。因为对 RxJS 太过痴迷，等不及国内上市。响应式是一块，函数式又是另一块。涉足前端最令人欣喜地一点就是，对语言的理论有了一定的研究。</p>
<h4 id="u8BBE_u8BA1"><a href="#u8BBE_u8BA1" class="headerlink" title="设计"></a>设计</h4><ul>
<li>《设计之下:搜狐新闻客户端的用户体验设计》</li>
<li>《西文字体2：经典款字体及其表现方法》（阅读30%）</li>
</ul>
<p>前端除了涉及到逻辑（JavaScript），但是它更原始的领域是结构（HTML），布局（CSS）。再往上一步，其实是设计，CSS 其实解决的是排版（多列布局，栅格布局）和定位（盒模型之间），这些其实是设计。第一本是导论类，至于字体，是因为字体相对结构简单又充满美感（今年恰好去过欧洲，能实地领略书中所讲字体的魅力）。</p>
<h2 id="u751F_u6D3B"><a href="#u751F_u6D3B" class="headerlink" title="生活"></a>生活</h2><h4 id="u7231_u60C5"><a href="#u7231_u60C5" class="headerlink" title="爱情"></a>爱情</h4><p>2015 年最大的收获是遇到了人生的另一半。几句箴言：性格相合，未来可期。这里不会细表。不过的确有些变化，比如更切身地体会到了生活与工作的平衡。这是必修的一课。</p>
<h4 id="u65C5_u884C"><a href="#u65C5_u884C" class="headerlink" title="旅行"></a>旅行</h4><p>2015 年末桂花酿成了酒，便和妹子去苏州品尝。作为去年最后一场旅行，我们在平江路的一间茶楼上，细数了下 2015 年去过的城市。</p>
<ul>
<li>2015 年初的东北之行：哈尔滨，亚布力，呼兰区（哈尔滨市），长白山（延吉市），安图县（延吉市），沈阳。</li>
<li>3 月份趁着早春的苏州之行</li>
<li>4 月份武汉最舒服的日子去拜访妹子的老友</li>
<li>7 月份的香港、深圳</li>
<li>国庆的法意土之旅：巴黎，威尼斯，佛罗伦萨，比萨，罗马，伊斯坦布尔。</li>
<li>以及 12 月岁末的苏州之行，喝了桂花酿，去了新开张的诚品书店。</li>
</ul>
<h4 id="u6587_u5B66_u7C7B_u4E66_u5355"><a href="#u6587_u5B66_u7C7B_u4E66_u5355" class="headerlink" title="文学类书单"></a>文学类书单</h4><ul>
<li>《括号里的日本人》</li>
<li>《单身社会》（阅读20%）</li>
<li>《听客溪的朝圣》（阅读50%）</li>
<li>《意大利之魅》</li>
<li>《伊斯坦布尔：一座城市的记忆》（阅读20%）</li>
<li>《托斯卡纳艳阳下（2014版）》（阅读80%）</li>
<li>《三体》三部曲</li>
<li>《梦的解析(彩色插图珍藏版)》（阅读30%）</li>
<li>《门外汉的京都》（阅读80%）</li>
</ul>
<p>很多书是为了国庆的法意土之行准备。三体是在往返欧洲的13小时航班上阅读完毕。</p>
<h2 id="u5EA7_u53F3_u94ED"><a href="#u5EA7_u53F3_u94ED" class="headerlink" title="座右铭"></a>座右铭</h2><p>近 5 年来我正经思考出过两套座右铭。</p>
<p>『旅行是为了见识更多的世界，认识更多的人！』</p>
<p>当时是实习一年，临近毕业即将正式入职。1 年半后，是：</p>
<p>『应为匠人！』</p>
<p>这本身体现了一种沉淀。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5DE5_u4F5C"><a href="#u5DE5_u4F5C" class="headerlink" title="工作"></a>工作</h2><p>2015 年最大的收获就是 <strong>前端</strong> 技能的提升。事实上，从 2015 年]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016 The Shawshank Redemption]]></title>
    <link href="http://shane.hsi.rocks/2016/02/02/2016-The-Shawshank-Redemption/"/>
    <id>http://shane.hsi.rocks/2016/02/02/2016-The-Shawshank-Redemption/</id>
    <published>2016-02-02T02:11:12.000Z</published>
    <updated>2016-02-02T09:21:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Remember，hope is a good thing, maybe the best of things and no good thing ever dies.</p>
<p>It takes a strong man to save himself，and a great man to save another.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Remember，hope is a good thing, maybe the best of things and no good thing ever dies.</p>
<p>It takes a strong man to save hi]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ISP in Front-end Component Development]]></title>
    <link href="http://shane.hsi.rocks/2016/02/02/ISP-in-Front-end-Component-Development/"/>
    <id>http://shane.hsi.rocks/2016/02/02/ISP-in-Front-end-Component-Development/</id>
    <published>2016-02-02T02:08:19.000Z</published>
    <updated>2016-02-02T06:48:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7406_u8BBA_u51C6_u5907"><a href="#u7406_u8BBA_u51C6_u5907" class="headerlink" title="理论准备"></a>理论准备</h2><p>ISP 即 Interface Segregation Principle。</p>
<p>多个客户端特定的接口好于一个通用接口</p>
<blockquote>
<p>many client-specific interfaces are better than one general-purpose interface.</p>
</blockquote>
<p>客户端不应该依赖不需要的方法</p>
<blockquote>
<p>The interface-segregation principle (ISP) states that no client should be forced to depend on methods it does not use.</p>
</blockquote>
<p>这种缩水的接口有叫做『角色接口』。</p>
<blockquote>
<p>ISP splits interfaces which are very large into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them. Such shrunken interfaces are also called role interfaces</p>
</blockquote>
<p>参考术语：<a href="https://en.wikipedia.org/wiki/GRASP_(object-oriented_design" target="_blank" rel="external">GRASP (object-oriented design)</a>)，General Responsibility Assignment Software Patterns (or Principles)。</p>
<p>我记得 Erik Meijer 在 youtube 上有个讲座介绍了接口分离原则的数学证明。回头翻看下。</p>
<p>参考链接：<a href="https://en.wikipedia.org/wiki/Software_craftsmanship" target="_blank" rel="external">Software craftsmanship</a>。</p>
<p>什么是接口？</p>
<p>在计算机系统中，接口是两个组件交换信息的共享边界。这种信息的交换可能是双向的（send/receive data) 也可能是单向的。</p>
<blockquote>
<p>an interface is a shared boundary across which two separate components of a computer system exchange information. </p>
</blockquote>
<p><a href="http://martinfowler.com/bliki/RoleInterface.html" target="_blank" rel="external">Role Interface</a> 的反面是 Header Interface（即一个 Interface，就是把 public methods 都写出 interface）。</p>
<p>使用 Role Interface，就是，你要了解 exchange 的具体的 information。而 Header Interface 认为 supplier 不需关心谁用你的 service，或怎么用。其实就是控制权的问题。Role 控制权在 consumer，Header 控制权在 supplier。长远来看，关注 consumer 是友好的。</p>
<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><p>前端开发（React.js）如何利用 interface？</p>
<p>按照刚才的解释，是要找到其中的 supplier 和 consumer，然后定义它们交换的信息。</p>
<p>这里的 supplier 就是编写的组件。consumer 就是高阶组件。它们之间需要交换的信息就是 props。</p>
<p>其实更担心的是，如果功能要增加，如何扩展？一种原则是，不要去扩展，而是重新复制一份。然后看情况是否需要提取公用的逻辑。不要把公用的边界提前设定。</p>
<p>目前的 props 看来更多的还是数据。可能会有部分展示相关的属性（初始值）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7406_u8BBA_u51C6_u5907"><a href="#u7406_u8BBA_u51C6_u5907" class="headerlink" title="理论准备"></a>理论准备</h2><p>ISP 即 Interface Segregat]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Books to Read]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Books-to-Read/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Books-to-Read/</id>
    <published>2016-01-29T09:28:38.000Z</published>
    <updated>2016-02-02T09:21:34.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://book.douban.com/subject/1491830/" target="_blank" rel="external">栅格系统与版式设计</a>，参考链接：<a href="https://zh.wikipedia.org/wiki/%E6%A0%85%E6%A0%BC%E8%AE%BE%E8%AE%A1" target="_blank" rel="external">栅格设计</a></p>
</li>
<li><p><a href="http://book.douban.com/subject/1276767/" target="_blank" rel="external">设计几何学</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p><a href="http://book.douban.com/subject/1491830/" target="_blank" rel="external">栅格系统与版式设计</a>，参考链接：<a href="https://zh.wikipedi]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thoughts on Web Development (To Update)]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Thoughts-on-Web-Development-To-Update/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Thoughts-on-Web-Development-To-Update/</id>
    <published>2016-01-29T09:02:05.000Z</published>
    <updated>2016-02-02T09:58:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4EC0_u4E48_u662F_UI"><a href="#u4EC0_u4E48_u662F_UI" class="headerlink" title="什么是 UI"></a>什么是 UI</h2><p>UI 层抽象成最终的 HTML（DOM 结构，树状层级结构）和样式（CSS）。这块可以再次回顾下《WebKit技术内幕》中的 render 部分，回顾的原因是拟合出适当的布局方式。</p>
<p>UI 上会绑定 Event。抽象成两种：</p>
<ul>
<li>Lifecycle Event</li>
<li>Input Event (keyboard, mouse, touch etc.)</li>
</ul>
<h2 id="u5982_u679C_u8981_u5B9E_u73B0_u53EF_u89C6_u5316_u7F16_u8F91_uFF1F"><a href="#u5982_u679C_u8981_u5B9E_u73B0_u53EF_u89C6_u5316_u7F16_u8F91_uFF1F" class="headerlink" title="如果要实现可视化编辑？"></a>如果要实现可视化编辑？</h2><p>组件是自管理的。所以，先假设组件是 atom。暴露出来 <code>component_id</code>。</p>
<p>如何组织（或者叫做布局）组件呢？</p>
<h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>参考下 <a href="https://www.lightningdesignsystem.com/design/layout" target="_blank" rel="external">lightningdesignsystem</a>。</p>
<p>记住这些名词：</p>
<ul>
<li>visual grids 栅格系统，常用的布局方式</li>
<li>spacing 间距（留白），在栅格系统中也有体现，gutter。</li>
<li>sections 分区块。是通过栅格系统作为标尺划分区块。</li>
</ul>
<blockquote>
<p>栅格设计系统（又称网格设计系统、标准尺寸系统、程序版面设计、瑞士平面设计风格、国际主义平面设计风格）。<br>瑞士平面设计风格：通过瑞士平面设计杂志的宣传<br>国际主义平面设计风格：由于这种风格简单明确，传达功能准确，因而很快得到世界范围内的普遍认可，成为战后影响最大的一种平面设计风格，也是国际最流行的风格。</p>
</blockquote>
<p>所以，对于 Layout，可以提供的是设计工具，最原始的是基于栅格系统，然后再在上面设计绘制区块。</p>
<p>当然，这么灵活，要做一些 template。</p>
<p>如何选择（或者设计）template？</p>
<ul>
<li><p>Know your use case. Understand how the information on the page will be used. 了解信息在页面上如何被使用</p>
</li>
<li><p>Prioritize your content. Organize your content to highlight the most important information. 突出最重要的信息。参考 <a href="http://www.uisdc.com/understanding-the-f-layout-in-web-design" target="_blank" rel="external">网页设计中的F式布局</a></p>
</li>
<li><p>Group related content together. Make it efficient for users to work with the content. 内容之间的合作，让用户更高效使用。</p>
</li>
</ul>
<p>我们看下 Lighting 提供的几种 template：</p>
<h5 id="Record_Layouts"><a href="#Record_Layouts" class="headerlink" title="Record Layouts"></a>Record Layouts</h5><p>Record layouts consist of a page header, a main content area and a sidebar. The content that should appear in each of these areas depends on the primary use case you are solving for.</p>
<p>记录布局：包含 </p>
<ul>
<li>page header - 显示区域很大（横跨 viewport），固定，scroll 时可以 collapse，增加垂直高度。</li>
<li>main content area - 2/3</li>
<li>sidebar - 最小宽度 400px。如果 reference layout 在 Master/Detail，collapse 成 main content area 的一个 tab。</li>
</ul>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/record_layout.png" alt="Record Layout" title="Record Layout">
<p>更多解释：<a href="https://developer.salesforce.com/trailhead/en/lightning_design_system/lightning-design-system6" target="_blank" rel="external">Laying out a Record Home Page and Using Advanced Components</a></p>
<h5 id="Workspace_Layouts"><a href="#Workspace_Layouts" class="headerlink" title="Workspace Layouts"></a>Workspace Layouts</h5><p>A workspace layout facilitates user collaboration on records. It highlights the activity and discussion that is happening around a record by placing this information prominently in the larger content area, while simultaneously displaying the related records in the sidebar. A summary of the record’s details are in a panel above the content area for easy reference.</p>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/workspace_layout.svg" alt="Workspace Layout" title="Workspace Layout">
<p>方便用户在 records 上的协作。</p>
<ul>
<li>page header 继续保持</li>
<li>main content area（上部，较小）当前 record 一些详细信息（元数据）</li>
<li>main content area（下部，较大）当前发生的 record（activity 或者 discussion）</li>
<li>sidebar 相关的 records</li>
</ul>
<h5 id="Reference_Layouts"><a href="#Reference_Layouts" class="headerlink" title="Reference Layouts"></a>Reference Layouts</h5><p>A reference layout is optimized for when users are primarily jumping to related records. It highlights the related records by displaying this information in the larger content area. Collaborative items are placed in the smaller sidebar. A summary of the record’s details are in a panel above the content area for easy reference.</p>
<h5 id="List_Layouts"><a href="#List_Layouts" class="headerlink" title="List Layouts"></a>List Layouts</h5><p>A list layout consists of a simple page header and body that allows users to switch between predefined lists of items. Common controls include sorting, filtering, charting, and actions for the item type. Users can also switch between list layouts using the “Display” menu.</p>
<p>Choose the types of list layout that best supports your use case:</p>
<ul>
<li>Table — Best for managing large sets of data and comparing values</li>
<li>Board — Use to monitor a workflow or milestones where users can drag cards between stages to indicate progress</li>
<li>Master-Detail — Allows users to see and edit the details of an item on one screen</li>
</ul>
<p>示例：</p>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/record_layout_sample.png" alt="Record Layout Sample" title="Record Layout Sample">
<p>再有几个示例：</p>
<p>board</p>
<img src="/2016/01/29/Thoughts-on-Web-Development-To-Update/board_sample.png" alt="Board Sample" title="Board Sample">
<h5 id="u518D_u8C08_Layout"><a href="#u518D_u8C08_Layout" class="headerlink" title="再谈 Layout"></a>再谈 Layout</h5><p>所以，最广度的 Layout 是固定几个 section：</p>
<p>比如：navbar，sidebar(left)，然后在某些 layout 里有 page header。</p>
<p>然后基本就是双栏布局。sidebar(right)，基本上就是 list。大概上如此。</p>
<p>必须做模板。从业务中提取。</p>
<p>但是，有些组件的类型，是特别适用于 Layout 的某些 section 的，有些是通用的，特别是常用的表单组件。</p>
<p>每种抽象出来的 Layout Template，需要发散下，是否可以有相应的 tablet，mobile 形态。猜测，由于 mobile 的 viewport 很小，很可能要做一些向上滑入的隐藏 section。而在 PC 中，对应的就是 steps，和 Modal 这些。</p>
<h5 id="Layout__u7684_u53EF_u89C6_u5316_u8BBE_u8BA1"><a href="#Layout__u7684_u53EF_u89C6_u5316_u8BBE_u8BA1" class="headerlink" title="Layout 的可视化设计"></a>Layout 的可视化设计</h5><p>假设做出来了这样一个 Layout Builder。</p>
<p>其实无法对 section 做更多的自定义的编辑（类似于 Xcode 的 Auto layout 这些）。因为我要做出三套。相信，这些 Layout 的布局加上，section 间的协作都是有最佳方式的。做些，Layout 的可视化设计，为选择预定义好的 template。Template 还可以对内容的布局做一些规则的限定。</p>
<p>其实，也就是把 Layout template 当做组件了。</p>
<ul>
<li>Page</li>
<li>Layout template</li>
<li>Section - navbar, left sidebar, page header, main content, right sidebar, 其中有些 section 是在 scroll area 中。对于，scroll，要寻找下浏览器原生实现。</li>
<li>Section template - 比如 navbar，left sidebar 就有基本固定的布局方式。当然，如果让 navbar 再细分，也有可能有多中 navbar template。</li>
<li>另外，每种 Section 是对应有多种 Components 可选，但不是所有。</li>
</ul>
<h4 id="u7EC4_u4EF6"><a href="#u7EC4_u4EF6" class="headerlink" title="组件"></a>组件</h4><p>Layout 虽然可以看成组件，但是又不完全是。</p>
<p>Layout 仅仅是布局。也就是组件的组织方式。它没有任何其他的展示特性。</p>
<p>组件要负责的就多了。</p>
<ul>
<li>组件要等撑满布局</li>
<li>组件要负责内部结构和展示</li>
<li>组件是有生命周期的</li>
<li>组件要有动态数据</li>
<li>组件负责获取（或者响应）动态数据</li>
<li>组件可以绑定事件</li>
</ul>
<p>注意，组件中特别的一种责任是和数据打交道。数据又分为两块：</p>
<ul>
<li>数据展示在哪里？</li>
<li>数据如何获取？</li>
</ul>
<p>展示在哪里？使用占位符，比如 <code>props.name</code> 这种。</p>
<p>如何获取？组件所需的所有占位符，最终是一种数据结构（比如 JSON 这种 tree）。所以，如何获取还没有到获取的细节，而是对外宣称，我要获取这样子的。至于细节部分，可以和组件分离。</p>
<p>分离的方式，就是让组件响应数据。</p>
<p>其实当然也有可能用数据完全映射到组件。主要是两类数据：</p>
<ul>
<li>应用数据</li>
<li>展示数据</li>
</ul>
<p>先从读开始理解：</p>
<p>应用数据用 atom store 很好理解（其实不是 atom store 啦，而是组件作为 pure function，不需要维护任何状态，不过，维护状态的好处是什么？说实话，撇开性能不谈，没有看到什么好处。）</p>
<p>展示数据呢？似乎是应该放在 component state 里。实际上，放在 component 里的原因无非是，它的 scope 可能仅仅限于 component。事实上呢？不一定。因为，放在 component 里，代表了没有 initial state 这种概念了，因为一刷新，没有及时 preserve 的 state （到 persistent layer，也即是 atom store） 都会丢失。当然可以在 state 里放着，然后在 will unmount 前，preserve 起来。</p>
<p>从写的角度理解：</p>
<p>应用数据如何会写呢？我目前能想到的就是响应事件。然后（从最终结果上看）修改两块地方：1. 持久化到 atom store（然后持久化到服务端）；2. 反馈显示到 component，也就是界面上。来看看数据流：</p>
<ol>
<li>mutation -&gt; atom store</li>
<li>mutation -&gt; component</li>
</ol>
<p>再回顾读里面的数据流：</p>
<ul>
<li>atom store -&gt; component</li>
</ul>
<p>所以，合并下三者，就成单向数据流了（响应式是 undirectional data flow 的形成条件）。</p>
<p>这样组件通信也解决了，因为 component 之间根本不会（也不需要）知道对方，只需要知道数据，数据和 component 又是分离的（component 只有数据的结构）。</p>
<p>回过头来在思考应用数据和展示数据，就可以弄出两个 data stream 了，然后 combine 起来。毕竟数据的责任是不同的。如果 UI 有优先级的需求（先响应展示还是先应用数据），逻辑上分离开是充分条件。</p>
<p>侧边证明了 Reactive 的数据结构还是很有利的。后面找个时间研究下其他异步方式。因为我感觉很多异步解决方案是用同步方法拟合。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Layout</span><br><span class="line"> <span class="string">|</span></span><br><span class="line">\<span class="string">|/</span></span><br><span class="line">Component</span><br></pre></td></tr></table></figure>
<p>之间的 interface 是，Layout 需要知道 component_id，次序（类似于 document flow 的次序），flow 的方式（layout 的 section 已经预定好了，所以就是简单的从小到大的顺序）。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Component</span><br><span class="line"> <span class="string">|</span></span><br><span class="line">\<span class="string">|/</span></span><br><span class="line">Data</span><br></pre></td></tr></table></figure>
<p>之间的 interface 是：数据结构，以及 mutation 会改变的数据结构这些。</p>
<h2 id="Virtaul_DOM"><a href="#Virtaul_DOM" class="headerlink" title="Virtaul DOM"></a>Virtaul DOM</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Virtual DOM</span><br><span class="line"> <span class="string">|</span></span><br><span class="line">\<span class="string">|/</span></span><br><span class="line">DOM</span><br></pre></td></tr></table></figure>
<p>也要找一个接口，目的就是渲染（和更新） DOM。至于细节，可以自由切换：</p>
<ul>
<li>Virtual DOM</li>
<li>Ember Glimmer</li>
<li>Incremental DOM</li>
</ul>
<h2 id="u6682_u505C_u7136_u540E_u6574_u7406_u4E0B"><a href="#u6682_u505C_u7136_u540E_u6574_u7406_u4E0B" class="headerlink" title="暂停然后整理下"></a>暂停然后整理下</h2><h4 id="u5173_u4E8E_u6807_u51C6"><a href="#u5173_u4E8E_u6807_u51C6" class="headerlink" title="关于标准"></a>关于标准</h4><p>司徒正美最近在写关于 HTML 标准的博客，<a href="http://www.cnblogs.com/rubylouvre/p/5121459.html" target="_blank" rel="external">表单元素 开篇</a>。非常赞同。HTML 标准，CSS 标准，这里的标准有两层含义：</p>
<ul>
<li>是浏览器内核级别的实现</li>
<li>实现了常用的对外接口（这里的接口包括在 screen 的绘制，和接收的外界 event，比如 touch，mouse，keyboard 等），特别是 event 处理很麻烦，细节太多。</li>
</ul>
<p>所以，标准一是性能好，二是功能全。而且是很高质量的实现，没必要对标准重新实现，而是利用标准提供的接口来扩展功能。</p>
<p>不要在封装上再做封装，但是也要找到停下来的地方。我认为这个地方就是标准。</p>
<h4 id="u627E_u5230_u9886_u57DF_u6A21_u578B_uFF0C_u5B9A_u4E49_u5B83_u4EEC_u7684_u8FB9_u754C"><a href="#u627E_u5230_u9886_u57DF_u6A21_u578B_uFF0C_u5B9A_u4E49_u5B83_u4EEC_u7684_u8FB9_u754C" class="headerlink" title="找到领域模型，定义它们的边界"></a>找到领域模型，定义它们的边界</h4><ul>
<li>结构</li>
<li>展示</li>
<li>（动画）</li>
<li>数据<ul>
<li>读数据</li>
<li>写数据</li>
</ul>
</li>
</ul>
<p>数据是完全可以后面再考虑。</p>
<p>先考虑结构，展示。甚至假设啊，没有 css。也要能合理地显示。</p>
<h4 id="CSS__u7684_u91CD_u7528"><a href="#CSS__u7684_u91CD_u7528" class="headerlink" title="CSS 的重用"></a>CSS 的重用</h4><h5 id="u4EC0_u4E48_u662F_u4E3B_u9898_uFF1F"><a href="#u4EC0_u4E48_u662F_u4E3B_u9898_uFF1F" class="headerlink" title="什么是主题？"></a>什么是主题？</h5><p>主题：</p>
<ul>
<li>最简单是色系的变化</li>
<li>可能有一些圆角，直角</li>
<li>字体</li>
</ul>
<p>再复杂一点，我觉得就没有重用的必要了。不如从结构+样式单独写一套。（看似没有重用，但是数据层肯定重用了。结构+展示很薄，代码量不大。）</p>
<h5 id="u5982_u4F55_u5199_u6837_u5F0F_uFF1F"><a href="#u5982_u4F55_u5199_u6837_u5F0F_uFF1F" class="headerlink" title="如何写样式？"></a>如何写样式？</h5><p>布局是确定的。要么用 lost，只要改下 值 就可以生成两套，一套基于浮动，一套基于 flexbox。不过，使用这种 DSL 最大的问题就是，是否对标准破坏太多，或者封装太多。</p>
<p>现在可以直接使用 flexbox。</p>
<p>然后布局里面就用没有样式的元素。</p>
<p>然后，如果要加样式，认真思考。慢慢总结规律。现在还没有总结出规律。</p>
<p>结构和样式的接口就是 className。总结规律，让暴露的 DOM 结构越少越好。</p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>jQuery 这种好东西（封装恶心细节的东西），一定要用的。即使接口不好，可以封装啊。</p>
<p>React 有两块，一块是接口设计很好。至于实现什么的，可以用多种。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4EC0_u4E48_u662F_UI"><a href="#u4EC0_u4E48_u662F_UI" class="headerlink" title="什么是 UI"></a>什么是 UI</h2><p>UI 层抽象成最终的 HTML（DOM 结构，树状层]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Twitter Likes Collections Before 060129]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Twitter-Likes-Collections-Before-060129/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Twitter-Likes-Collections-Before-060129/</id>
    <published>2016-01-29T03:17:40.000Z</published>
    <updated>2016-01-29T08:40:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="RxJS"><a href="#RxJS" class="headerlink" title="RxJS"></a>RxJS</h2><ul>
<li><p>egghead.io 上的 RxJS <a href="https://egghead.io/lessons/rxjs-reacting-to-multiple-inputs-using-rxjs-s-combinelatest?utm_content=bufferc97fc&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer" target="_blank" rel="external">课程</a></p>
</li>
<li><p>RxJS 的 <a href="https://overcast.fm/+BPab3rsQQ" target="_blank" rel="external">podcast</a>，采访的 Matthew Podwysocki </p>
</li>
<li><p>RxJS 的<a href="https://github.com/annatomka/rxjs-examples#image-sampler-example" target="_blank" rel="external">示例</a></p>
</li>
<li><p>RxJS 的 Ben Lesh 的 youtube <a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=9on6u7pI3vY%C2%A0%E2%80%A6" target="_blank" rel="external">视频</a></p>
</li>
<li><p><a href="https://medium.com/@BrianDiPalma/thoughts-on-rxjs-cf3562e20d74#.g9n42ub2k" target="_blank" rel="external">Thoughts on RxJS</a>，<a href="https://speakerdeck.com/staltz/the-whole-future-declared-in-a-var" target="_blank" rel="external">另一篇</a></p>
</li>
<li><p><a href="http://staltz.com/how-to-debug-rxjs-code.html" target="_blank" rel="external">如何调试 RxJS 代码</a></p>
</li>
<li><p>【Netflix 如何使用 Node](<a href="http://thenewstack.io/netflix-uses-node-js-power-user-interface/" target="_blank" rel="external">http://thenewstack.io/netflix-uses-node-js-power-user-interface/</a>)</p>
</li>
<li><p><a href="https://github.com/jadbox/rxjs-cluster" target="_blank" rel="external">Using Rx, maximize CPU usage in Node by using the new clusterMap that uses cluster/forked processes</a></p>
</li>
<li><p><a href="https://jsfiddle.net/MichalZalecki/h2xfjgh6/" target="_blank" rel="external">Use Rx.Scheduler.requestAnimationFrame for animations </a></p>
</li>
<li><p>对比下 <a href="https://medium.com/@puppybits/rxjs-is-great-so-why-have-i-moved-on-534c513e7af3?source=latest---" target="_blank" rel="external">ClosureScript</a></p>
</li>
<li><p><a href="https://github.com/escherpad/luna#wanna-use-reactive-extention-rxjs-and-redux-in-your-project-but-dont-know-how" target="_blank" rel="external">Hacker News - Show HN: A Reactive (Rxjs) Redux Lib with Explainations http://ift.tt/1UK1oBV </a></p>
</li>
<li><p><a href="https://github.com/garbles/yolk" target="_blank" rel="external">yolk</a> Yolk (An RxJS UI Library) in 7 Minutes, <a href="https://egghead.io/lessons/rxjs-yolk-an-rxjs-ui-library-in-7-minutes?utm_content=bufferc279c&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer" target="_blank" rel="external">egghead.io</a></p>
</li>
<li><p><a href="https://github.com/mattpodwysocki/rx-fluxish" target="_blank" rel="external">mattpodwysocki/rx-fluxish</a></p>
</li>
<li><p><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="external">The introduction to Reactive Programming you’ve been missing</a>，这个有 egghead 视频。</p>
</li>
<li><p><a href="https://github.com/trxcllnt/reaxtor" target="_blank" rel="external">Falcor + Rx + virtual-dom</a></p>
</li>
<li><p><a href="http://moumne.com/rx-training-games/#?title=meteorites" target="_blank" rel="external">Rx Training Games</a></p>
</li>
<li><p><a href="http://staltz.com/rx-glitches-arent-actually-a-problem.html" target="_blank" rel="external">RX GLITCHES AREN’T ACTUALLY A PROBLEM</a></p>
</li>
<li><p><a href="https://github.com/ReactiveX/RxJS/issues/752#issuecomment-161234549" target="_blank" rel="external">This comment by Paul Taylor is better than 1000 blog posts. https://github.com/ReactiveX/RxJS/issues/752#issuecomment-161234549 … Explains Observables and how Promises are not Futures.</a></p>
</li>
<li><p><a href="https://medium.com/@ReactiveConf/richard-feldman-the-reactive-approach-is-a-great-fit-for-the-vast-majority-of-web-apps-aac93e245fc9#.kj6uivwql" target="_blank" rel="external">Richard Feldman: The Reactive Approach Is a Great Fit for the Vast Majority of Web Apps</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=QhjALubBQPg&amp;feature=youtu.be" target="_blank" rel="external">.@trxcllnt’s talk at @ReactiveConf on #RxJS 5 goes into more detail on the work done than my talks. Great stuff! https://youtu.be/QhjALubBQPg </a></p>
</li>
</ul>
<h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><ul>
<li><p>一个可视化编辑的 CMS <a href="https://github.com/relax/relax" target="_blank" rel="external">relax/relax</a>，可以 Linking data from a schema in the page builder。（使用了 GraphQL）。</p>
</li>
<li><p><a href="https://github.com/jlongster/backend-with-webpack/blob/master/gulpfile.js#L75" target="_blank" rel="external">gulp 结合 webpack 示例</a></p>
</li>
<li><p>测试相关，I made this react-testing-recipes based on course from @eggheadio and @_ericelliott ‘s brilliant work，<a href="https://github.com/fraserxu/react-testing-recipes" target="_blank" rel="external">链接</a></p>
</li>
<li><p>另一个设计工具 <a href="https://twitter.com/fusetools" target="_blank" rel="external">Fuse</a></p>
</li>
<li><p><a href="https://github.com/ericclemmons/react-resolver" target="_blank" rel="external">ericclemmons/react-resolver</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/34403269/what-is-the-best-way-deal-with-fetch-error-in-react-redux/34403521#34403521" target="_blank" rel="external">I just answered how to handle Async #reactjs #redux errors &amp; display “global user messages” </a></p>
</li>
<li><p><a href="https://medium.com/modern-user-interfaces/a-journey-into-reactive-user-interfaces-101-1daea5702486#.i5vr0ctwf" target="_blank" rel="external">A journey into Reactive User Interfaces 101</a></p>
</li>
<li><p><a href="https://github.com/heroku/react-refetch?utm_content=buffer8dfc2&amp;utm_medium=twitter&amp;utm_source=changelog&amp;utm_campaign=buffer" target="_blank" rel="external">heroku/react-refetch</a> 学习下一些场景。越来越发现，不需要搞复杂的 Flux，特别是生产代码中。</p>
</li>
<li><p><a href="http://www.christianalfoni.com/articles/2015_11_30_Exploring-Elm-part1" target="_blank" rel="external">Exploring Elm - Part 1</a></p>
</li>
<li><p><a href="https://github.com/facebook/react/issues/5465" target="_blank" rel="external">isMounted() will go away. Avoid it in new code. As always, please refrain from knee-jerk reactions in comments ;-) </a></p>
</li>
<li><p><a href="https://auth0.com/blog/2015/11/20/face-off-virtual-dom-vs-incremental-dom-vs-glimmer/" target="_blank" rel="external">React Virtual DOM vs Incremental DOM vs Ember’s Glimmer: Fight</a></p>
</li>
<li><p><a href="https://github.com/heroku/react-refetch" target="_blank" rel="external">A simple, declarative, and composable way to fetch data for React components</a></p>
</li>
<li><p><a href="https://github.com/Gozala/reflex" target="_blank" rel="external">Elm in JS Library</a></p>
</li>
<li><p><a href="http://www.alexkyte.me/2015/08/mutability-and-persistent-data.html?m=1" target="_blank" rel="external">Mutability and Persistent Data Structures: Retroactivity</a> Data structures with time-traveling built in! <a href="http://www.alexkyte.me/2015/08/mutability-and-persistent-data.html?m=1" target="_blank" rel="external">http://www.alexkyte.me/2015/08/mutability-and-persistent-data.html?m=1</a> …<br>@dan_abramov interesting for framework-agnostic time travel<br>11 retweets 37 likes</p>
</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul>
<li><p>一篇关于 Node 企业级开发的<a href="https://medium.com/@nodesource/the-enterprise-node-community-987ab4221ef5#.db5l4k4ax" target="_blank" rel="external">文章</a>，<a href="http://thenewstack.io/tns-analysts-node-js-tooling-enterprise-please/" target="_blank" rel="external">另一篇</a></p>
</li>
<li><p><a href="http://www.alexkras.com/simple-guide-to-finding-a-javascript-memory-leak-in-node-js/" target="_blank" rel="external">Node.js 内存泄露检查</a></p>
</li>
<li><p>创建交互式 Node 命令行<a href="https://www.youtube.com/watch?v=QLat0Y3jqUA" target="_blank" rel="external">工具</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=gHrrgZmoY6E" target="_blank" rel="external">Make Node.js Debuggable</a></p>
</li>
<li><p><a href="http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html" target="_blank" rel="external">Debugging Node.js in Production - </a></p>
</li>
<li><p><a href="https://developer.atlassian.com/blog/2015/11/scripting-with-node/" target="_blank" rel="external">Building Command Line Tools with Node: </a></p>
</li>
</ul>
<h2 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h2><ul>
<li><a href="https://github.com/lodash/lodash/releases/tag/4.0.0" target="_blank" rel="external">lodash 4.0</a></li>
</ul>
<h2 id="u535A_u5BA2"><a href="#u535A_u5BA2" class="headerlink" title="博客"></a>博客</h2><ul>
<li><p>facebook designer Julie Zhuo 的<a href="https://medium.com/the-year-of-the-looking-glass/write-in-2016-938f569b535e#.1oqvdlgwj" target="_blank" rel="external">博客</a></p>
</li>
<li><p><a href="https://medium.com/@puppybits" target="_blank" rel="external">Puppybits</a> Sr Developer on iOS, ClojureScript, ReactJS, full stack and product creation. UX and Econ junkie. Ex-R/GA, Ex-Nike, Ex-Disney, currently at Capital One.</p>
</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><p><a href="http://www.webdirections.org/blog/asynchronous-frontiers-in-javascript-domenic-denicola-code-2015/" target="_blank" rel="external">异步 JavaScript 现状</a></p>
</li>
<li><p><a href="https://medium.com/@housecor/12-rules-for-professional-javascript-in-2015-f158e7d3f0fc#.j42o9wy8w" target="_blank" rel="external">12 Rules for Professional JavaScript in 2015 - </a></p>
</li>
<li><p><a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.5mm1n1mwc" target="_blank" rel="external">Javascript Fatigue</a></p>
</li>
<li><p><a href="https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80#.qi3qkoaxc" target="_blank" rel="external">@addyosmani for anyone wondering about tree-shaking vs. dead-code elimination,</a></p>
</li>
<li><p><a href="http://www.sitepoint.com/how-to-schedule-background-tasks-in-javascript/" target="_blank" rel="external">How to Schedule Background Tasks in JavaScript</a> 新的 API requestIdleCallback</p>
</li>
<li><p><a href="https://github.com/vsavkin/CoolCodeSnippets" target="_blank" rel="external">vsavkin/CoolCodeSnippets</a> This repository shows two ways of implementing the object algebras pattern in TypeScript. The two ways are with and without using classes.</p>
</li>
<li><p><a href="https://medium.com/@mweststrate/how-to-create-strongly-typed-npm-modules-1e1bda23a7f4#.rxgfq2d2t" target="_blank" rel="external">How to create strongly-typed npm packages</a></p>
</li>
<li><p><a href="https://blog.oio.de/2014/01/31/an-introduction-to-typescript-module-system/" target="_blank" rel="external">An introduction to TypeScript’s module system</a></p>
</li>
<li><p><a href="http://blog.getify.com/concurrently-javascript-1/" target="_blank" rel="external">Concurrently JavaScript: 3 Posts on Concurrency in JS - </a></p>
</li>
</ul>
<h2 id="CSS__u548C__u52A8_u6548"><a href="#CSS__u548C__u52A8_u6548" class="headerlink" title="CSS 和 动效"></a>CSS 和 动效</h2><ul>
<li><p><a href="https://github.com/simplaio/rucksack" target="_blank" rel="external">simplaio/rucksack</a>，使用 postcss 做了一些 shorthand 写法。可以先学习下写法。但是我更喜欢写标准。</p>
</li>
<li><p><a href="https://react.rocks/tag/react-motion" target="_blank" rel="external">React Motion demo</a>，<a href="https://react.rocks/example/react-motion_Water_Ripples" target="_blank" rel="external">另一个</a></p>
</li>
<li><p><a href="http://flexbox.help/" target="_blank" rel="external">Test CSS Flexbox Rules Live</a>，<a href="http://flexboxfroggy.com/" target="_blank" rel="external">另一篇</a></p>
</li>
<li><p><a href="http://johnpolacek.github.io/expressive-css/" target="_blank" rel="external">Expressive CSS</a></p>
</li>
<li><p><a href="http://ai.github.io/postcss-isolation/" target="_blank" rel="external">Fix Global CSS with PostCSS</a></p>
</li>
</ul>
<h2 id="u5DE5_u5177_Utils"><a href="#u5DE5_u5177_Utils" class="headerlink" title="工具 Utils"></a>工具 Utils</h2><ul>
<li><p><a href="http://www.sitepoint.com/front-end-tools-favorite-finds-2015/" target="_blank" rel="external">Front-end Tools: Some of My Favorite Finds of 2015</a>，这个挺好玩 <a href="http://arasatasaygin.github.io/is.js/" target="_blank" rel="external">is.js</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=BzmuEhBc3yk&amp;feature=youtu.be" target="_blank" rel="external">Angular 2 Http - Working with RxJS Observables</a></p>
</li>
<li><p><a href="http://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/" target="_blank" rel="external">Bliss: A 3KB Library for Happier Vanilla JS - </a></p>
</li>
<li><p><a href="https://cyclicmaterials.github.io/2015/11/26/release-cycle-hammer-driver-0.1.1.html" target="_blank" rel="external">Detect touch gestures with Cycle.js and Hammer.js</a></p>
</li>
<li><p><a href="https://github.com/kittens/lerna" target="_blank" rel="external">:dragon: A tool for managing JavaScript projects with multiple packages.</a></p>
</li>
<li><p><a href="http://engineroom.teamwork.com/10-things-to-know-about-gulp/" target="_blank" rel="external">10 things to know about Gulp</a></p>
</li>
</ul>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><ul>
<li><a href="https://github.com/acdlite/router#proof-of-concept-react-router-like-api" target="_blank" rel="external">I’ve been experimenting with routing by re-implementing the React Router API using middleware. More to follow soon: </a></li>
</ul>
<h2 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/" target="_blank" rel="external">Don’t lose user and app state, use Page Visibility</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="RxJS"><a href="#RxJS" class="headerlink" title="RxJS"></a>RxJS</h2><ul>
<li><p>egghead.io 上的 RxJS <a href="https://egghead.io/lesson]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hub, Makes Git Better with Github]]></title>
    <link href="http://shane.hsi.rocks/2016/01/29/Hub-Makes-Git-Better-with-Github/"/>
    <id>http://shane.hsi.rocks/2016/01/29/Hub-Makes-Git-Better-with-Github/</id>
    <published>2016-01-29T01:56:39.000Z</published>
    <updated>2016-01-29T01:58:46.000Z</updated>
    <content type="html"><![CDATA[<p>链接：<a href="https://hub.github.com/" target="_blank" rel="external">hub</a>。</p>
<p>github 的常用功能的命令行客户端。实现了如：</p>
<ul>
<li>查看 issues</li>
<li>打开 wiki</li>
<li>fork</li>
<li>pull-request</li>
<li>使用 github 的 compare view 来 compare</li>
</ul>
<p>等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>链接：<a href="https://hub.github.com/" target="_blank" rel="external">hub</a>。</p>
<p>github 的常用功能的命令行客户端。实现了如：</p>
<ul>
<li>查看 issues</li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Deep Clone in JavaScript]]></title>
    <link href="http://shane.hsi.rocks/2016/01/28/Deep-Clone-in-JavaScript/"/>
    <id>http://shane.hsi.rocks/2016/01/28/Deep-Clone-in-JavaScript/</id>
    <published>2016-01-28T02:02:57.000Z</published>
    <updated>2016-01-28T06:22:53.000Z</updated>
    <content type="html"><![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript" target="_blank" rel="external">How to Deep clone in javascript</a></p>
<p>深入理解后会涉及到 JavaScript 语言的基础知识。</p>
<p>尝试使用 TypeScript 方便 JavaScript 的深克隆。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript" target="_blank" rel="external">How to Deep clone ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Import JavaScript files in TypeScript]]></title>
    <link href="http://shane.hsi.rocks/2016/01/27/Import-JavaScript-files-in-TypeScript/"/>
    <id>http://shane.hsi.rocks/2016/01/27/Import-JavaScript-files-in-TypeScript/</id>
    <published>2016-01-27T09:01:54.000Z</published>
    <updated>2016-01-27T09:01:54.000Z</updated>
    <content type="html"><![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/12689716/typescript-with-knockoutjs/12692174#12692174" target="_blank" rel="external">TypeScript with KnockoutJS</a></p>
<p>TypeScript 具有良好的教学作用。目前初步的想法是，直接 import 现有的 JavaScript 代码，然后对其进行封装。TypeScript 的类型系统，会提供完备的接口定义写法。</p>
<p>这其实是一种组合式的重用方式。对于可用的直接 import 进来，对于不可用的进行重写。</p>
<p>那如何在 TypeScript 文件中 import Javascript 呢？</p>
<p>TypeScript 提供的特性就是写 Definition Files。在写的时候参考 <a href="https://github.com/borisyankov/DefinitelyTyped" target="_blank" rel="external">DefinitelyTyped</a> 的写法，先进行模仿。</p>
<p>文件可以直接写在相应 js 文件的旁边，[name].d.ts。</p>
<p>具体在写的时候，如果有新的问题或思路进行补充。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/12689716/typescript-with-knockoutjs/12692174#12692174" target="_blank" rel="external">Type]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Write a React Tooltip Component]]></title>
    <link href="http://shane.hsi.rocks/2016/01/22/Write-a-React-Tooltip-Component/"/>
    <id>http://shane.hsi.rocks/2016/01/22/Write-a-React-Tooltip-Component/</id>
    <published>2016-01-22T02:25:45.000Z</published>
    <updated>2016-01-27T07:57:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>今天来写下 tooltip 组件。</p>
<p>如果今天有时间，写下 table 组件，同样，以上两个样式都是以最简单为主。</p>
<p>这些写完之后，加上 button，icon，input 这些非常依赖样式的组件，这些等下周专心写 css 时再说。周末做些组件的类型层级分析归类重构。</p>
<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><ul>
<li>Form 的 label 后面可能会带个 ？的图标，鼠标悬浮或者点击会有 popup 浮层。</li>
<li>Form 校验的时候，发生错误（或者极少数情况人性化的警告下）会在 input（类似的有 select，calendar ）的框靠右内部显示一个 ！的红色 icon，然后默认会自动弹出 popup 浮层，显示错误的提示信息。</li>
<li>比如上传按钮，可以在右侧也有一个 popup 浮层。显示上传成功。类似有 提交 按钮。</li>
</ul>
<p>所以，这个 trigger 相应的事件是</p>
<ul>
<li>click</li>
<li>focus</li>
<li>hover</li>
<li>还有就是自动触发显示。</li>
</ul>
<blockquote>
<p>再强调下，当前不要把时间花在抽出公共组件上，先把功能实现。</p>
</blockquote>
<h2 id="u5B9E_u73B0_u65B9_u5F0F"><a href="#u5B9E_u73B0_u65B9_u5F0F" class="headerlink" title="实现方式"></a>实现方式</h2><p>代码因为和 Select 的场景类似（都是 trigger 一下，显示其他的组件）。</p>
<p>关键是定位问题。</p>
<p>我发现有两种定位方式，有用 <code>position:fixed</code> 的，很明显的问题是，滚动时就会相对 viewport 固定。也有相对 body 绝对定位的，这个基本没有问题。但是 tooltip 是在单独的地方维护的，当然写的时候可以一块，也就是并不真正render在被声明的地方。后面的方式是合理的。不过总感觉有些变扭。</p>
<p>找下其他方案吧。</p>
<p>参考<a href="http://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" target="_blank" rel="external">这篇资料</a>先学习下 <code>offsetWidth</code>，<code>clientWidth</code>，<code>scrollWidth</code> 这些概念。</p>
<p>另外翻到一篇文章，由于 <a href="http://web.jobbole.com/83409/" target="_blank" rel="external">层叠上下文 Stacking Context</a>（<a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="external">另一篇</a>），Modal 这种东西应该直接 append 到 body。就和上面第二种方式类似。概念看 spec 会看很久，从浏览器绘制顺序来看，就是浏览器先绘制父元素，在绘制 z-index 为复数，然后是 <code>position:static</code> ，然后是正数（从小到大）。</p>
<p>还有一个接口 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="external">getBoundingClientRect</a>，返回元素的大小及其相对于视口的位置。</p>
<h2 id="To_be_continued"><a href="#To_be_continued" class="headerlink" title="To be continued"></a>To be continued</h2><p>目前在 Tooltip 的研究上出现停滞，主要是在写的过程中发现了之间漏掉的设计点，这块是看到了这个文章 <a href="https://leozdgao.me/reactzhong-de-portalzu-jian/" target="_blank" rel="external">React中的Portal组件</a>之后对 Portal 这个抽象概念，期望有更多的理解。当然也是为了解决层叠上下文。只是，Portal 作为公共组件，沉淀的设计会更多，更值得学习。</p>
<p>另外，目前暂时参考了 react-components，自定义了样式，和再做了一层业务自定义的封装，以保证项目进度。同时，对属性做了接口限制（TypeScript 的优势）。希望对抽象做分层，循序渐进，不断迭代优化。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>今天来写下 tooltip 组件。</p>
<p>如果今天有时间，写下 table 组件，同样，以上两个]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Regexp Contains Sub String]]></title>
    <link href="http://shane.hsi.rocks/2016/01/21/JavaScript-Regexp-Contains-Sub-String/"/>
    <id>http://shane.hsi.rocks/2016/01/21/JavaScript-Regexp-Contains-Sub-String/</id>
    <published>2016-01-21T08:07:36.000Z</published>
    <updated>2016-01-21T08:11:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><p>一般是在 typeahead 时使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="xml"><span class="tag">&lt;<span class="title">substring</span>&gt;</span>, 'i').test(<span class="tag">&lt;<span class="title">string</span>&gt;</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>其中 <code>&#39;i&#39;</code> 代表忽略大小写。</p>
<p>也可以使用 <code>indexOf</code>，<code>&lt;string&gt;.indexOf(&lt;substring&gt;) !== -1</code>。可以看出不能方便的通过类似 <code>&#39;i&#39;</code> 设置忽略大小写。</p>
<p>至于性能，根据浏览器实现不同性能有所差异。参考：<a href="http://stackoverflow.com/questions/5296268/fastest-way-to-check-a-string-contain-another-substring-in-javascript" target="_blank" rel="external">Fastest way to check a string contain another substring in Javascript?</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h2><p>一般是在 typeahead 时使用。</p>
<figure class="highlight js"]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Write a React Select Component]]></title>
    <link href="http://shane.hsi.rocks/2016/01/21/Write-a-React-Select-Component/"/>
    <id>http://shane.hsi.rocks/2016/01/21/Write-a-React-Select-Component/</id>
    <published>2016-01-21T02:07:45.000Z</published>
    <updated>2016-01-27T07:53:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天写下 Select 组件。</p>
<p>通过写 React Upload 组件，发现其实理解了上传的本质之后，后面只是用 React 的方式包装。所以，组件需要自已研发，这样才能加深理解，做到心中无框架，回归编程的通用。</p>
<p>另外，在写 TypeScript 之后，类型的 mental modal 引入之后，前端开始变得有条理性。我相信设计是一项很重要的步骤，基于缜密的思维甚至依托严密的理论设计出来的事物才能响应变化。</p>
<p>所以，Select 组件也决定自己写。</p>
<h2 id="u76EE_u7684"><a href="#u76EE_u7684" class="headerlink" title="目的"></a>目的</h2><p>最终的形态分为几类：</p>
<ul>
<li>基本</li>
<li>不可改，独立筛选框</li>
<li>邮箱提示类</li>
<li>Typeahead</li>
<li>选项组</li>
</ul>
<p>暂时不做多选。</p>
<h1 id="u6B65_u9AA4"><a href="#u6B65_u9AA4" class="headerlink" title="步骤"></a>步骤</h1><p>我先实现下『不可改，独立筛选框』，『基本』类似。</p>
<h2 id="u7ED3_u6784"><a href="#u7ED3_u6784" class="headerlink" title="结构"></a>结构</h2><p>第一步还是先写结构， HTML。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">container</span>")&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("select")&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span>&gt;</span>Select the country ...<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">drop</span>")&#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">search</span>")&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">autoComplete</span>=<span class="value">"off"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">option-list</span>")&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">option</span>")&#125;&gt;</span>China<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx(</span> "<span class="attribute">option</span>")&#125;&gt;</span>China Taiwan<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果不写 css，会发现除了没有边框外，已经达到了最终的效果（展开状态）。</p>
<h2 id="u6837_u5F0F"><a href="#u6837_u5F0F" class="headerlink" title="样式"></a>样式</h2><p>简单写点样式。只要稍微设置下 border，padding 和 color，backgroud-color，其他暂时不设置。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">15rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.select</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.4rem</span> <span class="number">0.8rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#686868</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.select</span> &gt; <span class="tag">span</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#686868</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.drop</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#686868</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> -<span class="number">1px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.1rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.search</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.2rem</span> .<span class="number">4rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.search</span> &gt; <span class="tag">input</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.5rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.option-list</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.4rem</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.option</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.4rem</span> <span class="number">0.5rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.option</span><span class="pseudo">:hover</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#0b97c4</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>写样式的时候，需要从设计的角度来想。比如这个组件的 display 一定是 <code>inline</code> 或者 <code>inline-block</code>。至于里面的结构的样式，其实已经不影响外面了。另外，<code>drop</code> 肯定是 <code>position: absolute</code>。</p>
<h2 id="u4E8B_u4EF6"><a href="#u4E8B_u4EF6" class="headerlink" title="事件"></a>事件</h2><p>直接上代码吧。</p>
<p>Select.tsx</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Option &#125; <span class="keyword">from</span> <span class="string">'./Option'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 drop 是否显示</span></span><br><span class="line"><span class="keyword">const</span> hidden = &#123;</span><br><span class="line">  <span class="string">"display"</span>: <span class="string">"none"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> show = &#123;</span><br><span class="line">  <span class="string">"display"</span>: <span class="string">"block"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  private clickOutsideHandler: any;</span><br><span class="line"></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 常用的 state</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      selected: &#123;</span><br><span class="line">        display: <span class="string">"Select the country ..."</span>,</span><br><span class="line">        value: <span class="literal">undefined</span></span><br><span class="line">      &#125;,</span><br><span class="line">      open: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.onClickSelect = <span class="keyword">this</span>.onClickSelect.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onClickOption = <span class="keyword">this</span>.onClickOption.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onClickDocument = <span class="keyword">this</span>.onClickDocument.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onChangeFilter = <span class="keyword">this</span>.onChangeFilter.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件在 Update 的时候做些事情，这可能是这个组件（复杂的组件）的特殊之处，</span></span><br><span class="line">  <span class="comment">// 1. focus 到 filter 框</span></span><br><span class="line">  <span class="comment">// 2. 注册 clickOutsideHandler，并注意在 open=false 时回收</span></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.open) &#123;</span><br><span class="line">      <span class="keyword">const</span> filterNode: any = findDOMNode(<span class="keyword">this</span>.refs[<span class="string">"filter"</span>]);</span><br><span class="line">      filterNode.focus();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.clickOutsideHandler) &#123;</span><br><span class="line">        <span class="keyword">this</span>.clickOutsideHandler = addReactDomEventListener(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, <span class="keyword">this</span>.onClickDocument);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clickOutsideHandler) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clickOutsideHandler.remove();</span><br><span class="line">      <span class="keyword">this</span>.clickOutsideHandler = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onClickSelect() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      open: !<span class="keyword">this</span>.state.open</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onClickOption(&#123; value, display &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      selected: &#123;</span><br><span class="line">        display: display,</span><br><span class="line">        value: value</span><br><span class="line">      &#125;,</span><br><span class="line">      filter: <span class="literal">undefined</span>,</span><br><span class="line">      open: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭 drop</span></span><br><span class="line">  private onClickDocument(event: Event) &#123;</span><br><span class="line">    <span class="keyword">const</span> target: EventTarget = event.target;</span><br><span class="line">    <span class="keyword">const</span> root = findDOMNode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">const</span> dropNode = findDOMNode(<span class="keyword">this</span>.refs[<span class="string">"drop"</span>]);</span><br><span class="line">    <span class="comment">// 如果不包含</span></span><br><span class="line">    <span class="keyword">if</span> (!containsNode(root, target) &amp;&amp; !containsNode(dropNode, target)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;open: <span class="literal">false</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onChangeFilter(event) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = event.target.value;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      filter: value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> optionListV;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选功能</span></span><br><span class="line">    <span class="keyword">const</span> filteredOptionList = _.filter(_.values(<span class="keyword">this</span>.props.options), (o: any) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (_.isEmpty(<span class="keyword">this</span>.state.filter)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.state.filter, <span class="string">'i'</span>).test(o.desc);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_.isEmpty(filteredOptionList)) &#123;</span><br><span class="line">        <span class="comment">// Option 设置了一个 disabled 的状态</span></span><br><span class="line">      optionListV = <span class="xml"><span class="tag">&lt;<span class="title">Option</span> <span class="attribute">disabled</span></span><br><span class="line">                            <span class="attribute">display</span>=<span class="value">'无匹配项'</span>/&gt;</span>;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      optionListV = _.map(filteredOptionList, (item: any) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="title">Option</span> <span class="attribute">key</span>=<span class="value">&#123;item.value&#125;</span></span><br><span class="line">                        <span class="attribute">value</span>=<span class="value">&#123;item.value&#125;</span></span><br><span class="line">                        <span class="attribute">display</span>=<span class="value">&#123;item.display&#125;</span></span><br><span class="line">                        <span class="attribute">desc</span>=<span class="value">&#123;item.desc&#125;</span></span><br><span class="line">                        <span class="attribute">onClick</span>=<span class="value">&#123;this.onClickOption&#125;</span>/&gt;</span>)</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("container")&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("select")&#125;</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onClickSelect&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">span</span>&gt;</span>&#123;this.state.selected.display&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ref</span>=<span class="value">"drop"</span> <span class="attribute">className</span>=<span class="value">&#123;cx("drop")&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;this.state.open?</span> <span class="attribute">show</span> <span class="attribute">:</span> <span class="attribute">hidden</span>&#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("search")&#125;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"filter"</span></span><br><span class="line">                   <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">autoComplete</span>=<span class="value">"off"</span></span><br><span class="line">                   <span class="attribute">value</span>=<span class="value">&#123;this.state.filter&#125;</span></span><br><span class="line">                   <span class="attribute">onChange</span>=<span class="value">&#123;this.onChangeFilter&#125;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("option-list")&#125;</span>&gt;</span></span><br><span class="line">            &#123;optionListV&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Option.tsx</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path="../../../typings/ttsd.d.ts" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; findDOMNode &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">const</span> styles = <span class="built_in">require</span>(<span class="string">"./Option.css"</span>);</span><br><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">"classnames/bind"</span>;</span><br><span class="line"><span class="keyword">const</span> cx = classNames.bind(styles);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Option</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.onClick = <span class="keyword">this</span>.onClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private onClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onClick(&#123;</span><br><span class="line">      value: <span class="keyword">this</span>.props.value,</span><br><span class="line">      display: <span class="keyword">this</span>.props.display</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.disabled) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("disable")&#125;</span>&gt;</span>&#123;this.props.display&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      )</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;cx("option")&#125;</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onClick&#125;</span>&gt;</span>&#123;this.props.display&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="u601D_u8003"><a href="#u601D_u8003" class="headerlink" title="思考"></a>思考</h1><p>在写的过程中，发现很多 Select 其实可以更细化的拆分，比如 Option 可以泛化成 menu。这是其二。</p>
<p>另外写组件的过程其实包含了很多事情，包括：</p>
<ul>
<li>结构</li>
<li>样式</li>
<li>事件</li>
<li>值的处理</li>
<li>甚至包括从总体来看组件的设计</li>
</ul>
<p>Select 的确有不同的形态，我发现很多组件尝试用 if-else，在同一个 <code>&lt;Select&gt;</code> 里做到统一。我认为这样是不好的。感性的原因是这是一种很弱的抽象，圈复杂度非常高，不利于代码维护。还有一个原因，也是我这两天自己研发组件得到的经验：开始不要想很多，一个场景对应一套实现；之后再考虑提取公用代码。</p>
<p>这才是 <strong>设计之道</strong>。</p>
<p>所以，暂时不考虑细节的部分，我认为 Select 组件已经开发完成了。代码都在那儿，如何重构是之后的事情。这种时候似乎应该 test-driven。考虑到 test-driven DSL 的恶心程度，在不是复合场景下（复合比如：样式+事件+数据流）不如手动测试。</p>
<p>明天开发 trigger，popup 和 table。</p>
<p>即使这些开发完毕了，也不要急着重构，而是上生产环境。慢慢抽出公用组件。刚开始都是丑陋的代码，慢慢变得合理高效。一下次输入很多知识点会非常低效。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天写下 Select 组件。</p>
<p>通]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Tips]]></title>
    <link href="http://shane.hsi.rocks/2016/01/20/Git-Tips/"/>
    <id>http://shane.hsi.rocks/2016/01/20/Git-Tips/</id>
    <published>2016-01-20T05:49:17.000Z</published>
    <updated>2016-01-27T10:06:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="git_submodule"><a href="#git_submodule" class="headerlink" title="git submodule"></a>git submodule</h2><p><a href="https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.4.txt#L38-L40" target="_blank" rel="external">git1.8.4</a> (July 2013) 之后不需要回到 . 目录。</p>
<p>直接到 submodule 期望所在的目录：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">cd</span> ./src/vendor/</span><br><span class="line"><span class="label">git</span> <span class="keyword">submodule </span><span class="keyword">add </span>&lt;git<span class="comment">@github ...&gt; &lt;project-name&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考链接 <a href="http://stackoverflow.com/questions/9035895/how-do-i-add-a-submodule-to-a-sub-directory" target="_blank" rel="external">How do I add a submodule to a sub-directory?</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="git_submodule"><a href="#git_submodule" class="headerlink" title="git submodule"></a>git submodule</h2><p><a href="https://github.co]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Write a React Upload Component]]></title>
    <link href="http://shane.hsi.rocks/2016/01/19/Write-a-React-Upload-Component/"/>
    <id>http://shane.hsi.rocks/2016/01/19/Write-a-React-Upload-Component/</id>
    <published>2016-01-19T07:15:34.000Z</published>
    <updated>2016-01-27T07:53:23.000Z</updated>
    <content type="html"><![CDATA[<p>这是一遍学习文档，目的：</p>
<ul>
<li>了解 upload 相关技术细节。</li>
<li>了解 IE8/9 的兼容性如何解决，即所谓的渐进增强，优雅降级。</li>
</ul>
<p>参考文档：</p>
<ol>
<li><a href="https://github.com/SoAanyip/React-FileUpload" target="_blank" rel="external">SoAanyip/React-FileUpload</a></li>
<li><a href="https://github.com/react-component/upload" target="_blank" rel="external">react-component/upload</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/08/file_upload.html" target="_blank" rel="external">文件上传的渐进式增强</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="external">XMLHttpRequest Level 2 使用指南</a></li>
<li><a href="http://www.html5rocks.com/zh/tutorials/file/xhr2/" target="_blank" rel="external">XMLHttpRequest2 新技巧</a></li>
<li><a href="http://www.cnblogs.com/wangmeijian/p/3978407.html" target="_blank" rel="external">利用iframe无刷新上传文件的坑</a></li>
<li><a href="http://fex.baidu.com/webuploader/" target="_blank" rel="external">Web Uploader</a> 这块只是说明，上传也需要一个集成式的方案</li>
</ol>
<h1 id="u4E0A_u4F20_u6587_u4EF6"><a href="#u4E0A_u4F20_u6587_u4EF6" class="headerlink" title="上传文件"></a>上传文件</h1><h2 id="1-__u4F20_u7EDF_u5F62_u5F0F"><a href="#1-__u4F20_u7EDF_u5F62_u5F0F" class="headerlink" title="1. 传统形式"></a>1. 传统形式</h2><p>使用 Form，用户先选择文件，然后点击”Upload”按钮，文件开始上传。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"upload-form"</span> <span class="attribute">action</span>=<span class="value">"upload.php"</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span> &gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">id</span>=<span class="value">"upload"</span> <span class="attribute">name</span>=<span class="value">"upload"</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Upload"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-_iframe_u4E0A_u4F20"><a href="#2-_iframe_u4E0A_u4F20" class="headerlink" title="2. iframe上传"></a>2. iframe上传</h2><p>Form 上传是同步的，用户需等待上传结束。而且上传成功后，会跳转到 action 所指的页面。</p>
<p>如果要实现异步上传，在 HTML5 之前，需要使用 iframe。当用户点击提交时，动态插入 iframe 元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = $(<span class="string">"#upload-form"</span>);</span><br><span class="line">　form.on(<span class="string">'submit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　<span class="comment">// 此处动态插入iframe元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>插入 iframe 的代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机生成数作为 id</span></span><br><span class="line"><span class="keyword">var</span> seed = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> id = <span class="string">"uploader-frame-"</span> + seed;</span><br><span class="line"><span class="keyword">var</span> callback = <span class="string">"uploader-cb-"</span> + seed;　　</span><br><span class="line"> <span class="comment">// iframe 的 html 代码</span></span><br><span class="line"><span class="keyword">var</span> iframe = $(<span class="string">'&lt;iframe id="'</span> + id + <span class="string">'" name="'</span> + id + <span class="string">'" style="display:none;"&gt;'</span>); </span><br><span class="line"><span class="keyword">var</span> url = form.attr(<span class="string">'action'</span>);</span><br><span class="line">form.attr(<span class="string">'target'</span>, id).append(iframe).attr(<span class="string">'action'</span>, url + <span class="string">'?iframe='</span> + callback);</span><br></pre></td></tr></table></figure>
<p>最后一行，</p>
<ol>
<li>向 Form 添加 target 属性，指向动态插入的 iframe。使得上传结束后，服务器将结果返回 iframe 窗口。当前页面就不会跳转了。</li>
<li>其次在 action 属性指定的上传网址后面添加了一个参数，使得服务器知道回调函数的名称。这样能将服务器返回的信息，从 iframe 返回到上层页面。</li>
</ol>
<p>服务器返回的信息，格式如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">window</span>.top.window[<span class="string">'callback'</span>](data);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以，在当前页面定义回调：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;　　　　</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'received callback:'</span>, data);　　　　</span><br><span class="line">    iframe.remove(); <span class="comment">//removing iframe</span></span><br><span class="line">    　　　　</span><br><span class="line">    form.removeAttr(<span class="string">'target'</span>);　　　　</span><br><span class="line">    form.attr(<span class="string">'action'</span>, url);　　　　</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="literal">undefined</span>; <span class="comment">//removing callback</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-_ajax__u4E0A_u4F20"><a href="#3-_ajax__u4E0A_u4F20" class="headerlink" title="3. ajax 上传"></a>3. ajax 上传</h2><p>HTML5 提出了 XMLHttpRequest Level 2，使得 ajax 可以上传文件，为异步上传。</p>
<p>上传代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">form.on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;　</span><br><span class="line">    <span class="comment">// 此处进行ajax上传</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里主要使用 FormData 对象，它能够构建类似表单的键值对。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.FormData) &#123;　</span><br><span class="line">　　<span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">　　<span class="comment">// 建立一个upload表单项，值为上传的文件</span></span><br><span class="line">　　formData.append(<span class="string">'upload'</span>, <span class="built_in">document</span>.getElementById(<span class="string">'upload'</span>).files[<span class="number">0</span>]);</span><br><span class="line">　　<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">　　xhr.open(<span class="string">'POST'</span>, $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>));</span><br><span class="line">　　<span class="comment">// 定义上传完成后的回调函数</span></span><br><span class="line">　　xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　<span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">　　　　　　<span class="built_in">console</span>.log(<span class="string">'上传成功'</span>);</span><br><span class="line">　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　<span class="built_in">console</span>.log(<span class="string">'出错了'</span>);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　xhr.send(formData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-__u8FDB_u5EA6_u6761"><a href="#4-__u8FDB_u5EA6_u6761" class="headerlink" title="4. 进度条"></a>4. 进度条</h2><p>XMLHttpRequest Level2 定义了一个 progress 事件，获取上传进度。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">progress</span> <span class="attribute">id</span>=<span class="value">"uploadprogress"</span> <span class="attribute">min</span>=<span class="value">"0"</span> <span class="attribute">max</span>=<span class="value">"100"</span> <span class="attribute">value</span>=<span class="value">"0"</span>&gt;</span>0<span class="tag">&lt;/<span class="title">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">　　　　<span class="keyword">var</span> complete = (event.loaded / event.total * <span class="number">100</span> | <span class="number">0</span>);</span><br><span class="line">　　　　<span class="keyword">var</span> progress = <span class="built_in">document</span>.getElementById(<span class="string">'uploadprogress'</span>);</span><br><span class="line">　　　　progress.value = progress.innerHTML = complete;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意，progress事件不是定义在xhr，而是定义在xhr.upload，因为这里需要区分下载和上传，下载也有一个progress事件</p>
<p>关于图片预览暂时不了解。</p>
<p>关于拖放上传暂时不了解。</p>
<h1 id="XMLHttpRequest_Level_2"><a href="#XMLHttpRequest_Level_2" class="headerlink" title="XMLHttpRequest Level 2"></a>XMLHttpRequest Level 2</h1><h2 id="u8001_u7248_u672C_XMLHttpRequest"><a href="#u8001_u7248_u672C_XMLHttpRequest" class="headerlink" title="老版本 XMLHttpRequest"></a>老版本 XMLHttpRequest</h2><p>我们看下老版的示例代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'example.php'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<p>然后监控 XMLHttpRequest 对象的状态变化：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">if</span> ( xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span> ) &#123;</span><br><span class="line">　　　　alert( xhr.responseText );</span><br><span class="line">　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　alert( xhr.statusText );</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>xhr.readyState：XMLHttpRequest对象的状态，等于4表示数据已经接收完毕。</li>
<li>xhr.status：服务器返回的状态码，等于200表示一切正常。</li>
<li>xhr.responseText：服务器返回的文本数据</li>
<li>xhr.responseXML：服务器返回的XML格式的数据</li>
<li>xhr.statusText：服务器返回的状态文本。</li>
</ul>
<p>老版本的缺点：</p>
<ul>
<li>只支持文本数据的传送，无法用来读取和上传二进制文件。</li>
<li>传送和接收数据时，没有进度信息，只能提示有没有完成。</li>
<li>受到”同域限制”（Same Origin Policy），只能向同一域名的服务器请求数据。</li>
</ul>
<h2 id="XMLHttpRequest_Level_2-1"><a href="#XMLHttpRequest_Level_2-1" class="headerlink" title="XMLHttpRequest Level 2"></a>XMLHttpRequest Level 2</h2><ul>
<li>可以设置HTTP请求的时限。</li>
<li>可以使用FormData对象管理表单数据。</li>
<li>可以上传文件。</li>
<li>可以请求不同域名下的数据（跨域请求）。</li>
<li>可以获取服务器端的二进制数据。</li>
<li>可以获得数据传输的进度信息。</li>
</ul>
<p>下面直接用示例代码，实际使用时注意下浏览器兼容性。</p>
<h3 id="HTTP_u8BF7_u6C42_u7684_u65F6_u9650"><a href="#HTTP_u8BF7_u6C42_u7684_u65F6_u9650" class="headerlink" title="HTTP请求的时限"></a>HTTP请求的时限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.timeout = <span class="number">3000</span>;</span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">　alert(<span class="string">'请求超时！'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="FormData_u5BF9_u8C61"><a href="#FormData_u5BF9_u8C61" class="headerlink" title="FormData对象"></a>FormData对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="comment">// 添加表单项</span></span><br><span class="line">formData.append(<span class="string">'username'</span>, <span class="string">'张三'</span>);</span><br><span class="line">formData.append(<span class="string">'id'</span>, <span class="number">123456</span>);</span><br><span class="line"><span class="comment">// 直接传送 FormData 对象，和提交网页表单效果一样</span></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure>
<p>也可以直接获取网页表单的值：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'myform'</span>);</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">formData.append(<span class="string">'secret'</span>, <span class="string">'123456'</span>); <span class="comment">// 添加一个表单项</span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, form.action);</span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure>
<h3 id="u4E0A_u4F20_u6587_u4EF6-1"><a href="#u4E0A_u4F20_u6587_u4EF6-1" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; files.length;i++) &#123;</span><br><span class="line">　　formData.append(<span class="string">'files[]'</span>, files[i]);</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure>
<h3 id="u8DE8_u57DF_u8D44_u6E90_u5171_u4EAB_uFF08CORS_uFF09"><a href="#u8DE8_u57DF_u8D44_u6E90_u5171_u4EAB_uFF08CORS_uFF09" class="headerlink" title="跨域资源共享（CORS）"></a>跨域资源共享（CORS）</h3><p>前提是，浏览器必须支持这个功能，而且服务器端必须同意这种”跨域”。</p>
<p>其余写法一样。</p>
<h3 id="u63A5_u6536_u4E8C_u8FDB_u5236_u6570_u636E"><a href="#u63A5_u6536_u4E8C_u8FDB_u5236_u6570_u636E" class="headerlink" title="接收二进制数据"></a>接收二进制数据</h3><p>两种方式</p>
<h4 id="u8001_u65B9_u6CD5_uFF1A_u6539_u5199MIMEType"><a href="#u8001_u65B9_u6CD5_uFF1A_u6539_u5199MIMEType" class="headerlink" title="老方法：改写MIMEType"></a>老方法：改写MIMEType</h4><p>即将二进制当做纯文本，再在浏览器端将字节还原成二进制数据。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.overrideMimeType(<span class="string">"text/plain; charset=x-user-defined"</span>);</span><br><span class="line"><span class="keyword">var</span> binStr = xhr.responseText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = binStr.length; i &lt; len; ++i) &#123;</span><br><span class="line">　　<span class="keyword">var</span> c = binStr.charCodeAt(i);</span><br><span class="line">　　<span class="keyword">var</span> byte = c &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后一行的位运算”c &amp; 0xff”，表示在每个字符的两个字节之中，只保留后一个字节，将前一个字节扔掉。原因是浏览器解读字符的时候，会把字符自动解读成Unicode的0xF700-0xF7ff区段。</p>
</blockquote>
<h4 id="responseType_u5C5E_u6027"><a href="#responseType_u5C5E_u6027" class="headerlink" title="responseType属性"></a>responseType属性</h4><p>使用新增的 responseType 属性。使用到的时候再具体了解。</p>
<p>进度信息上面已经写过，暂时不了解详细用法。</p>
<h1 id="React__u5B9E_u6218"><a href="#React__u5B9E_u6218" class="headerlink" title="React 实战"></a>React 实战</h1><p>学习的目的是由浅入深，知其所以然，从最简单的开始。</p>
<h2 id="XHR2_2C_FormData"><a href="#XHR2_2C_FormData" class="headerlink" title="XHR2, FormData"></a>XHR2, FormData</h2><p>先写一个简单的表单。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Props &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; findDOMNode &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxUpload</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>&lt;<span class="title">any</span>&gt;, </span>&#123;&#125;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.sendForm = <span class="keyword">this</span>.sendForm.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private sendForm() &#123;</span><br><span class="line">    <span class="keyword">const</span> node = findDOMNode(<span class="keyword">this</span>.refs[<span class="string">'file'</span>]);</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">'file'</span>, node.files[<span class="number">0</span>]);;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>, <span class="string">'url'</span>);</span><br><span class="line">    xhr.send(formData);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"file"</span> <span class="attribute">type</span>=<span class="value">"file"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span></span><br><span class="line">               <span class="attribute">onClick</span>=<span class="value">&#123;this.sendForm&#125;</span></span><br><span class="line">               <span class="attribute">value</span>=<span class="value">"Upload"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="iframe__u65E0_u5237_u65B0"><a href="#iframe__u65E0_u5237_u65B0" class="headerlink" title="iframe 无刷新"></a>iframe 无刷新</h2><h3 id="u7B2C_u4E00_u4E2A_u793A_u4F8B"><a href="#u7B2C_u4E00_u4E2A_u793A_u4F8B" class="headerlink" title="第一个示例"></a>第一个示例</h3><p>由于对 iFrame 不甚了解。所以，先花点篇幅了解下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"datafile"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"upload"</span> </span><br><span class="line">        <span class="attribute">onClick</span>=<span class="value">"fileUpload(this.form,'index.php','upload'); return false;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"upload"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileUpload</span>(<span class="params">form, action_url, div_id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create the iframe...</span></span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"id"</span>, <span class="string">"upload_iframe"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"name"</span>, <span class="string">"upload_iframe"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"width"</span>, <span class="string">"0"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"height"</span>, <span class="string">"0"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"border"</span>, <span class="string">"0"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"style"</span>, <span class="string">"width: 0; height: 0; border: none;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add to document...</span></span><br><span class="line">    form.parentNode.appendChild(iframe);</span><br><span class="line">    <span class="built_in">window</span>.frames[<span class="string">'upload_iframe'</span>].name = <span class="string">"upload_iframe"</span>;</span><br><span class="line"></span><br><span class="line">    iframeId = <span class="built_in">document</span>.getElementById(<span class="string">"upload_iframe"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add event...</span></span><br><span class="line">    <span class="keyword">var</span> eventHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (iframeId.detachEvent) iframeId.detachEvent(<span class="string">"onload"</span>, eventHandler);</span><br><span class="line">        <span class="keyword">else</span> iframeId.removeEventListener(<span class="string">"load"</span>, eventHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Message from server...</span></span><br><span class="line">        <span class="keyword">if</span> (iframeId.contentDocument) &#123;</span><br><span class="line">            content = iframeId.contentDocument.body.innerHTML;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframeId.contentWindow) &#123;</span><br><span class="line">            content = iframeId.contentWindow.document.body.innerHTML;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframeId.document) &#123;</span><br><span class="line">            content = iframeId.document.body.innerHTML;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(div_id).innerHTML = content;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Del the iframe...</span></span><br><span class="line">        setTimeout(<span class="string">'iframeId.parentNode.removeChild(iframeId)'</span>, <span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iframeId.addEventListener) iframeId.addEventListener(<span class="string">"load"</span>, eventHandler, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (iframeId.attachEvent) iframeId.attachEvent(<span class="string">"onload"</span>, eventHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set properties of form...</span></span><br><span class="line">    form.setAttribute(<span class="string">"target"</span>, <span class="string">"upload_iframe"</span>);</span><br><span class="line">    form.setAttribute(<span class="string">"action"</span>, action_url);</span><br><span class="line">    form.setAttribute(<span class="string">"method"</span>, <span class="string">"post"</span>);</span><br><span class="line">    form.setAttribute(<span class="string">"enctype"</span>, <span class="string">"multipart/form-data"</span>);</span><br><span class="line">    form.setAttribute(<span class="string">"encoding"</span>, <span class="string">"multipart/form-data"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Submit the form...</span></span><br><span class="line">    form.submit();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(div_id).innerHTML = <span class="string">"Uploading..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上做的步骤是：</p>
<ol>
<li>创建 iframe，并且设置 id 和 style（即不可见）</li>
<li>append 到 document</li>
<li>创建 event handler，主要是两块逻辑，一是 remove event listener，而是获取服务器返回的数据，并写到上层的 document</li>
<li>然后用两种方式，<code>addEventListener(&#39;load&#39;)</code>，<code>attachEvent(&#39;onload&#39;)</code></li>
<li>设置 form 属性，特别是设置 <code>target</code> 为创建的 iframe</li>
<li>提交表单</li>
</ol>
<h3 id="u7B2C_u4E8C_u4E2A_u793A_u4F8B"><a href="#u7B2C_u4E8C_u4E2A_u793A_u4F8B" class="headerlink" title="第二个示例"></a>第二个示例</h3><p>上面的例子还是太复杂了，需要动态创建 iframe。下面这个例子是最最简单的例子。没有任何 JavaScript。但是，既然是从基础开始，还是要了解下基础的几个 attribute 的作用。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">name</span>=<span class="value">"fileUpload"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">action</span>=<span class="value">"xxxx"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span> <span class="attribute">name</span>=<span class="value">"fileForm"</span> <span class="attribute">target</span>=<span class="value">"fileUpload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">class</span>=<span class="value">"fileInput"</span> <span class="attribute">name</span>=<span class="value">"fileInput"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样是：</p>
<ol>
<li><code>enctype=&quot;multipart/form-data&quot;</code> 通过文件流传递给后端，具体含义，参考 <a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="external">四种常见的POST 提交数据方式</a></li>
<li><code>target=&quot;fileUpload&quot;</code>，Form 表单的 target 属性设置为 frame，即将远程服务器返回的内容显示到 iframe 上，其他还有 <code>_blank</code> 新页面。</li>
<li>name 用在表单提交时，这里 input 的 name，fileInput，就是传递给后台的 Form 键值对的 key，或者，就是 FormData <code>formData.append(&#39;file&#39;, node.files[0]);</code>。再比如多个 radio 有多个 id，但是 name 是一样的，所以表单提交时，只会传一个值。再比如 select 也是类似的行为。</li>
</ol>
<h3 id="u7B2C_u4E09_u4E2A_u793A_u4F8B_-__u52A8_u6001_u521B_u5EFA_iframe"><a href="#u7B2C_u4E09_u4E2A_u793A_u4F8B_-__u52A8_u6001_u521B_u5EFA_iframe" class="headerlink" title="第三个示例 - 动态创建 iframe"></a>第三个示例 - 动态创建 iframe</h3><p>例子来源于：<a href="http://www.cnblogs.com/wangmeijian/p/3978407.html" target="_blank" rel="external">利用iframe无刷新上传文件的坑</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*2014年9月18日17:39:47 By 王美建*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxUpload</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">        参数说明:</span><br><span class="line">        opt.frameName : iframe的name值;</span><br><span class="line">        opt.url : 文件要提交到的地址;</span><br><span class="line">        opt.fileName : file控件的name;</span><br><span class="line">        opt.format : 文件格式，以数组的形式传递，如['jpg','png','gif','bmp'];</span><br><span class="line">        opt.callBack : 上传成功后回调;</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">var</span> iName = opt.frameName; <span class="comment">//太长了，变短点</span></span><br><span class="line">    <span class="keyword">var</span> iframe, form;</span><br><span class="line">    <span class="comment">//创建iframe和form表单</span></span><br><span class="line">    iframe = $(<span class="string">'&lt;iframe name="'</span> + iName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">    form = $(<span class="string">'&lt;form method="post" style="display:none;" target="'</span> + iName + <span class="string">'" action="'</span> + opt.url + <span class="string">'"  name="form_'</span> + iName + <span class="string">'" enctype="multipart/form-data" /&gt;'</span>);</span><br><span class="line">    file = $(<span class="string">'&lt;input type="file" name="'</span> + opt.fileName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">    file.appendTo(form);</span><br><span class="line">    <span class="comment">//插入body</span></span><br><span class="line">    $(<span class="built_in">document</span>.body).append(iframe).append(form);</span><br><span class="line">    <span class="comment">//触发浏览事件，选择文件</span></span><br><span class="line">    file.click();</span><br><span class="line">    <span class="comment">//选中文件后，验证文件格式是否符合要求</span></span><br><span class="line">    file.change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//取得所选文件的扩展名</span></span><br><span class="line">        <span class="keyword">var</span> fileFormat = $(<span class="keyword">this</span>).val().exec(<span class="regexp">/\.[a-zA-Z]+$/</span>)[<span class="number">0</span>].substring(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (opt.format.join(<span class="string">'-'</span>).indexOf(fileVal) != -<span class="number">1</span>) &#123;</span><br><span class="line">            form.submit(); <span class="comment">//格式通过验证后提交表单;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            iframe.remove();</span><br><span class="line">            form.remove();</span><br><span class="line">            alert(<span class="string">'文件格式错误，请重新选择！'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//文件提交完后</span></span><br><span class="line">    iframe.load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="keyword">this</span>).contents().find(<span class="string">'body'</span>).html();</span><br><span class="line">        opt.callBack(data);</span><br><span class="line">        iframe.remove();</span><br><span class="line">        form.remove();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分解下步骤：</p>
<p>1.创建iframe和form表单，并 append 到 document 中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建iframe和form表单</span></span><br><span class="line">iframe = $(<span class="string">'&lt;iframe name="'</span> + iName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">form = $(<span class="string">'&lt;form method="post" style="display:none;" target="'</span> + iName + <span class="string">'" action="'</span> + opt.url + <span class="string">'"  name="form_'</span> + iName + <span class="string">'" enctype="multipart/form-data" /&gt;'</span>);</span><br><span class="line">file = $(<span class="string">'&lt;input type="file" name="'</span> + opt.fileName + <span class="string">'" /&gt;'</span>);</span><br><span class="line">file.appendTo(form);</span><br><span class="line"><span class="comment">//插入body</span></span><br><span class="line">$(<span class="built_in">document</span>.body).append(iframe).append(form);</span><br></pre></td></tr></table></figure>
<p>2.触发浏览事件，选择文件 <code>file.click();</code>。</p>
<p>3.<code>file.change</code> 事件判断文件格式，符合则提交，否则要 remove 掉创建的 form 和 iframe。</p>
<p>4.<code>iframe.load</code> 事件，拿到服务器返回的数据，并调用 callback 回传。remove 掉创建的 form 和 iframe。</p>
<p>因为<strong>低版本的IE（IE8及以下）做了安全限制，file控件必须由用户主动点击触发选择的文件才可以上传，而不能使用js的click事件来模拟点击触发</strong>。</p>
<p>所以，<code>file = $(&#39;&lt;input type=&quot;file&quot; name=&quot;&#39; + opt.fileName + &#39;&quot; /&gt;&#39;);</code> 不要动态创建，而是显示在 HTML 里，但是在 <code>file.change</code> 时会将 file 的 id 传入<code>ajaxUpload</code>，然后 appendTo 到 form 里。之后无异。此时要主要创建一个中间变量，保存 file 的父级，用完后 appendTo 回去，否则 file 会被删除。</p>
<p>看下代码（来源：<a href="http://www.cnblogs.com/wangmeijian/p/3978407.html" target="_blank" rel="external">利用iframe无刷新上传文件的坑</a>）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*2014年9月19日11:11:07 By 王美建*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxUpload</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">        参数说明:</span><br><span class="line">        opt.id : 页面里file控件的ID;</span><br><span class="line">        opt.frameName : iframe的name值;</span><br><span class="line">        opt.url : 文件要提交到的地址;</span><br><span class="line">        opt.format : 文件格式，以数组的形式传递，如['jpg','png','gif','bmp'];</span><br><span class="line">        opt.callBack : 上传成功后回调;</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">var</span> iName=opt.frameName; <span class="comment">//太长了，变短点</span></span><br><span class="line">    <span class="keyword">var</span> iframe,form,file,fileParent;</span><br><span class="line">    <span class="comment">//创建iframe和form表单</span></span><br><span class="line">    iframe = $(<span class="string">'&lt;iframe name="'</span>+iName+<span class="string">'" /&gt;'</span>);</span><br><span class="line">    form = $(<span class="string">'&lt;form method="post" style="display:n1one;" target="'</span>+iName+<span class="string">'" action="'</span>+opt.url+<span class="string">'"  name="form_'</span>+iName+<span class="string">'" enctype="multipart/form-data" /&gt;'</span>);</span><br><span class="line">    file = $(<span class="string">'#'</span>+opt.id); <span class="comment">//通过id获取flie控件</span></span><br><span class="line">    fileParent = file.parent(); <span class="comment">//存父级</span></span><br><span class="line">    file.appendTo(form);</span><br><span class="line">    <span class="comment">//插入body</span></span><br><span class="line">    $(<span class="built_in">document</span>.body).append(iframe).append(form);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得所选文件的扩展名</span></span><br><span class="line">    <span class="keyword">var</span> fileFormat=<span class="regexp">/\.[a-zA-Z]+$/</span>.exec(file.val())[<span class="number">0</span>].substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(opt.format.join(<span class="string">'-'</span>).indexOf(fileFormat)!=-<span class="number">1</span>)&#123;</span><br><span class="line">        form.submit();<span class="comment">//格式通过验证后提交表单;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        file.appendTo(fileParent); <span class="comment">//将file控件放回到页面</span></span><br><span class="line">        iframe.remove();</span><br><span class="line">        form.remove();</span><br><span class="line">        alert(<span class="string">'文件格式错误，请重新选择！'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件提交完后</span></span><br><span class="line">    iframe.load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="keyword">this</span>).contents().find(<span class="string">'body'</span>).html();        </span><br><span class="line">        file.appendTo(fileParent);</span><br><span class="line">        iframe.remove();</span><br><span class="line">        form.remove();</span><br><span class="line">        opt.callBack(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后再优化下显示。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一遍学习文档，目的：</p>
<ul>
<li>了解 upload 相关技术细节。</li>
<li>了解 IE8/9 的兼容性如何解决，即所谓的渐进增强，优雅降级。</li>
</ul>
<p>参考文档：</p>
<ol>
<li><a href="https://g]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Learn Redux]]></title>
    <link href="http://shane.hsi.rocks/2016/01/16/Learn-Redux/"/>
    <id>http://shane.hsi.rocks/2016/01/16/Learn-Redux/</id>
    <published>2016-01-16T05:01:29.000Z</published>
    <updated>2016-01-27T07:52:45.000Z</updated>
    <content type="html"><![CDATA[<p>通过接口学习：<a href="https://github.com/rackt/react-redux/blob/master/docs/api.md" target="_blank" rel="external">API</a>。</p>
<h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><h3 id="u4F7F_u7528_u793A_u4F8B"><a href="#u4F7F_u7528_u793A_u4F8B" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Router</span> <span class="attribute">history</span>=<span class="value">&#123;history&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">component</span>=<span class="value">&#123;AppContainer&#125;</span> <span class="attribute">path</span>=<span class="value">'/'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Router</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">Provider</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>然后必须和 connect 结合使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counters: state.counters</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@connect(select)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContainer</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">IAppContainerProps</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> actions = bindActionCreators(CounterActions, dispatch);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">App</span> <span class="attribute">name</span>=<span class="value">"John"</span> <span class="attribute">actions</span>=<span class="value">&#123;actions&#125;</span>/&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>仅提取核心部分：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Component, Children &#125; = <span class="built_in">require</span>(<span class="string">'react'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 表示 this.store 会被 Provider 的 children 通过 context 获取</span></span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; store: <span class="keyword">this</span>.store &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  constructor(props, context) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props, context)</span><br><span class="line">    <span class="keyword">this</span>.store = props.store</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; children &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 仅仅是对 children 的无 DOM 包装</span></span><br><span class="line">    <span class="keyword">return</span> Children.only(children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Provider</span><br></pre></td></tr></table></figure>
<p>所以，Provider 的功能仅仅是将 store 注册到 React context 中。</p>
<h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><h3 id="u4F7F_u7528_u573A_u666F"><a href="#u4F7F_u7528_u573A_u666F" class="headerlink" title="使用场景"></a>使用场景</h3><p>使用场景已经介绍过:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counters: state.counters</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connect(select)(view)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这里 connect 是 curry 高阶函数。connect 是将被 annotated 的 <code>React.Component</code> 和 Redux store 联结起来。</p>
<h3 id="u6E90_u7801-1"><a href="#u6E90_u7801-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">mapStateToProps, mapDispatchToProps, mergeProps, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapWithConnect</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">          constructor(props, context) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props, context);</span><br><span class="line">            <span class="comment">// 注释[2]</span></span><br><span class="line">            <span class="keyword">this</span>.store = props.store || context.store;</span><br><span class="line">            <span class="keyword">const</span> storeState = <span class="keyword">this</span>.store.getState();</span><br><span class="line">            <span class="keyword">this</span>.state = &#123; storeState &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注释[1]</span></span><br><span class="line">        <span class="keyword">return</span> hoistStatics(Connect, WrappedComponent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = connect;</span><br></pre></td></tr></table></figure>
<p><strong>注释[1]：</strong></p>
<p>Copies non-react specific statics from a child component to a parent component. Similar to Object.assign, but with React static keywords blacklisted from being overridden.</p>
<p>地址：<a href="https://github.com/mridgway/hoist-non-react-statics" target="_blank" rel="external">https://github.com/mridgway/hoist-non-react-statics</a></p>
<p>接口：hoistNonReactStatics(targetComponent, sourceComponent)</p>
<p>即将 WrappedComponent 的 component 的 keys，除去 contextTypes，mixins，defaultProps，displayName 等，复制到 Connect 上，并返回 Connect。</p>
<p><strong>注释[2]：</strong></p>
<p>使用 Provider 的原因就是给 connect 提供 store。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">invariant(<span class="keyword">this</span>.store,</span><br><span class="line">        <span class="string">`Could not find "store" in either the context or `</span> +</span><br><span class="line">        <span class="string">`props of "<span class="subst">$&#123;this.constructor.displayName&#125;</span>". `</span> +</span><br><span class="line">        <span class="string">`Either wrap the root component in a &lt;Provider&gt;, `</span> +</span><br><span class="line">        <span class="string">`or explicitly pass "store" as a prop to "<span class="subst">$&#123;this.constructor.displayName&#125;</span>".`</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure>
<p>更多参考：</p>
<ul>
<li><a href="http://rackt.org/redux/docs/recipes/ComputingDerivedData.html" target="_blank" rel="external">Computing Derived Data</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>通过接口学习：<a href="https://github.com/rackt/react-redux/blob/master/docs/api.md" target="_blank" rel="external">API</a>。</p>
<h2 id="Provide]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use Router5]]></title>
    <link href="http://shane.hsi.rocks/2016/01/15/Use-Router5/"/>
    <id>http://shane.hsi.rocks/2016/01/15/Use-Router5/</id>
    <published>2016-01-15T09:12:45.000Z</published>
    <updated>2016-01-18T14:14:52.000Z</updated>
    <content type="html"><![CDATA[<p>Router5 的<a href="http://router5.github.io/docs/understanding-router5.html" target="_blank" rel="external">文档</a> 对 router 的解释非常直观详尽，是深入理解 SPA 中 router 的很好资料。其对 react 的绑定，<a href="http://router5.github.io/docs/with-react.html#/inbox" target="_blank" rel="external">react-router5</a> 的实现也很简单直观。理解越多，使用越灵活，功能就越强大。</p>
<h2 id="Get_started"><a href="#Get_started" class="headerlink" title="Get started"></a>Get started</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> router5</span><br></pre></td></tr></table></figure>
<p>其接口：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router5 = <span class="built_in">require</span>(<span class="string">'router5'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router5.Router5</span></span><br><span class="line"><span class="comment">// router5.RouteNode</span></span><br></pre></td></tr></table></figure>
<p>提供的插件：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> router5-listeners</span><br><span class="line">npm <span class="keyword">install</span> router5-history</span><br></pre></td></tr></table></figure>
<p>Code example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router5 &#125; <span class="keyword">from</span> <span class="string">'router5'</span>;</span><br><span class="line"><span class="keyword">import</span> historyPlugin <span class="keyword">from</span> <span class="string">'router5-history'</span>;</span><br><span class="line"><span class="keyword">import</span> listenersPlugin <span class="keyword">from</span> <span class="string">'router5-listeners'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line">    .addNode(<span class="string">'home'</span>, <span class="string">'/home'</span>)</span><br><span class="line">    .usePlugin(historyPlugin())</span><br><span class="line">    .usePlugin(listenersPlugin())</span><br><span class="line">    <span class="comment">// Development helper</span></span><br><span class="line">    .usePlugin(Router5.loggerPlugin())</span><br><span class="line">    .start();</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.canDeactivate(<span class="string">'home'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// is the equivalent of, 为 0.x 的写法，canDeactivate 是 shortcut version</span></span><br><span class="line">router.registerComponent(<span class="string">'home'</span>, &#123;</span><br><span class="line">    canDeactivate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Configuring_routes"><a href="#Configuring_routes" class="headerlink" title="Configuring routes"></a>Configuring routes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router5()</span><br><span class="line">    .setOption(<span class="string">'useHash'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// .setOption('hashPrefix', '!')</span></span><br><span class="line">    .setOption(<span class="string">'defaultRoute'</span>, <span class="string">'inbox'</span>)</span><br><span class="line">    <span class="comment">// Routes</span></span><br><span class="line">    .addNode(<span class="string">'inbox'</span>,         <span class="string">'/inbox'</span>)</span><br><span class="line">    .addNode(<span class="string">'inbox.message'</span>, <span class="string">'/message/:id'</span>)</span><br><span class="line">    .addNode(<span class="string">'compose'</span>,       <span class="string">'/compose'</span>)</span><br><span class="line">    .addNode(<span class="string">'contacts'</span>,      <span class="string">'/contacts'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router5([], &#123;</span><br><span class="line">        useHash: <span class="literal">true</span>,</span><br><span class="line">        hashPrefix: <span class="string">'!'</span>,</span><br><span class="line">        defaultRoute: <span class="string">'home'</span>,</span><br><span class="line">        defaultParams: &#123;&#125;,</span><br><span class="line">        base: <span class="string">''</span>,</span><br><span class="line">        trailingSlash: <span class="literal">false</span>,</span><br><span class="line">        autoCleanUp: <span class="literal">true</span>,</span><br><span class="line">        strictQueryParams: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .setOption(<span class="string">'useHash'</span>, <span class="literal">false</span>)</span><br><span class="line">    .setOption(<span class="string">'hashPrefix'</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure>
<p>useHash，hashPrefix 会被 <code>router5-history</code> 用到。</p>
<p>defaultRoute，defaultParams 会被用作默认 navigation。</p>
<h2 id="Preventing_navigation"><a href="#Preventing_navigation" class="headerlink" title="Preventing navigation"></a>Preventing navigation</h2><p>场景，允许/阻止用户进入下一个 view：比如用户在填写表单，未保存之前，给出提示，并禁止离开当前 view。</p>
<h2 id="u6574_u4F53_u611F_u53D7"><a href="#u6574_u4F53_u611F_u53D7" class="headerlink" title="整体感受"></a>整体感受</h2><p>最终还是选择了先使用 <code>react-router</code>。</p>
<p>router5 整体的文档非常清楚，设计感和覆盖场景也很现实常用。只可惜 react-router5 的很多很变扭，而且还需要很多的 biolerplate 代码，最关键的是 NotFound 的设计很原始。</p>
<p>Anyway，有机会自己实现一个。对 router 也是一种熟悉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Router5 的<a href="http://router5.github.io/docs/understanding-router5.html" target="_blank" rel="external">文档</a> 对 router 的解释非常直观详尽，是深入理]]>
    </summary>
    
  </entry>
  
</feed>
