<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shane Hsi Rocks]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://shane.hsi.rocks/"/>
  <updated>2016-04-16T04:02:14.000Z</updated>
  <id>http://shane.hsi.rocks/</id>
  
  <author>
    <name><![CDATA[Shane Hsi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Wallaby Intro]]></title>
    <link href="http://shane.hsi.rocks/2016/04/16/Wallaby-Intro/"/>
    <id>http://shane.hsi.rocks/2016/04/16/Wallaby-Intro/</id>
    <published>2016-04-16T04:02:06.000Z</published>
    <updated>2016-04-16T04:02:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u4ECB_u7ECD_Wallaby-js"><a href="#u4ECB_u7ECD_Wallaby-js" class="headerlink" title="介绍 Wallaby.js"></a>介绍 Wallaby.js</h1><h2 id="What_about_a_list_of_main_features_3F"><a href="#What_about_a_list_of_main_features_3F" class="headerlink" title="What about a list of main features?"></a>What about a list of main features?</h2><ul>
<li>continuous testing 持续测试，性能不错</li>
<li>browser code unit testing，测试 browser，是依赖（PhantomJs, Electron or node.js）</li>
<li>node.js unit testing</li>
<li>Supports many testing frameworks（Jasmine 默认）</li>
<li>支持 ES6 and React JSX</li>
<li>支持 TypeScript, CoffeeScript, and ES7</li>
<li>支持  Webpack and Browserify</li>
</ul>
<p>其他的包括：</p>
<ul>
<li>可扩展 preprocessors, compilers and more</li>
<li>性能（只跑变动的，并行的跑，跑选择的）</li>
<li>实时覆盖率</li>
<li>在编辑器 inline 显示 expectations, errors and console.log messages</li>
<li>显示跑的 test 的变量的 data</li>
<li>test 执行的截图？？</li>
</ul>
<h2 id="u548C_Karma_2C_Mocha__u7684_u533A_u522B"><a href="#u548C_Karma_2C_Mocha__u7684_u533A_u522B" class="headerlink" title="和 Karma, Mocha 的区别"></a>和 Karma, Mocha 的区别</h2><p>其他的 runner，需要手动跑，配置 watch，跑所有的 tests，test 的结果是显示在其他的地方，需要切换。</p>
<h2 id="u6587_u7AE0_u94FE_u63A5"><a href="#u6587_u7AE0_u94FE_u63A5" class="headerlink" title="文章链接"></a>文章链接</h2><ul>
<li>所有文档 <a href="http://wallabyjs.com/docs/" target="_blank" rel="external">地址</a></li>
<li>切换不同的 test framework <a href="https://wallabyjs.com/docs/integration/overview.html#supported-testing-frameworks" target="_blank" rel="external">favorite testing framework</a>，主要考虑到如何测试 async/await, promise, observable 这些。Jasmine 似乎不够强大。选择更通用的 mocha 吧。Jasmine 的文档写的也是一绝（不好读）。mocha 肯定有解决 async/await 的方法。社区支持很好。</li>
</ul>
<p>默认的 test framework：</p>
<blockquote>
<p>By default, wallaby.js is using jasmine for browser and mocha for node.</p>
</blockquote>
<p>Todo list:</p>
<ul>
<li><p>[ ]  wallaby</p>
<ul>
<li><p>[ ] webpack</p>
</li>
<li><p>[ ] typescript</p>
</li>
<li><p>[ ] mocha</p>
</li>
<li><p>[ ] async/await</p>
</li>
<li><p>[ ] promise</p>
</li>
<li><p>[ ] rx observable</p>
</li>
<li><p>[ ] node (express)</p>
</li>
</ul>
</li>
<li><p>[ ] koa 2</p>
<ul>
<li>[ ] wallaby</li>
</ul>
</li>
<li><p>测试 React，如何集成 tsx？</p>
</li>
<li>测试 node <a href="https://wallabyjs.com/docs/integration/node.html" target="_blank" rel="external">Node.js</a>，特别是 typescript。</li>
<li><a href="https://wallabyjs.com/docs/integration/typescript.html" target="_blank" rel="external">测试 TypeScript</a></li>
<li><a href="https://wallabyjs.com/docs/integration/es-next.html" target="_blank" rel="external">集成 Babel</a></li>
<li><a href="https://wallabyjs.com/docs/integration/webpack.html" target="_blank" rel="external">集成 webpack</a></li>
<li><a href="https://wallabyjs.com/docs/config/preprocessors.html" target="_blank" rel="external">支持 preprocessors</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4ECB_u7ECD_Wallaby-js"><a href="#u4ECB_u7ECD_Wallaby-js" class="headerlink" title="介绍 Wallaby.js"></a>介绍 Wallaby.js</h1><h2 id="Wha]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring IoC有什么好处呢？]]></title>
    <link href="http://shane.hsi.rocks/2016/04/01/What-s-the-Benefis-of-IoC/"/>
    <id>http://shane.hsi.rocks/2016/04/01/What-s-the-Benefis-of-IoC/</id>
    <published>2016-04-01T05:41:10.000Z</published>
    <updated>2016-04-01T05:46:16.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/23277575" target="_blank" rel="external">原文链接</a></p>
<p>私以为以上各位都没有对spring ioc的精髓讲解到位。大多都在很模糊的说是什么，抽象化的表述或者含糊其辞的说概念。</p>
<p>ioc的思想最核心的地方在于，资源不由使用资源的双方管理，而由 <strong>不使用资源的第三方管理</strong> ，这可以带来很多好处。第一，资源集中管理，实现 <strong>资源的可配置和易管理</strong> 。第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度。</p>
<p>也就是说，甲方要达成某种目的不需要直接依赖乙方，它只需要达到的目的告诉第三方机构就可以了，比如甲方需要一双袜子，而乙方它卖一双袜子，它要把袜子卖出去，并不需要自己去直接找到一个卖家来完成袜子的卖出。它也只需要找第三方，告诉别人我要卖一双袜子。这下好了，甲乙双方进行交易活动，都不需要自己直接去找卖家，相当于程序内部开放接口，卖家由第三方作为参数传入。甲乙互相不依赖，而且只有在进行交易活动的时候，甲才和乙产生联系。反之亦然。这样做什么好处么呢，甲乙可以在对方不真实存在的情况下独立存在，而且保证不交易时候无联系，想交易的时候可以很容易的产生联系。甲乙交易活动不需要双方见面，避免了双方的互不信任造成交易失败的问题。因为交易由第三方来负责联系，而且甲乙都认为第三方可靠。那么交易就能很可靠很灵活的产生和进行了。</p>
<p>这就是ioc的核心思想。生活中这种例子比比皆是，支付宝在整个淘宝体系里就是庞大的ioc容器，交易双方之外的第三方，提供可靠性可依赖可灵活变更交易方的资源管理中心。另外人事代理也是，雇佣机构和个人之外的第三方。嗯，就这样，希望对题主有帮助。</p>
<p>==========================update===========================<br>在以上的描述中，诞生了两个专业词汇，依赖注入和控制反转<br>所谓的依赖注入，则是，甲方开放接口，在它需要的时候，能够讲乙方传递进来(注入)<br>所谓的控制反转，甲乙双方不相互依赖，交易活动的进行不依赖于甲乙任何一方，整个活动的进行由第三方负责管理。</p>
<p>这就是spring IOC的思想所在，不要只谈DI IOC这些概念。</p>
<p>人之所恶在好为人师,不实知，谨慎言。</p>
<p>作者：OneNoodle<br>链接：<a href="https://www.zhihu.com/question/23277575/answer/24259844" target="_blank" rel="external">https://www.zhihu.com/question/23277575/answer/24259844</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.zhihu.com/question/23277575" target="_blank" rel="external">原文链接</a></p>
<p>私以为以上各位都没有对spring ioc的精髓讲解到位。大多都在很模糊的说是什]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript typings]]></title>
    <link href="http://shane.hsi.rocks/2016/03/30/TypeScript-typings/"/>
    <id>http://shane.hsi.rocks/2016/03/30/TypeScript-typings/</id>
    <published>2016-03-30T03:57:29.000Z</published>
    <updated>2016-03-30T03:58:03.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/35919693/typescript-cannot-find-name-ipromise-in-rxjs-definition" target="_blank" rel="external">TypeScript cannot find name IPromise in RxJS definition</a></p>
<p>The RxJS type definition from DefinitelyTyped does appear to be outdated. Instead, use the type definition provided by the npm package.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typings install --save --ambient npm:rx/ts/rx<span class="class">.all</span><span class="class">.d</span><span class="class">.ts</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://stackoverflow.com/questions/35919693/typescript-cannot-find-name-ipromise-in-rxjs-definition" target="_blank" rel="extern]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES7 Decorator 与函数变换]]></title>
    <link href="http://shane.hsi.rocks/2016/03/29/ES7-Decorator-Function-Transform/"/>
    <id>http://shane.hsi.rocks/2016/03/29/ES7-Decorator-Function-Transform/</id>
    <published>2016-03-29T05:27:04.000Z</published>
    <updated>2016-03-30T14:31:46.000Z</updated>
    <content type="html"><![CDATA[<p>参考 <a href="https://mp.weixin.qq.com/s?__biz=MzA4NjE3MDg4OQ==&amp;mid=403162136&amp;idx=1&amp;sn=f0aeab0902d162bc98d8d8ad7ee54eea" target="_blank" rel="external">ES7 Decorator 与函数变换</a></p>
<p>这里面有很多的例子非常好。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">arr1, arr2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr1.concat(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在是 2 个数做 +，*，数组连接。</p>
<p>支持多位数，直接侵入式改写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_many</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce((a,b) =&gt; a+b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul_many</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce((a,b) =&gt; a*b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">arr1, arr2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce((a,b) =&gt; a.concat(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更聪明的方法，抽出高阶函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (...args) =&gt; args.reduce(target);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> add_many = reducer(add);</span><br><span class="line"><span class="keyword">let</span> mul_many = reducer(mul);</span><br><span class="line"><span class="keyword">let</span> concat_many = reducer(concat);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考 <a href="https://mp.weixin.qq.com/s?__biz=MzA4NjE3MDg4OQ==&amp;mid=403162136&amp;idx=1&amp;sn=f0aeab0902d162bc98d8d8ad7ee54eea" target]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[一直念着想着 CSS]]></title>
    <link href="http://shane.hsi.rocks/2016/03/27/Always-Thinking-about-CSS/"/>
    <id>http://shane.hsi.rocks/2016/03/27/Always-Thinking-about-CSS/</id>
    <published>2016-03-27T11:33:46.000Z</published>
    <updated>2016-03-28T02:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>并不是不喜欢 CSS。而是找不到 CSS 的学习好方法。这东西就和学数学一样（原谅我用数学比较，因为我一直后悔没有多练习数学题），要大量的实践，总结规律，然后新的场景用总结的规律尝试去套，不能套的要去拓展和完善规律。</p>
<blockquote>
<p>哪一天我也能学好数学？O(∩_∩)O</p>
</blockquote>
<p>反正我不喜欢熟记一堆堆的理论然后找最佳实践，事实证明这样做真的好难好难。/(ㄒoㄒ)/~~</p>
<p>目前终于有了一个好的机会，在好的时间：</p>
<ul>
<li>做一个不是很复杂的 web app。</li>
<li>我脑海里已经有了一堆一堆的理论，什么 position relative/absolute，display inline-block/block。盒模型内部的目前觉得还好。</li>
</ul>
<h2 id="u6240_u6709_u7684_u603B_u7ED3"><a href="#u6240_u6709_u7684_u603B_u7ED3" class="headerlink" title="所有的总结"></a>所有的总结</h2><h3 id="u603B_u7ED3_2016_u5E7403_u670827_u65E519_3A50_3A38"><a href="#u603B_u7ED3_2016_u5E7403_u670827_u65E519_3A50_3A38" class="headerlink" title="总结 2016年03月27日19:50:38"></a>总结 2016年03月27日19:50:38</h3><p>关键还是要总结下原语。CSS 和 HTML 分开还是就使用 HTML（JSX）的名字做布局？分开的话，都是用 HTML 的话，就是有两类 Component。一类 layout。关键是这样写 Layout 可不可以重用。能重用的话，就完美了。</p>
<h3 id="u603B_u7ED3_2016_u5E7403_u670828_u65E510_3A07_3A53"><a href="#u603B_u7ED3_2016_u5E7403_u670828_u65E510_3A07_3A53" class="headerlink" title="总结 2016年03月28日10:07:53"></a>总结 2016年03月28日10:07:53</h3><h2 id="2016_u5E7403_u670828_u65E510_3A07_3A53"><a href="#2016_u5E7403_u670828_u65E510_3A07_3A53" class="headerlink" title="2016年03月28日10:07:53"></a>2016年03月28日10:07:53</h2><h3 id="u788E_u788E_u5FF5"><a href="#u788E_u788E_u5FF5" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>margin 是可以重叠的，使用这个有风险。使用 margin 主要是为了隔开一些距离。其实只要一方隔开就行，可以选择 main part 设置 margin。</p>
<p>margin 和 padding 都可以隔开，建议在隔开这块，用 margin 多一点。画出的线条很漂亮（当然是因为 margin 隔着 border，而 padding 隔着的是看不见的字体周围的线条，从设计上也是 border 更有效）。</p>
<img src="/2016/03/27/Always-Thinking-about-CSS/1.png" alt="1.png" title="">
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><h2 id="2016_u5E7403_u670827_u65E519_3A50_3A38"><a href="#2016_u5E7403_u670827_u65E519_3A50_3A38" class="headerlink" title="2016年03月27日19:50:38"></a>2016年03月27日19:50:38</h2><h3 id="u60F3_u5230_u7684"><a href="#u60F3_u5230_u7684" class="headerlink" title="想到的"></a>想到的</h3><p>现在第一个要解决的是大的布局问题。这个用 position 可以很好的解决。</p>
<p>absolute 做大的布局的摆布。</p>
<p>relative 其实是做定位的时候，借用下其他元素的容量。这个看起来好难好难。但用的时候真的必须要。比如下面说到的同一行布局。</p>
<p>但是其实 relative 更多的是做些一些位移。要深刻理解 relative，应该比较下 relative/static。</p>
<p>参考：<a href="http://stackoverflow.com/questions/5011211/difference-between-static-and-relative-positioning" target="_blank" rel="external">Difference between static and relative positioning</a>。</p>
<p><strong>Statically positioned elements don’t obey <code>left</code>, <code>top</code>, <code>right</code> and <code>bottom</code> rules:</strong>。就酱，static 不会相对于自己的 normal position 位移。</p>
<p>如果有这样的需求就是 relative。</p>
<p>然而 absolute 都不用考虑 sibling，只要考虑 parent（为了方便定位，找一个好的 parent，^_^）。</p>
<p>同行摆布使用 <code>inline-block</code>，加上 <code>vertial-align: top</code>。参考：<a href="http://stackoverflow.com/questions/9273016/why-is-this-inline-block-element-pushed-downward" target="_blank" rel="external">Why is this inline-block element pushed downward?</a></p>
<p><code>inline-block</code> 是来替换 float（部分场景下，即放在同一行，但是如果真有一部分按左对齐，一部分按右对齐，还是得要 float），以及模拟 <code>table-cell</code> 这个（或者也可能是 ul li，突然发现，语义化元素的自带样式会和 css 有部分功能的重叠）。</p>
<p>参考：<a href="http://www.zhangxinxu.com/wordpress/2010/11/%E6%8B%9C%E6%8B%9C%E4%BA%86%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80-%E5%9F%BA%E4%BA%8Edisplayinline-block%E7%9A%84%E5%88%97%E8%A1%A8%E5%B8%83%E5%B1%80/" target="_blank" rel="external">拜拜了,浮动布局-基于display:inline-block的列表布局</a>。这里重点说下 <code>line-height</code> 方法。</p>
<p>我还要解决一个问题，<strong>垂直居中问题</strong>。</p>
<p>一般是设置，<code>height</code> 和 <code>line-height</code>（这个是 wrapper） 相同，而且 <code>line-height</code> 要大于 <code>font-size</code>（一般也是这样）。<strong>而且只适用于单行文字</strong>。</p>
<blockquote>
<p>By default equal space will be given above and below the text and so the text will sit in the vertical center.</p>
</blockquote>
<p>其他几种方法是：</p>
<p><code>Vertical-Align</code> 是最简单的方法。但是它只适用于 <code>table-cell</code> 和一些 <code>inline</code>（估计 <code>inline-block</code> 不行）。也就是不适用于 block 元素。</p>
<p>网上关于垂直居中的文章特别多：比如这篇 <a href="http://vanseodesign.com/css/vertical-centering/" target="_blank" rel="external">6 Methods For Vertical Centering With CSS</a></p>
<p>我觉得其他的方法就研究 [lost] 吧（复杂的场景）。</p>
<h3 id="u603B_u7ED3-1"><a href="#u603B_u7ED3-1" class="headerlink" title="总结"></a>总结</h3><p>关键还是要总结下原语。CSS 和 HTML 分开还是就使用 HTML（JSX）的名字做布局？分开的话，都是用 HTML 的话，就是有两类 Component。一类 layout。关键是这样写 Layout 可不可以重用。能重用的话，就完美了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>并不是不喜欢 CSS。而是找不到 CSS 的学习好方法。这东西就和学数学一样（原谅我用数学比较，因为我一直后悔没有多练习数学题），要大量的实践，总结规律，然后新的场景用总结的规律尝试去套，不能套的要去拓展和完善规律。</p>
<blockquote>
<p>哪一天我也能学好]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Why is this inline-block element pushed downward?]]></title>
    <link href="http://shane.hsi.rocks/2016/03/27/Why-is-this-inline-block-element-pushed-downward/"/>
    <id>http://shane.hsi.rocks/2016/03/27/Why-is-this-inline-block-element-pushed-downward/</id>
    <published>2016-03-27T11:21:34.000Z</published>
    <updated>2016-03-27T13:28:05.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/9273016/why-is-this-inline-block-element-pushed-downward" target="_blank" rel="external">Why is this inline-block element pushed downward?</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"firstDiv"</span>&gt;</span>FIRST<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"secondDiv"</span>&gt;</span>SECOND<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"thirdDiv"</span>&gt;</span>THIRD</span><br><span class="line">        <span class="tag">&lt;<span class="title">br</span>&gt;</span>some more content</span><br><span class="line">        <span class="tag">&lt;<span class="title">br</span>&gt;</span> some more content</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">350px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0px</span> auto</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#container</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">15px</span> solid orange</span></span>;   </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#firstDiv</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid brown</span></span>;     </span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">70px</span></span></span>;      </span><br><span class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value">hidden</span></span>;  </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#secondDiv</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid skyblue</span></span>;         </span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value">left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">70px</span></span></span>;     </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#thirdDiv</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">5px</span> solid yellowgreen</span></span>;    </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>回到：</p>
<p>Basically you have added more clutter in your code which is creating more confusion so first I try to remove clutter which hinders understanding the real issue.</p>
<p>First of all we have to establish that what’s the real question? Its that why “inline-block” element is pushed downward.</p>
<p>首先看下，</p>
<p>Now we start to understand it and remove the clutter first.</p>
<p>Here comes the turn of some <a href="http://www.w3.org/TR/CSS2/visudet.html#leading" target="_blank" rel="external">literature</a> to grasp the idea of line boxes and how they are lined in the same line esp read last paragraph carefully because there lies the answer of your question.</p>
<blockquote>
<p>The baseline of an ‘inline-block’ is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its ‘overflow’ property has a computed value other than ‘visible’, in which case the baseline is the bottom margin edge.</p>
</blockquote>
<p>If you are not sure about <a href="http://www.w3.org/TR/CSS2/visudet.html#leading" target="_blank" rel="external">baseline</a> then here is brief explanation in simple words.</p>
<p>inline-block 的 baseline 是最后一个 line box 的 normal flow。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://stackoverflow.com/questions/9273016/why-is-this-inline-block-element-pushed-downward" target="_blank" rel="external">Why ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习 react-redux 的 connect API]]></title>
    <link href="http://shane.hsi.rocks/2016/03/27/Learn-connect-API-of-react-redux/"/>
    <id>http://shane.hsi.rocks/2016/03/27/Learn-connect-API-of-react-redux/</id>
    <published>2016-03-27T06:52:52.000Z</published>
    <updated>2016-03-29T09:39:10.000Z</updated>
    <content type="html"><![CDATA[<p>这个 API 是设计的相当复杂啊。</p>
<p>从文档先了解下它实现的功能。</p>
<h3 id="connect_28_5BmapStateToProps_5D_2C__5BmapDispatchToProps_5D_2C__5BmergeProps_5D_2C__5Boptions_5D_29"><a href="#connect_28_5BmapStateToProps_5D_2C__5BmapDispatchToProps_5D_2C__5BmergeProps_5D_2C__5Boptions_5D_29" class="headerlink" title="connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])"></a><code>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</code></h3><p>Connects a React component to a Redux store.</p>
<p>将一个 React component 和一个 Redux store 连接起来。</p>
<p>It does not modify the component class passed to it.<br>Instead, it <em>returns</em> a new, connected component class, for you to use.</p>
<p>不会修改传入的 component，而是返回一个新的（curry）。</p>
<h4 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h4><ul>
<li>[<code>mapStateToProps(state, [ownProps]): stateProps</code>] (<em>Function</em>): If specified, the component will subscribe to Redux store updates. Any time it updates, <code>mapStateToProps</code> will be called. Its result must be a plain object*, and it will be merged into the component’s props. If you omit it, the component will not be subscribed to the Redux store. If <code>ownProps</code> is specified as a second argument, its value will be the props passed to your component, and <code>mapStateToProps</code> will be re-invoked whenever the component receives new props.</li>
</ul>
<ul>
<li>如果指定了，component 会订阅 Redux store 的 updates。每次它 update，<code>mapStateToProps</code> 就会被调用。</li>
<li>结果必须是 plain objects。</li>
<li>会被合并到 component 的 props。</li>
<li>如果省略了，不会订阅 store。</li>
<li><p>如果 ownProps，会传给 component，并且 <code>mapStateToProps</code> 会在每次 component 获取新的 props 被调用。</p>
<blockquote>
<p>Note: in advanced scenarios where you need more control over the rendering performance, <code>mapStateToProps()</code> can also return a function. In this case, <em>that</em> function will be used as <code>mapStateToProps()</code> for a particular component instance. This allows you to do per-instance memoization. You can refer to <a href="https://github.com/reactjs/react-redux/pull/279" target="_blank" rel="external">#279</a> and the tests it adds for more details. Most apps never need this.</p>
</blockquote>
</li>
</ul>
<ul>
<li>[<code>mapDispatchToProps(dispatch, [ownProps]): dispatchProps</code>] (<em>Object</em> or <em>Function</em>): If an object is passed, each function inside it will be assumed to be a Redux action creator. An object with the same function names, but with every action creator wrapped into a <code>dispatch</code> call so they may be invoked directly, will be merged into the component’s props. If a function is passed, it will be given <code>dispatch</code>. It’s up to you to return an object that somehow uses <code>dispatch</code> to bind action creators in your own way. (Tip: you may use the <a href="http://reactjs.github.io/redux/docs/api/bindActionCreators.html" target="_blank" rel="external"><code>bindActionCreators()</code></a> helper from Redux.) If you omit it, the default implementation just injects <code>dispatch</code> into your component’s props. If <code>ownProps</code> is specified as a second argument, its value will be the props passed to your component, and <code>mapDispatchToProps</code> will be re-invoked whenever the component receives new props.</li>
</ul>
<ul>
<li>如果传入的是 object，object 的每个 function 被认为是 actionCreator。一个新的 object， key 相同，但是会被包到 dispatch 里，会被 merge 到 props 里。</li>
<li>如果没有传入参数，则 dispatch 会被作为 props 传入。</li>
<li><p>如果 ownProps，会传给 component，并且 <code>mapDispatchToProps</code> 会在每次 component 获取新的 props 被调用。</p>
<blockquote>
<p>Note: in advanced scenarios where you need more control over the rendering performance, <code>mapDispatchToProps()</code> can also return a function. In this case, <em>that</em> function will be used as <code>mapDispatchToProps()</code> for a particular component instance. This allows you to do per-instance memoization. You can refer to <a href="https://github.com/reactjs/react-redux/pull/279" target="_blank" rel="external">#279</a> and the tests it adds for more details. Most apps never need this.</p>
</blockquote>
</li>
</ul>
<ul>
<li>[<code>mergeProps(stateProps, dispatchProps, ownProps): props</code>] (<em>Function</em>): If specified, it is passed the result of <code>mapStateToProps()</code>, <code>mapDispatchToProps()</code>, and the parent <code>props</code>. The plain object you return from it will be passed as props to the wrapped component. You may specify this function to select a slice of the state based on props, or to bind action creators to a particular variable from props. If you omit it, <code>Object.assign({}, ownProps, stateProps, dispatchProps)</code> is used by default.</li>
</ul>
<ul>
<li>默认是 <code>Object.assign({}, ownProps, stateProps, dispatchProps)</code></li>
</ul>
<ul>
<li>[<code>options</code>] <em>(Object)</em> If specified, further customizes the behavior of the connector.<ul>
<li>[<code>pure = true</code>] <em>(Boolean)</em>: If true, implements <code>shouldComponentUpdate</code> and shallowly compares the result of <code>mergeProps</code>, preventing unnecessary updates, assuming that the component is a “pure” component and does not rely on any input or state other than its props and the selected Redux store’s state. <em>Defaults to <code>true</code>.</em></li>
<li>[<code>withRef = false</code>] <em>(Boolean)</em>: If true, stores a ref to the wrapped component instance and makes it available via <code>getWrappedInstance()</code> method. <em>Defaults to <code>false</code>.</em></li>
</ul>
</li>
</ul>
<h4 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h4><p>A React component class that injects state and action creators into your component according to the specified options.</p>
<h5 id="Static_Properties"><a href="#Static_Properties" class="headerlink" title="Static Properties"></a>Static Properties</h5><ul>
<li><code>WrappedComponent</code> <em>(Component)</em>: The original component class passed to <code>connect()</code>.</li>
</ul>
<h5 id="Static_Methods"><a href="#Static_Methods" class="headerlink" title="Static Methods"></a>Static Methods</h5><p>All the original static methods of the component are hoisted.</p>
<h5 id="Instance_Methods"><a href="#Instance_Methods" class="headerlink" title="Instance Methods"></a>Instance Methods</h5><h6 id="getWrappedInstance_28_29_3A_ReactComponent"><a href="#getWrappedInstance_28_29_3A_ReactComponent" class="headerlink" title="getWrappedInstance(): ReactComponent"></a><code>getWrappedInstance(): ReactComponent</code></h6><p>Returns the wrapped component instance. Only available if you pass <code>{ withRef: true }</code> as part of the <code>connect()</code>’s fourth <code>options</code> argument.</p>
<h4 id="Remarks"><a href="#Remarks" class="headerlink" title="Remarks"></a>Remarks</h4><ul>
<li><p>It needs to be invoked two times. The first time with its arguments described above, and a second time, with the component: <code>connect(mapStateToProps, mapDispatchToProps, mergeProps)(MyComponent)</code>.</p>
</li>
<li><p>It does not modify the passed React component. It returns a new, connected component, that you should use instead.</p>
</li>
<li><p>The <code>mapStateToProps</code> function takes a single argument of the entire Redux store’s state and returns an object to be passed as props. It is often called a <strong>selector</strong>. Use <a href="https://github.com/reactjs/reselect" target="_blank" rel="external">reselect</a> to efficiently compose selectors and <a href="http://redux.js.org/docs/recipes/ComputingDerivedData.html" target="_blank" rel="external">compute derived data</a>.</p>
</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><h5 id="Inject_just_dispatch_and_don_u2019t_listen_to_store"><a href="#Inject_just_dispatch_and_don_u2019t_listen_to_store" class="headerlink" title="Inject just dispatch and don’t listen to store"></a>Inject just <code>dispatch</code> and don’t listen to store</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect()(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_dispatch_and_every_field_in_the_global_state"><a href="#Inject_dispatch_and_every_field_in_the_global_state" class="headerlink" title="Inject dispatch and every field in the global state"></a>Inject <code>dispatch</code> and every field in the global state</h5><blockquote>
<p>Don’t do this! It kills any performance optimizations because <code>TodoApp</code> will rerender after every action.<br>It’s better to have more granular <code>connect()</code> on several components in your view hierarchy that each only<br>listen to a relevant slice of the state.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(state =&gt; state)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_dispatch_and_todos"><a href="#Inject_dispatch_and_todos" class="headerlink" title="Inject dispatch and todos"></a>Inject <code>dispatch</code> and <code>todos</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29"><a href="#Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29" class="headerlink" title="Inject todos and all action creators (addTodo, completeTodo, …)"></a>Inject <code>todos</code> and all action creators (<code>addTodo</code>, <code>completeTodo</code>, …)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, actionCreators)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29_as_actions"><a href="#Inject_todos_and_all_action_creators__28addTodo_2C_completeTodo_2C__u2026_29_as_actions" class="headerlink" title="Inject todos and all action creators (addTodo, completeTodo, …) as actions"></a>Inject <code>todos</code> and all action creators (<code>addTodo</code>, <code>completeTodo</code>, …) as <code>actions</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return &#123; actions: bindActionCreators(actionCreators, dispatch) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_and_a_specific_action_creator__28addTodo_29"><a href="#Inject_todos_and_a_specific_action_creator__28addTodo_29" class="headerlink" title="Inject todos and a specific action creator (addTodo)"></a>Inject <code>todos</code> and a specific action creator (<code>addTodo</code>)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addTodo &#125; <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return bindActionCreators(&#123; addTodo &#125;, dispatch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_2C_todoActionCreators_as_todoActions_2C_and_counterActionCreators_as_counterActions"><a href="#Inject_todos_2C_todoActionCreators_as_todoActions_2C_and_counterActionCreators_as_counterActions" class="headerlink" title="Inject todos, todoActionCreators as todoActions, and counterActionCreators as counterActions"></a>Inject <code>todos</code>, todoActionCreators as <code>todoActions</code>, and counterActionCreators as <code>counterActions</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> todoActionCreators <span class="keyword">from</span> <span class="string">'./todoActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> counterActionCreators <span class="keyword">from</span> <span class="string">'./counterActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    todoActions: bindActionCreators(todoActionCreators, dispatch),</span><br><span class="line">    counterActions: bindActionCreators(counterActionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_2C_and_todoActionCreators_and_counterActionCreators_together_as_actions"><a href="#Inject_todos_2C_and_todoActionCreators_and_counterActionCreators_together_as_actions" class="headerlink" title="Inject todos, and todoActionCreators and counterActionCreators together as actions"></a>Inject <code>todos</code>, and todoActionCreators and counterActionCreators together as <code>actions</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> todoActionCreators <span class="keyword">from</span> <span class="string">'./todoActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> counterActionCreators <span class="keyword">from</span> <span class="string">'./counterActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    actions: bindActionCreators(Object.assign(&#123;&#125;, todoActionCreators, counterActionCreators), dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_2C_and_all_todoActionCreators_and_counterActionCreators_directly_as_props"><a href="#Inject_todos_2C_and_all_todoActionCreators_and_counterActionCreators_directly_as_props" class="headerlink" title="Inject todos, and all todoActionCreators and counterActionCreators directly as props"></a>Inject <code>todos</code>, and all todoActionCreators and counterActionCreators directly as props</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> todoActionCreators <span class="keyword">from</span> <span class="string">'./todoActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> counterActionCreators <span class="keyword">from</span> <span class="string">'./counterActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">  return bindActionCreators(Object.assign(&#123;&#125;, todoActionCreators, counterActionCreators), dispatch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_of_a_specific_user_depending_on_props"><a href="#Inject_todos_of_a_specific_user_depending_on_props" class="headerlink" title="Inject todos of a specific user depending on props"></a>Inject <code>todos</code> of a specific user depending on props</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state, ownProps) &#123;</span><br><span class="line">  return &#123; todos: state.todos[ownProps.userId] &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps)(TodoApp)</span><br></pre></td></tr></table></figure>
<h5 id="Inject_todos_of_a_specific_user_depending_on_props_2C_and_inject_props-userId_into_the_action"><a href="#Inject_todos_of_a_specific_user_depending_on_props_2C_and_inject_props-userId_into_the_action" class="headerlink" title="Inject todos of a specific user depending on props, and inject props.userId into the action"></a>Inject <code>todos</code> of a specific user depending on props, and inject <code>props.userId</code> into the action</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123; todos: state.todos &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mergeProps(stateProps, dispatchProps, ownProps) &#123;</span><br><span class="line">  return Object.assign(&#123;&#125;, ownProps, &#123;</span><br><span class="line">    todos: stateProps.todos[ownProps.userId],</span><br><span class="line">    addTodo: (text) =&gt; dispatchProps.addTodo(ownProps.userId, text)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, actionCreators, mergeProps)(TodoApp)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>这个 API 是设计的相当复杂啊。</p>
<p>从文档先了解下它实现的功能。</p>
<h3 id="connect_28_5BmapStateToProps_5D_2C__5BmapDispatchToProps_5D_2C__5BmergeProps_5D_2C__5]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[和大神聊同步，异步，并行，并发]]></title>
    <link href="http://shane.hsi.rocks/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/"/>
    <id>http://shane.hsi.rocks/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/</id>
    <published>2016-03-25T10:05:33.000Z</published>
    <updated>2016-03-26T00:53:16.000Z</updated>
    <content type="html"><![CDATA[<p>聊天记录截图，当时觉得理解清楚了。今天发现又有点遗忘了。截图记录。</p>
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/1.PNG" alt="1.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/2.PNG" alt="2.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/3.PNG" alt="3.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/4.PNG" alt="4.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/5.PNG" alt="5.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/6.PNG" alt="6.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/7.PNG" alt="7.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/8.PNG" alt="8.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/9.PNG" alt="9.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/10.PNG" alt="10.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/11.PNG" alt="11.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/12.PNG" alt="12.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/13.PNG" alt="13.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/14.PNG" alt="14.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/15.PNG" alt="15.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/16.PNG" alt="16.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/17.PNG" alt="17.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/18.PNG" alt="18.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/19.PNG" alt="19.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/20.PNG" alt="20.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/21.PNG" alt="21.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/22.PNG" alt="22.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/23.PNG" alt="23.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/24.PNG" alt="24.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/25.PNG" alt="25.PNG" title="">
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/26.PNG" alt="26.PNG" title="">
]]></content>
    <summary type="html">
    <![CDATA[<p>聊天记录截图，当时觉得理解清楚了。今天发现又有点遗忘了。截图记录。</p>
<img src="/2016/03/25/Wechat-Chat-Note-about-Synchronous-Asynchronous-Parallel-Concurrency/1.PNG" a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试工具篇： AVA 和 Sinon.JS]]></title>
    <link href="http://shane.hsi.rocks/2016/03/25/Test-Tools-AVA-with-Sinon-JS/"/>
    <id>http://shane.hsi.rocks/2016/03/25/Test-Tools-AVA-with-Sinon-JS/</id>
    <published>2016-03-25T09:50:33.000Z</published>
    <updated>2016-03-27T04:50:29.000Z</updated>
    <content type="html"><![CDATA[<p>链接：<a href="https://github.com/sindresorhus/ava/issues/560" target="_blank" rel="external">afterEach and beforeEach not running? #560</a></p>
<p>虽然这篇文章是讲这个的（在 <a href="https://github.com/sindresorhus/ava" target="_blank" rel="external">sindresorhus/ava</a> 的 README 里）:</p>
<p>Keep in mind that the <code>beforeEach</code> and <code>afterEach</code> hooks run just before and after a test is run, and that by default tests run concurrently. If you need to set up global state for each test (like spying on <code>console.log</code> <a href="https://github.com/sindresorhus/ava/issues/560" target="_blank" rel="external">for example</a>), you’ll need to make sure the tests are <a href="https://github.com/sindresorhus/ava#running-tests-serially" target="_blank" rel="external">run serially</a>.</p>
<p>如果要设置一些 global state，比如 spying <code>console.log</code>，则需要保证 tests 是串行运行的。</p>
<p>或者使用 <code>context</code> object 来保存原先的 log。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span>;</span><br><span class="line"><span class="keyword">import</span> sinon <span class="keyword">from</span> <span class="string">'sinon'</span>;</span><br><span class="line"></span><br><span class="line">test.beforeEach(t =&gt; &#123;</span><br><span class="line">    t.context.log = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log = sinon.spy();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test.afterEach(t =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log = t.context.log;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'first'</span>, t =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'first'</span>);</span><br><span class="line">    t.true(<span class="built_in">console</span>.log.calledOnce);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'second'</span>, t =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'second'</span>);</span><br><span class="line">    t.true(<span class="built_in">console</span>.log.calledOnce);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>链接：<a href="https://github.com/sindresorhus/ava/issues/560" target="_blank" rel="external">afterEach and beforeEach not running? #560</a>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一次尝试设计一个 Web App]]></title>
    <link href="http://shane.hsi.rocks/2016/03/25/My-First-Try-to-Design-a-Web-App/"/>
    <id>http://shane.hsi.rocks/2016/03/25/My-First-Try-to-Design-a-Web-App/</id>
    <published>2016-03-25T09:16:41.000Z</published>
    <updated>2016-03-25T09:21:59.000Z</updated>
    <content type="html"><![CDATA[<p>不是视觉设计，主要是工作方法论。这里留个标记，便于后期回顾。</p>
<p>这是 todo list。</p>
<img src="/2016/03/25/My-First-Try-to-Design-a-Web-App/of.png" alt="of.png" title="">
<p>这是我思考的过程之一。</p>
<img src="/2016/03/25/My-First-Try-to-Design-a-Web-App/section.png" alt="section.png" title="">
]]></content>
    <summary type="html">
    <![CDATA[<p>不是视觉设计，主要是工作方法论。这里留个标记，便于后期回顾。</p>
<p>这是 todo list。</p>
<img src="/2016/03/25/My-First-Try-to-Design-a-Web-App/of.png" alt="of.png" title]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Webpack Less Loader]]></title>
    <link href="http://shane.hsi.rocks/2016/03/24/Webpack-Less-Loader/"/>
    <id>http://shane.hsi.rocks/2016/03/24/Webpack-Less-Loader/</id>
    <published>2016-03-24T07:14:15.000Z</published>
    <updated>2016-03-24T07:17:30.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/webpack/less-loader" target="_blank" rel="external">webpack/less-loader</a></p>
<p>这里面的小细节还蛮多的。</p>
<p>开发时：</p>
<p>主要注意下 style loader 的作用。在 production 是不需要的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        loader: <span class="string">"style!css!less"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>关键 less 还有 options，具体参考 <a href="http://lesscss.org/usage/#command-line-usage-options" target="_blank" rel="external">LESS documentation</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        loader: <span class="string">"style!css!less?strictMath&amp;noIeCompat"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>生产环境：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// must be 'source-map' or 'inline-source-map'</span></span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                loader: ExtractTextPlugin.extract(</span><br><span class="line">                    <span class="comment">// activate source maps via loader query</span></span><br><span class="line">                    <span class="string">'css?sourceMap!'</span> +</span><br><span class="line">                    <span class="string">'less?sourceMap'</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// extract inline css into separate 'styles.css'</span></span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'styles.css'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/webpack/less-loader" target="_blank" rel="external">webpack/less-loader</a></p>
<p>这里面的小细节还蛮多的。</p>
<p>开发时：</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习 Ava 和 Enzyme]]></title>
    <link href="http://shane.hsi.rocks/2016/03/23/Learn-Ava-and-Enzyme/"/>
    <id>http://shane.hsi.rocks/2016/03/23/Learn-Ava-and-Enzyme/</id>
    <published>2016-03-23T03:06:23.000Z</published>
    <updated>2016-03-27T05:29:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934"><a href="#u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934" class="headerlink" title="最后的总结放前头"></a>最后的总结放前头</h1><h2 id="AVA"><a href="#AVA" class="headerlink" title="AVA"></a>AVA</h2><p>AVA 本身是 test runner，暂时还没有测试到 promise，asnyc/await，observable，所以这块后续学习。</p>
<p>主要是学习 API。包括 assertion 和 其他。</p>
<h3 id="t-pass_28_5Bmessage_5D_29/t-fail"><a href="#t-pass_28_5Bmessage_5D_29/t-fail" class="headerlink" title="t.pass([message])/t.fail"></a><code>t.pass([message])/t.fail</code></h3><p>手动设置 pass 还是 fail，可选 message。</p>
<h3 id="t-ok_28value_2C__5Bmessage_5D_29/t-notOk"><a href="#t-ok_28value_2C__5Bmessage_5D_29/t-notOk" class="headerlink" title="t.ok(value, [message])/t.notOk"></a><code>t.ok(value, [message])/t.notOk</code></h3><p>值是 truthy 的。</p>
<h3 id="t-true_28value_2C__5Bmessage_5D_29/t-false"><a href="#t-true_28value_2C__5Bmessage_5D_29/t-false" class="headerlink" title="t.true(value, [message])/t.false"></a><code>t.true(value, [message])/t.false</code></h3><p>值是 <code>true</code> 的。</p>
<h3 id="t-is_28value_2C_expected_2C__5Bmessage_5D_29/t-not"><a href="#t-is_28value_2C_expected_2C__5Bmessage_5D_29/t-not" class="headerlink" title="t.is(value, expected, [message])/t.not"></a><code>t.is(value, expected, [message])/t.not</code></h3><p>判断 equal。</p>
<h3 id="t-same_28value_2C_expected_2C__5Bmessage_5D_29/t-notSame"><a href="#t-same_28value_2C_expected_2C__5Bmessage_5D_29/t-notSame" class="headerlink" title="t.same(value, expected, [message])/t.notSame"></a><code>t.same(value, expected, [message])/t.notSame</code></h3><p>判断 deep equal。</p>
<h3 id="t-throws_28function_7Cpromise_2C__5Berror_2C__5Bmessage_5D_5D_29/t-notThrows"><a href="#t-throws_28function_7Cpromise_2C__5Berror_2C__5Bmessage_5D_5D_29/t-notThrows" class="headerlink" title="t.throws(function|promise, [error, [message]])/t.notThrows"></a><code>t.throws(function|promise, [error, [message]])/t.notThrows</code></h3><p>function 抛出 error，promise reject 一个 error。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ava"</span>: &#123;</span><br><span class="line">    <span class="string">"babel"</span>: <span class="string">"inherit"</span>,</span><br><span class="line">    <span class="string">"failFast"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"require"</span>: [</span><br><span class="line">      <span class="string">"babel-register"</span>,</span><br><span class="line">      <span class="string">"./test/helpers/setup-browser-env.js"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>t.plan(1)</code> 保证 assertion 执行的次数不多不少。</li>
<li><code>t.only</code></li>
<li><code>t.skip</code></li>
<li><code>test.todo(&#39;will think about writing this later&#39;)</code></li>
</ul>
<h1 id="AVA-1"><a href="#AVA-1" class="headerlink" title="AVA"></a>AVA</h1><p><a href="https://github.com/sindresorhus/ava" target="_blank" rel="external">github</a>。</p>
<p>ava 配置很简单</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"awesome-package"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"ava"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"ava"</span>: <span class="string">"^0.11.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'foo'</span>, t =&gt; &#123;</span><br><span class="line">    t.pass();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'bar'</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> bar = <span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>);</span><br><span class="line"></span><br><span class="line">    t.is(<span class="keyword">await</span> bar, <span class="string">'bar'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>跑测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br><span class="line">npm <span class="built_in">test</span> -- --watch</span><br></pre></td></tr></table></figure>
<p>更多的配置在 pakcage.json 中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ava"</span>: &#123;</span><br><span class="line">    <span class="string">"files"</span>: [</span><br><span class="line">      <span class="string">"my-test-folder/*.js"</span>,</span><br><span class="line">      <span class="string">"!**/not-this-file.js"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"source"</span>: [</span><br><span class="line">      <span class="string">"**/*.&#123;js,jsx&#125;"</span>,</span><br><span class="line">      <span class="string">"!dist/**/*"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"match"</span>: [</span><br><span class="line">      <span class="string">"*oo"</span>,</span><br><span class="line">      <span class="string">"!foo"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"failFast"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"tap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"require"</span>: [</span><br><span class="line">      <span class="string">"babel-register"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"babel"</span>: <span class="string">"inherit"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于对 ES2015 的支持。Ava 是内置了 Babel 6，Ava 使用的配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"stage-2"</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"espower"</span>,</span><br><span class="line">    <span class="string">"transform-runtime"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以修改的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"ava"</span>: &#123;</span><br><span class="line">         <span class="string">"babel"</span>: &#123;</span><br><span class="line">             <span class="string">"presets"</span>: [</span><br><span class="line">                    <span class="string">"es2015"</span>,</span><br><span class="line">                    <span class="string">"stage-0"</span>,</span><br><span class="line">                    <span class="string">"react"</span></span><br><span class="line">             ]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且可以使用 <code>inherit</code> 来使用 <code>.babelrc</code> 的配置，不用再为了 ava 在 transpile 一次。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"babel"</span>: &#123;</span><br><span class="line">        <span class="string">"presets"</span>: [</span><br><span class="line">            <span class="string">"es2015"</span>,</span><br><span class="line">            <span class="string">"stage-0"</span>,</span><br><span class="line">            <span class="string">"react"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"ava"</span>: &#123;</span><br><span class="line">        <span class="string">"babel"</span>: <span class="string">"inherit"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但不管怎样，Note that AVA will always apply the <code>espower</code> and <code>transform-runtime</code> plugins.</p>
<h2 id="u6587_u6863"><a href="#u6587_u6863" class="headerlink" title="文档"></a>文档</h2><p>建议使用 async function</p>
<p>We highly recommend the use of async functions. They make asynchronous code concise and readable, and they implicitly return a promise so you don’t have to.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> promiseFn();</span><br><span class="line">    t.true(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// async arrow function</span></span><br><span class="line">test(<span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> promiseFn();</span><br><span class="line">    t.true(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下面的句子看下，涉及到 spec 文件的放置目录。</p>
<p>Test files are run from their current directory, so process.cwd() is always the same as <strong>dirname. You can just use relative paths instead of doing path.join(</strong>dirname, ‘relative/path’).</p>
<p>其他的 API 用到再看。</p>
<h2 id="u6D4B_u8BD5_u6D4F_u89C8_u5668"><a href="#u6D4B_u8BD5_u6D4F_u89C8_u5668" class="headerlink" title="测试浏览器"></a>测试浏览器</h2><p>依赖 <code>jsdom</code>。</p>
<p><a href="https://github.com/sindresorhus/ava/blob/master/docs/recipes/browser-testing.md" target="_blank" rel="external">Setting up AVA for browser testing</a></p>
<h1 id="Enzyme"><a href="#Enzyme" class="headerlink" title="Enzyme"></a>Enzyme</h1><p>文章介绍，<a href="https://medium.com/airbnb-engineering/enzyme-javascript-testing-utilities-for-react-a417e5e5090f#.sjli8b8zm" target="_blank" rel="external">Enzyme: JavaScript Testing utilities for React</a></p>
<p><a href="https://github.com/airbnb/enzyme/" target="_blank" rel="external">github</a></p>
<p>Airbnb open sourced Enzyme, a JavaScript library for testing React components. </p>
<p>Historically, testing UI has been hard to accomplish for a variety of reasons, but using React removes a lot of these hurdles. We hope that enzyme does a good job removing the remaining ones!</p>
<p>测试 UI 很难，React 帮我们除去了大多的障碍，希望 enzyme 等除去剩下的。</p>
<h2 id="Declarative_UIs_are_Testable_UIs"><a href="#Declarative_UIs_are_Testable_UIs" class="headerlink" title="Declarative UIs are Testable UIs"></a>Declarative UIs are Testable UIs</h2><p>Pure functions (and thus React components) are much easier to test because they simply return a description for what UI of the component should look like, given some application state, rather than actually mutating the UI and having side-effects. This “description” is known as a “Virtual DOM” and is a tree-like data structure.</p>
<ul>
<li>Pure Function 易测试，input -&gt; output，没有 side effects</li>
<li>测试 Virutal DOM，a tree-like data structure.</li>
</ul>
<p>Making assertions on the state of a React render tree can include a lot of boilerplate code and is hard to read, which detracts from the value of the test. Moreover, directly asserting on the resulting tree can strongly couple your tests to implementation details that end up making your tests extremely fragile.</p>
<ul>
<li>测试 React 的 render tree 会有很多 boilerplate 代码。难以阅读，也就降低了 test 的价值。</li>
<li>直接 assert resulting tree 会将 test 和实现细节强耦合，最终 fragile。</li>
</ul>
<p>Enzyme makes asking questions about the rendered output of your React components easy and intuitive by providing a fluent interface around rendered React components.</p>
<p>Enzyme 做的事情是，提供了 fluent interface。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Enzyme exports three different “modes” to render and test components, shallow, mount, and render. Shallow is the recommended mode to start with since it does a better job of isolating your tests to just a single component. If shallow doesn’t work for your use case (for example, if you are relying on the presence of a real DOM), mount or render likely will.</p>
<p>Enzyme 有3种“模式”来 render 和 test 组件。</p>
<ul>
<li>shallow 推荐，</li>
<li>mount </li>
<li>render</li>
</ul>
<h2 id="Github__u7684_u6587_u6863"><a href="#Github__u7684_u6587_u6863" class="headerlink" title="Github 的文档"></a>Github 的文档</h2><p>Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components’ output.</p>
<p>Enzyme’s API is meant to be intuitive and flexible by mimicking jQuery’s API for DOM manipulation and traversal.</p>
<p>模拟了 jQuery 操作和 traverse DOM 的 API。</p>
<p>对于 <code>React 0.14</code>：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --<span class="built_in">save</span>-<span class="built_in">dev</span> react-addons-test-utils@<span class="number">1.4</span></span><br><span class="line">npm i --<span class="built_in">save</span>-<span class="built_in">dev</span> react-dom@<span class="number">1.4</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934"><a href="#u6700_u540E_u7684_u603B_u7ED3_u653E_u524D_u5934" class="headerlink" title]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端技术选型思考于2016年03月23日]]></title>
    <link href="http://shane.hsi.rocks/2016/03/23/2016-03-23-Front-End-General-Techniques-Thoughts/"/>
    <id>http://shane.hsi.rocks/2016/03/23/2016-03-23-Front-End-General-Techniques-Thoughts/</id>
    <published>2016-03-23T01:40:04.000Z</published>
    <updated>2016-03-23T03:41:25.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>HTML/CSS</li>
<li>React</li>
<li>Redux</li>
<li>React Router</li>
<li>Rx</li>
<li>Falcor/Relay/GraphQL</li>
<li>Express</li>
</ul>
<p>分层的话：</p>
<table>
<thead>
<tr>
<th>分层</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTML/CSS - UI, UE</td>
</tr>
<tr>
<td>View - React</td>
</tr>
<tr>
<td>Data flow - Redux/Rx</td>
</tr>
<tr>
<td>Ajax/Cache - Falcor</td>
</tr>
<tr>
<td>Backend - Express/Falcor Endpoint</td>
</tr>
</tbody>
</table>
<p>其他的：</p>
<ul>
<li>Test<ul>
<li>Ava</li>
<li>Enzyme</li>
</ul>
</li>
<li>React Router</li>
<li>Webpack module bundler</li>
<li>Proxy</li>
<li>Mock Server</li>
</ul>
<p><strong>优先级</strong>：</p>
<ol>
<li>Ava/Enzyme - 黑盒</li>
<li>Redux/Rx</li>
<li>HTML/CSS</li>
<li>Faclor</li>
<li>Express</li>
<li>Mock Server</li>
<li>Proxy</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>HTML/CSS</li>
<li>React</li>
<li>Redux</li>
<li>React Router</li>
<li>Rx</li>
<li>Falcor/Relay/GraphQL</li>
<li>Express</li>
</ul>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[npm link]]></title>
    <link href="http://shane.hsi.rocks/2016/03/22/npm-link/"/>
    <id>http://shane.hsi.rocks/2016/03/22/npm-link/</id>
    <published>2016-03-22T06:26:37.000Z</published>
    <updated>2016-03-22T06:32:17.000Z</updated>
    <content type="html"><![CDATA[<p>参考链接：<a href="http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears" target="_blank" rel="external">justjs: node.js tutorials</a></p>
<p><strong>npm link: symbolic links to the rescue</strong></p>
<p>Fortunately npm provides a tool to avoid this tedium. And it’s easy to use. But there’s a catch.</p>
<p>Here’s how it’s supposed to work:</p>
<ol>
<li><p>cd to src/appy</p>
</li>
<li><p>Run “<strong>npm link</strong>“. This creates a symbolic link from a global folder to the src/appy folder.</p>
</li>
<li><p>cd to src/mysite</p>
</li>
<li><p>Run “<strong>npm link appy</strong>“. This links “node_modules/appy” in this particular project to the global folder, so that “require” calls looking for appy wind up loading it from your development folder, src/appy.</p>
</li>
</ol>
<p>Mission accomplished… almost. If you installed Node in a typical way, using MacPorts or Ubuntu’s apt-get, then npm’s “global” folders are probably in a location shared system-wide, like /opt/local/npm or /usr/lib/npm. And this is not good, because it means those “npm link” commands are going to fail unless you run them as root.</p>
<p>如何删除呢？</p>
<p>参考链接：<a href="http://stackoverflow.com/questions/19094630/how-do-i-uninstall-a-package-installed-using-npm-link" target="_blank" rel="external">How do I uninstall a package installed using npm link?</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm rm --global foo&#10;npm ls --global foo # &#26816;&#26597;&#19979;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>参考链接：<a href="http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears" target="_blank" rel="external">justjs: node]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习 Github RESTful API v3]]></title>
    <link href="http://shane.hsi.rocks/2016/03/22/Learn-Github-RESTful-API-v3/"/>
    <id>http://shane.hsi.rocks/2016/03/22/Learn-Github-RESTful-API-v3/</id>
    <published>2016-03-22T03:37:01.000Z</published>
    <updated>2016-03-26T00:45:41.000Z</updated>
    <content type="html"><![CDATA[<p><strong>meida type:</strong></p>
<p>最基本：<br>    application/json</p>
<p>其他类似于上传功能等单独定义。</p>
<p><strong>响应</strong></p>
<p>Response Header:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Status</span>: <span class="string">200 OK</span></span><br><span class="line"></span><br><span class="line"><span class="1c">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>分页</strong></p>
<p>/search/users?q=xx&amp;pageIndex=1&amp;pageSize=10</p>
<p>| 名称 | 类型 | 描述 |<br>| q | string | 关键词 |<br>| pageIndex | number | 第几页 |<br>| pageSize | number | 每页分几个 |</p>
<p><strong>错误</strong></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Status</span>: <span class="string">500 INTERNAL SERVER ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">error</span>:<span class="value"> <span class="string">'...'</span></span><br><span class="line"></span></span></span>&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>meida type:</strong></p>
<p>最基本：<br>    application/json</p>
<p>其他类似于上传功能等单独定义。</p>
<p><strong>响应</strong></p>
<p>Response Header]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Express 设置 webpack-dev-middleware]]></title>
    <link href="http://shane.hsi.rocks/2016/03/22/Setting-up-webpack-dev-middleware-in-Express/"/>
    <id>http://shane.hsi.rocks/2016/03/22/Setting-up-webpack-dev-middleware-in-Express/</id>
    <published>2016-03-22T01:21:32.000Z</published>
    <updated>2016-03-26T00:45:57.000Z</updated>
    <content type="html"><![CDATA[<p>需要了解几个概念：</p>
<ol>
<li>Express 和 connect 的区别</li>
<li>Express middleware 的原理大概了解</li>
</ol>
<p>Webpack dev 的几个概念：</p>
<p><strong>a. webpack dev server 完全可以 self-running 的 dev server，并包含 live reloading。</strong>：</p>
<p><strong>b. webpack dev middleware，</strong>：</p>
<p>是一个 simple wrapper middleware for webpack。 It serves the files emitted from webpack over a <strong>connect server</strong>.</p>
<p>和 bundling as files 相比的优势：</p>
<ol>
<li>No files are written to disk, it handles the files <strong>in memory</strong>。</li>
<li>If files changed <strong>in watch mode</strong>, the middleware no longer serves the old bundle, but <strong>delays requests until the compiling has finished</strong>. You don’t have to wait before refreshing the page after a file modification.</li>
</ol>
<p><strong>c. webpack hot middleware</strong></p>
<p>Webpack hot reloading using only webpack-dev-middleware. This allows you to add hot reloading into an existing server without webpack-dev-server.</p>
<p>以上两种 middleware 的区别可能要看代码。从文档和我的理解来说：</p>
<ol>
<li>dev 是 in memory</li>
<li>hot 是依赖了 dev，并增加了 hot reload</li>
</ol>
<p>因为已经有 Express 作为 server，所以，目的是：</p>
<p><strong>use webpack-dev-server as a middleware</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>需要了解几个概念：</p>
<ol>
<li>Express 和 connect 的区别</li>
<li>Express middleware 的原理大概了解</li>
</ol>
<p>Webpack dev 的几个概念：</p>
<p><strong>a. webpa]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[渐进增强 Web 开发的思考]]></title>
    <link href="http://shane.hsi.rocks/2016/03/17/Thoughts-on-Progressive-Web-Development/"/>
    <id>http://shane.hsi.rocks/2016/03/17/Thoughts-on-Progressive-Web-Development/</id>
    <published>2016-03-17T09:00:44.000Z</published>
    <updated>2016-03-26T00:47:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6837_u5F0F"><a href="#u6837_u5F0F" class="headerlink" title="样式"></a>样式</h2><p>样式使用 ant.design。</p>
<p>样式不会变。ant.design 的就很好。</p>
<p>但是如何使用 React 实现？可以修改。反正对用户的（接口）不要变。</p>
<h2 id="u4F46_u662F_u57FA_u672C_u7684_Layout__u8981_u5B9A_u4E0B_u6765"><a href="#u4F46_u662F_u57FA_u672C_u7684_Layout__u8981_u5B9A_u4E0B_u6765" class="headerlink" title="但是基本的 Layout 要定下来"></a>但是基本的 Layout 要定下来</h2><img src="/2016/03/17/Thoughts-on-Progressive-Web-Development/mockup.png" alt="mockup.png" title="">
<p>借鉴的淘宝的。可以很顺畅的放下 </p>
<ul>
<li>logo</li>
<li>omni serach</li>
<li>function area, ex. notification, help</li>
<li>left side bar</li>
<li>tab bar</li>
</ul>
<p>不要给用户选择。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6837_u5F0F"><a href="#u6837_u5F0F" class="headerlink" title="样式"></a>样式</h2><p>样式使用 ant.design。</p>
<p>样式不会变。ant.design 的就很好。</p>
<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何设计出色的网站后台原型？- 知乎问题学习]]></title>
    <link href="http://shane.hsi.rocks/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/"/>
    <id>http://shane.hsi.rocks/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/</id>
    <published>2016-03-17T07:11:18.000Z</published>
    <updated>2016-03-17T08:10:20.000Z</updated>
    <content type="html"><![CDATA[<p>Q：新手请教，如何设计出色的网站后台的原型？前辈们都有那些什么工作方法，设计经验，请不吝赐教!~</p>
<p>作者：justinlam</p>
<p>严重不同意最高票的回答。对 <strong>信息系统逻辑</strong> 的理解太表面。</p>
<p>没错，在设计系统时最开始确实是要定义好模块结构的划分，但是划分的方法不应该按照功能模块而是 <strong>按照业务逻辑进行划分</strong>。首先在 <strong>规划系统时要思考这个系统的作用到底是解决了什么问题或者对企业带来了怎么样的提升</strong> 。在这个大的环境下确定了之后，需求分析的阶段，应该按照业务的职责区块来划分子系统。</p>
<blockquote>
<p>应该一直维护一个图谱，每一块的都是相连的。可以乱，可以花时间整理。</p>
<p>注：作者认为这个是 <strong>在使用上是达不到出色的</strong>。原因是划分的方式。</p>
</blockquote>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-1.png" alt="zhihu-1.png" title="">
<p>这张图应该是 <strong>很普遍而且典型的后台管理系统</strong>，但是这样的系统无论是在开发还是使用我认为都是 <strong>达不到出色的</strong>。图中的板块划分采用 <strong>“业务名词+管理”</strong> 来进行命名，实际上也就是 <strong>以”物”为线索</strong> 贯穿整个系统。但是在实际操作中 <strong>物与物之间的传递都是交错</strong> 在一起的，例如图中的项目管理板块中包含了”合同管理”，在合同管理板块中又包含了”合同管理”那么究竟是哪个进行管理呢，项目管理中是否又包含权限的区分呢，这样的划分明显是有问题的。我在另一个回答上提到过 <strong>“穷尽不重复”</strong> 的划分方法，其实在这里就可以体现出作用来。</p>
<blockquote>
<p><strong>物与物之间的传递都是交错</strong>，就是 graph。上例的划分是 tree。</p>
</blockquote>
<p>那么正确的后台划分子系统的方式应该是 <strong>按照业务流程</strong> 来划分，以 <strong>“事”</strong> 为线索贯穿系统。采用 <strong>业务流程的环节</strong> 进行划分可以有效的 <strong>避免重复和混乱</strong> 的现象，对整个系统的架构都是非常清晰明了的。想要以”事”为线索进行梳理，有一个很好的方法就是使用 <strong>UML中的构件图</strong> 的来解决。对于产品人员，只需要理解构件图的思想，画出一个轻量级的框架。</p>
<blockquote>
<p><strong>按照业务流程</strong>，采用 <strong>业务流程的环节</strong> 进行划分。有效的 <strong>避免重复和混乱</strong> 。</p>
</blockquote>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-2.png" alt="zhihu-2.png" title="">
<p>首先在构件图中两个最重要的概念 <strong>构件和接口</strong> 对应着 <strong>事件和流程</strong> ，接口与接口之间只存在 <strong>实现(代表这个流程由这个事件提供的)和使用(代表这个事件要使用这个流程)</strong> 这两个关系。理解了这一概念之后就可以对 <strong>事与事，事与流程，流程与流程之间进行连接</strong>。</p>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-3.png" alt="zhihu-3.png" title="">
<p>画构件图，<strong>第一步是识别建模的构件集合，也就是对主题域进行划分</strong>。可以按照 <strong>工作职责范围(部门)</strong> 划分成不同的 <strong>主题域</strong>，划分的时候也可以根据需要 <strong>进行多级的嵌套</strong> ，这样可以更容易理解上下级之间的关联。例如软件开发商可以按照开发人员，产品人员，销售人员职责不同进行第一级区块划分，然后再根据开发人员负责的不同环节进行第二级部门的划分。那么根据区块就可以很容易划分出”销售”和”研发”两个主题域。</p>
<blockquote>
<p>构件的集合，可以理解成 namespace。可以镜像于 <strong>部门（工作职责）</strong><br>嵌套关系，可以镜像于 Job Family。</p>
<p>Job Family Group -&gt; Job Family 职业群，职业<br>Job Family + Management Level = Job Profile 职能<br>Job Profile + Organizaiton = Position 职位</p>
</blockquote>
<p>在研发这个主题域内主要负责针对软件研发进行管理，经过设计，研发，测试这几个阶段生产出成型的软件。那么这块就可以命名为”研发管理系统子系统”。</p>
<p>在销售这个主题域内主要负责对客户的销售，客户培训，售后服务等，因此这块可以命名为”客户服务管理子系统”。</p>
<p>在一般的系统中往往会加入后勤板块，在这个板块内含有硬件，财政和人员这些基本模板，可以划分成“硬件服务管理子系统”，”财政管理子系统”和”人员管理子系统”。后面两个子系统按照范围界定的原则相对独立，所以在前期设计中暂不考虑。</p>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-4.png" alt="zhihu-4.png" title="">
<p>第二步需要把 <strong>功能不同的模块</strong> 划分成 <strong>构件</strong>，同时 <strong>确定构件与构件之间的接口，也就是开始绘制构件图</strong>。首先每一个主题域就是一个构件，这个比较好理解。先分析各个主题域之间的关系，四个系统两两之间有不同的关系。因为人员管理子系统相对比较独立，所以这块可以最后考虑。</p>
<p>“研发管理系统子系统”与”客户服务管理子系统”:研发管理需要获取客户服务管理中的订单详情、研发要求、客户资料等；而客户服务管理需要获取研发管理中的项目进展、功能设置等。</p>
<p>“研发管理系统子系统”与”硬件服务管理子系统”:研发管理需要知道数据库和服务器的情况，后台资源占用的情况；硬件服务管理需要获取研发团队的项目进度，功能规划和版本维护的情况。</p>
<p>“客户服务管理子系统”与”硬件服务管理子系统”: 硬件服务管理需要知道客户的基本信息以便确定投入什么硬件支持；客户服务管理系统一般就不需要从后台服务系统获取信息。</p>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-5.png" alt="zhihu-5.png" title="">
<p>（上图是一个比较简单的原型，实际规划还要考虑主题域之间更多关联）</p>
<p>最后一步 <strong>进行主题域范围的明确，界定每个主题域内进行的功能以及相关的事件</strong>。在一些书籍中也把这个关系成为 <strong>上下文关系</strong>，即主题域与功能之间父级与子级的概念。在这个阶段要考虑到 Customer 与 Worker 之间的关系。找到系统中所有的客户，考虑这些客户会引起什么事件的发生，这些事件会引起Worker什么样的工作，讲这些都考虑进来。然后再补充Worker主动发起的动作，那么一个系统的所有事件就能没有遗漏地梳理完整了。这里值得注意的是，对于研发管理子系统而言，其他的客服管理，财政管理都属于是客户关系。他们对于研发关系系统属于消费者的动作。</p>
<blockquote>
<p>差不多理解作者的思想，核心是从流程触发，找到节点，找到节点间的接口。类似于 SOA，或者 FP。所以，需要一种 stream 的通用格式。<br>但是需要 namespace 之类的进行划分。这一块可以参考领域驱动设计。</p>
</blockquote>
<img src="/2016/03/17/How-to-Design-an-Excellent-Web-Admin-Prototype/zhihu-6.png" alt="zhihu-6.png" title="">
<p>通过以上三步可以把一个系统大致的框架搭建起来。这样搭建的好处在于系统的业务流程很清晰，无论是对于研发还是使用者而言都是有好处的，每个人都能清楚地意识到自己在做什么事情。上述分析方法是徐峰老师提出的 <strong>SERU需求分析法</strong> 中关于主题域确定，也就是系统框架结构确定的第一步，这也是设计一个系统最根基的地方，然后才是去考虑更细化，更精准的业务流程设计。把根基打好再去做子系统内部的规划就变得比较简单。对于一个系统，在设计时一定要有“自上而下”的思想，从最大的环境去考虑问题，这样才不会在后期规划中因为突然插入的东西变得混乱。(图片有部分来自网络，侵删)</p>
<p>参考资料：</p>
<ul>
<li><a href="http://zhuanlan.zhihu.com/justinlam/20383851" target="_blank" rel="external">SERU最佳需求分析方法</a></li>
<li><a href="https://book.douban.com/subject/3265691/" target="_blank" rel="external">软件需求最佳实践</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Q：新手请教，如何设计出色的网站后台的原型？前辈们都有那些什么工作方法，设计经验，请不吝赐教!~</p>
<p>作者：justinlam</p>
<p>严重不同意最高票的回答。对 <strong>信息系统逻辑</strong> 的理解太表面。</p>
<p>没错，在设计系统]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Relay 解决的问题]]></title>
    <link href="http://shane.hsi.rocks/2016/03/17/What-Relay-is-Solved/"/>
    <id>http://shane.hsi.rocks/2016/03/17/What-Relay-is-Solved/</id>
    <published>2016-03-17T02:30:46.000Z</published>
    <updated>2016-03-26T00:47:49.000Z</updated>
    <content type="html"><![CDATA[<img src="/2016/03/17/What-Relay-is-Solved/0.png" alt="0.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/1.png" alt="1.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/2.png" alt="2.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/3.png" alt="3.png" title="">
]]></content>
    <summary type="html">
    <![CDATA[<img src="/2016/03/17/What-Relay-is-Solved/0.png" alt="0.png" title="">
<img src="/2016/03/17/What-Relay-is-Solved/1.png" alt="1.png" title=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始学习 Falcor]]></title>
    <link href="http://shane.hsi.rocks/2016/03/16/Getting-Started-With-Falcor/"/>
    <id>http://shane.hsi.rocks/2016/03/16/Getting-Started-With-Falcor/</id>
    <published>2016-03-16T06:55:41.000Z</published>
    <updated>2016-03-26T00:48:09.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://auth0.com/blog/2015/08/28/getting-started-with-falcor/" target="_blank" rel="external">Getting Started With Falcor</a></p>
<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><p>In this tutorial, we will look at some of Falcor’s basic operations and show how they can be used to construct a virtual JSON model from a data source. The example data we’ll use will model a handful of JavaScript conferences. We’ll start on the client side and eventually move everything over to be served from a NodeJS back end. </p>
<p>会涉及到 Falcor 的一些基本操作。</p>
<p>如何从 data source 构造 virutal JSON model。</p>
<p>mock 数据是 JavaScript 会议。</p>
<p>先从 client 端，在写到 NodeJS backend。</p>
<p>Specifically, we will cover:</p>
<ul>
<li>√ What Falcor is and what problems it solves</li>
<li>How to set up a Falcor model on the client and prime it with data 纯 client 端</li>
<li>How to use Falcor’s JSON Graph to avoid having duplicate data JSON Graph 上场，dedupe</li>
<li>How to set up up a Falcor Router with Falcor Express Falcor Router 上场</li>
<li>How to do a basic search using a Falcor route 一个基本的搜索功能</li>
</ul>
<h2 id="What_is_Falcor_3F"><a href="#What_is_Falcor_3F" class="headerlink" title="What is Falcor?"></a>What is Falcor?</h2><p>One of the key problems that Falcor solves is the fact that HTTP wasn’t designed and really isn’t optimized for how web applications should ideally request data. With HTTP, only a single resource can be retrieved per request. Since web applications tend to need to request many small resources, many HTTP requests are often required to get all the data the application needs.</p>
<p>HTTP 并不是为 web application 设计和优化的。</p>
<p>web application 需要很多次小的资源请求。开销又很大。</p>
<p>Another problem that Falcor solves is that JSON objects represent data hierarchically, as trees, whereas data is much more often a graph. In other words, an application’s data doesn’t always have a strict parent-child relationship, but rather will tend to have many predecessors, or be related to many other pieces of data. For example, suppose that we have several categories for our JavaScript conferences. A conference like ng-conf could fit under the category of “JavaScript”, but could also fit under “AngularJS”. If we were to model this with JSON, we might get something like this:</p>
<p>另一个解决的问题，是 data representation，数据展示。</p>
<p>JSON 对象是 tree。</p>
<p>而 data 一般是 graph。</p>
<p>也就是一般不是父子单线关系，而是多线联系。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">categories: &#123;</span><br><span class="line">  javascript: [</span><br><span class="line">    <span class="number">0</span>: &#123;</span><br><span class="line">      name: ng-conf</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  angularjs: [</span><br><span class="line">    <span class="number">0</span>: &#123;</span><br><span class="line">      name: ng-conf</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As it is expressed here, ng-conf has a parent-child relationship with both categories, when really it is related to both. Falcor makes it possible to deal with data as a graph, but still output it as a normal JSON object.</p>
<p>Falcor 做到是，可以用 graph 来表示 data，但是输出的还是普通的 JSON 对象。</p>
<p>Falcor also helps to make data retrieval more efficient. Instead of pulling many JSON objects from an API and then only using some parts of them in the view layer, Falcor wires together a single virtual JSON model that provides only the data that is required at the time that it is needed. For example, if we wanted to get the name of a conference and the first names of its attendees, we typically would first have our API serve the user data and then we would use the first name value in our view. However, with Falcor, we can easily say that we want only the first name value for each attendee and then have that be the only piece of user data that is returned. In this way, Falcor essentially customizes data to the application’s view. Falcor does this through its JSON Graph convention, which is used to model graph information as a JSON object.</p>
<p>数据获取高效：按需索取。</p>
<p>Furthermore, Falcor caches the virtual JSON model so that it can be accessed in-memory. When it becomes necessary to request more or different data, Falcor first consults the cache and if the data is not available there, it makes another request for only the fragment that is missing.</p>
<p>缓存。</p>
<p>后面的就直接练习吧。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> falcor = <span class="built_in">require</span>(<span class="string">'falcor'</span>);</span><br><span class="line"><span class="keyword">var</span> falcorExpress = <span class="built_in">require</span>(<span class="string">'falcor-express'</span>);</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">'falcor-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Have Express request index.html</span></span><br><span class="line">app.use(express.static(<span class="string">'.'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $ref = falcor.Model.ref;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same data that was used in the view for our</span></span><br><span class="line"><span class="comment">// events, but this time on a simple object</span></span><br><span class="line"><span class="comment">// and not a Falcor model.</span></span><br><span class="line"><span class="keyword">var</span> eventsData = &#123;</span><br><span class="line">  locationsById: &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;</span><br><span class="line">      city: <span class="string">"Salt Lake City"</span>,</span><br><span class="line">      state: <span class="string">"Utah"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;</span><br><span class="line">      city: <span class="string">"Las Vegas"</span>,</span><br><span class="line">      state: <span class="string">"Nevada"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span>: &#123;</span><br><span class="line">      city: <span class="string">"Minneapolis"</span>,</span><br><span class="line">      state: <span class="string">"Minnesota"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">4</span>: &#123;</span><br><span class="line">      city: <span class="string">"Walker Creek Ranch"</span>,</span><br><span class="line">      state: <span class="string">"California"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  events: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"ng-conf"</span>,</span><br><span class="line">      description: <span class="string">"The world's best Angular Conference"</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[1]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"React Rally"</span>,</span><br><span class="line">      description: <span class="string">"Conference focusing on Facebook's React"</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[1]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"ng-Vegas"</span>,</span><br><span class="line">      description: <span class="string">"Two days jam-packed with Angular goodness with a focus on Angular 2"</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[2]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"Midwest JS"</span>,</span><br><span class="line">      description: <span class="string">"Midwest JS is a premier technology conference focused on the JavaScript ecosystem."</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[3]'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"NodeConf"</span>,</span><br><span class="line">      description: <span class="string">"NodeConf is the longest running community driven conference for the Node community."</span>,</span><br><span class="line">      location: $ref(<span class="string">'locationsById[4]'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/model.json"</span>, falcorExpress.dataSourceRoute(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Router([&#123;</span><br><span class="line">      <span class="comment">// route 需要符合 整形模式，作为 eventIds</span></span><br><span class="line">    route: <span class="string">"events[&#123;integers:eventIds&#125;]['name', 'description']"</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">pathSet</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> results = [];</span><br><span class="line">            <span class="comment">// 在上面我们指定了 eventIds 标识符</span></span><br><span class="line">            <span class="comment">// 是 array，可以 loop</span></span><br><span class="line">            pathSet.eventIds.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">eventId</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// pathSet[2] 维护的是 key names array</span></span><br><span class="line">              <span class="comment">// JavaScript 嵌套一层（共两层），就会有两个 forEach</span></span><br><span class="line">                pathSet[<span class="number">2</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> eventRecord = eventsData.events[eventId];</span><br><span class="line">                    <span class="comment">// 就是构造一个 &#123;path, value&#125;，让 client 能读懂</span></span><br><span class="line">                    results.push(&#123;</span><br><span class="line">                        path: [<span class="string">'events'</span>, eventId, key],</span><br><span class="line">                        value: eventRecord[key]</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Listening on http://localhost:3000"</span>);</span><br></pre></td></tr></table></figure>
<p>Routes 是匹配 KeySet。在route string 的第一个数组。</p>
<p><code>route: &quot;events[{integers:eventIds}][&#39;name&#39;, &#39;description&#39;]&quot;</code></p>
<p>这里，我们指定：</p>
<ul>
<li>想匹配 integers</li>
<li>要被 eventId 检索</li>
</ul>
<p><code>get</code> 中的 <code>pathSet</code> 参数可以让我们访问 KeySet（KeySet 是客户端提供的，也就是 get 里的）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> falcor.Model(&#123; source: <span class="keyword">new</span> falcor.HttpDataSource(<span class="string">'/model.json'</span>) &#125;);</span><br><span class="line"></span><br><span class="line">model</span><br><span class="line">    .get([</span><br><span class="line">        <span class="string">"events"</span>,</span><br><span class="line">        &#123; from: <span class="number">0</span>, to: <span class="number">2</span> &#125;,</span><br><span class="line">        [<span class="string">"name"</span>, <span class="string">"description"</span>]</span><br><span class="line">    ])</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'event-data'</span>).innerHTML = <span class="built_in">JSON</span>.stringify(response, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>总结下，这个 route 就是要访问 <code>name</code> 和 <code>description</code>。</p>
<p>如果要获取 <code>location</code>，要写另一个 route，<strong>同时记得在第一个 route 里加上 ‘location’</strong>。</p>
<p>下面的 route string，加上了 <code>&#39;location&#39;</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route: <span class="string">"events[&#123;integers:eventIds&#125;]['name', 'description', 'location']"</span>,</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    route: <span class="string">"locationsById[&#123;integers:locationId&#125;]['city', 'state']"</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">pathSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = [];</span><br><span class="line">        pathSet.locationId.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">locationId</span>) </span>&#123;</span><br><span class="line">            pathSet[<span class="number">2</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> location = eventsData.locationsById[locationId];</span><br><span class="line">                results.push(&#123;</span><br><span class="line">                    path: [<span class="string">'locationsById'</span>, locationId, key],</span><br><span class="line">                    value: location[key]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最后一个 route，<strong>Search for an Event by Name</strong>：</p>
<p>The client can send integers as a KeySet to pull a range of results, but it can also provide strings. We can use this to setup an “event by name” search route.</p>
<blockquote>
<p>吐槽下，route string 非常的诡异啊。得写一个 parser 啊。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"events"</span>,</span><br><span class="line">    &#123; from: <span class="number">0</span>, to: <span class="number">2</span> &#125;,</span><br><span class="line">    [<span class="string">"name"</span>, <span class="string">"description"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>可以用 <code>{ from: 0, to: 2 }</code> 作为 KeySet 来表示 range。</p>
<p>当然，也可以提供 string 啦。可以用这个特性，做一个 search route（“event by name“）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    route: <span class="string">"events.byName[&#123;keys&#125;]['description']"</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">pathSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = [];</span><br><span class="line">        pathSet[<span class="number">2</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            eventsData.events.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (_.includes(event, name)) &#123;</span><br><span class="line">                    results.push(&#123;</span><br><span class="line">                        path: [<span class="string">'events'</span>, <span class="string">'byName'</span>, name, <span class="string">'description'</span>],</span><br><span class="line">                        value: event.description</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client 调用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.get([<span class="string">"events"</span>, <span class="string">"byName"</span>, [<span class="string">"Midwest JS"</span>], [<span class="string">"description"</span>]])</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://auth0.com/blog/2015/08/28/getting-started-with-falcor/" target="_blank" rel="external">Getting Started With Falcor</a></]]>
    </summary>
    
  </entry>
  
</feed>
